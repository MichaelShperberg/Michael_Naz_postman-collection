{
	"info": {
		"_postman_id": "7f455c7c-8e0c-44ff-9a30-c57ae29d9eda",
		"name": "Automation_USA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25531563",
		"_collection_link": "https://naz-canada.postman.co/workspace/Mycooler_loyalty-~8ee0bc07-6139-49b6-a8d5-8f35bd1a144e/collection/25531563-7f455c7c-8e0c-44ff-9a30-c57ae29d9eda?action=share&creator=25531563&source=collection_link"
	},
	"item": [
		{
			"name": "Clients",
			"item": [
				{
					"name": "Client",
					"item": [
						{
							"name": "201_Create Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Created\", () => {\r",
											"  pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Client created\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '105'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(105);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apiCode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apiCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"{",
											"    let userEmail = (pm.variables.replaceIn(\"{{$randomEmail}}\").toLowerCase())",
											"    pm.variables.set(\"smsClient\", userEmail)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{smsClient}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"phoneNumber\": \"+19000{{$randomInt}}{{$randomInt}}\",\n    \"birthdate\": \"2000-01-01\",\n    \"termsAndConditions\": {\n        \"platform\": \"{{platform}}\",\n        \"subplatform\": \"{{program}}\"\n    },\n    \"advertisement\": true,\n    \"origin\": \"web\",\n    \"country\": \"{{country}}\",\n    \"zipcode\": \"27507\",\n    \"platform\": \"{{platform}}\",\n    \"migration_tier\": \"NA\",\n    \"migration_points\": 0,\n    \"origin_platform_type\": \"{{platform}}\",\n    \"rewards_platform_id\": \"{{platform}}\",\n    \"rewards_program_id\": \"{{program}}\",\n    \"registration_device_id\": \"501006464537369204515159537367804093171\",\n    \"registration_device_model\": \"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari\",\n    \"registration_device_platform\": \"Win32\",\n    \"registration_device_os\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.15\",\n    \"is_active\": true,\n    \"origin_product_OwnerId\": \"{{platform}}\",\n    \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.15\",\n    \"origin_url\": \"http://localhost:4200\",\n    \"program\": \"{{program}}\",\n    \"locale\": \"{{locale}}\",\n    \"create_sso\": true,\n    \"password\": \"Modelo2021\",\n    \"gender\": \"Male\",\n    \"signup_campaign\": \"Budlight\",\n    \"brand\": \"Budlight\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Create Client  client exist in platform and program",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'There is already a client with this platform and program'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"There is already a client with this platform and program\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Error' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"email\": \"client.created@test.com\",\n   \"firstName\": \"{{$randomFirstName}}\",\n   \"lastName\": \"{{$randomLastName}}\",\n   \"phoneNumber\": \"+1900{{$randomInt}}{{$randomInt}}\",\n   \"birthdate\": \"2000-01-01\",\n   \"termsAndConditions\": {\n       \"platform\": \"{{platform}}\",\n       \"subplatform\": \"MyCooler\"\n   },\n   \"advertisement\": true,\n   \"origin\": \"web\",\n   \"country\": \"USA\",\n   \"zipcode\": \"27507\",\n   \"platform\": \"Rewards_USA\",\n   \"migration_tier\": \"NA\",\n   \"migration_points\": 0,\n   \"origin_platform_type\": \"Rewards_USA\",\n   \"rewards_platform_id\": \"Rewards_USA\",\n   \"rewards_program_id\": \"MyCooler\",\n   \"signup_campaign\": \"NA\",\n   \"registration_device_id\": \"501006464537369204515159537367804093171\",\n   \"registration_device_model\": \"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari\",\n   \"registration_device_platform\": \"Win32\",\n   \"registration_device_os\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.15\",\n   \"is_active\": true,\n   \"origin_product_OwnerId\": \"Rewards_USA\",\n   \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.15\",\n   \"origin_url\": \"http://localhost:4200\",\n   \"program\": \"MyCooler\",\n   \"locale\": \"en-US\",\n   \"create_sso\": true,\n   \"password\": \"Modelo2021\",\n   \"gender\":\"Male\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Create Client  client does exist terms & conditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Terms and Conditions not found'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Terms and Conditions not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Error' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"Validacion@gmail.com\",\n    \"firstName\": \"Johis\",\n    \"lastName\": \"Gil\",\n    \"phoneNumber\": \"+5787878787\",\n    \"birthdate\": \"1987-09-27\",\n    \"termsAndConditions\": {\n        \"platform\": \"Plataforma_usuario1\",\n        \"subplatform\": \"Subplatform1\"\n    },\n    \"advertisement\": true,\n    \"origin\": \"web\",\n    \"country\": \"USA\",\n    \"zipcode\": \"46120\",\n    \"gender\": \"male\",\n    \"platform\": \"Rewards_USA\",\n    \"migration_tier\": \"NA\",\n    \"migration_points\": 0,\n    \"origin_platform_type\": \"Rewards_USA\",\n    \"rewards_platform_id\": \"Rewards_USA\",\n    \"rewards_program_id\": \"MyCooler\",\n    \"signup_campaign\": \"NA\",\n    \"registration_device_id\": \"501006464537369204515159537367804093171\",\n    \"registration_device_model\": \"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari\",\n    \"registration_device_platform\": \"Win32\",\n    \"registration_device_os\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.15\",\n    \"is_active\": true,\n    \"origin_product_OwnerId\": \"Rewards_USA\",\n    \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.15\",\n    \"origin_url\": \"http://localhost:4200\",\n    \"program\": \"MyCooler\",\n    \"locale\": \"en-US\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Create Client with attributes does not exists in schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"phoneNumber\": \"+57{{$randomInt}}{{$randomInt}}\",\n    \"birthdate\": \"1991-06-19\",\n    \"termsAndConditions\": {\n        \"platform\": \"Rewards_USA\",\n        \"subplatform\": \"MyCooler\"\n    },\n    \"advertisement\": true,\n    \"origin\": \"web\",\n    \"City\": \"USA\",\n    \"zipcode\": \"46120\",\n    \"platform\": \"Rewards_USA\",\n    \"migration_tier\": \"NA\",\n    \"migration_points\": 0,\n    \"origin_platform_type\": \"Rewards_USA\",\n    \"rewards_platform_id\": \"Rewards_USA\",\n    \"rewards_program_id\": \"MyCooler\",\n    \"signup_campaign\": \"NA\",\n    \"registration_device_id\": \"501006464537369204515159537367804093171\",\n    \"registration_device_model\": \"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\",\n    \"registration_device_platform\": \"Win32\",\n    \"registration_device_os\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\",\n    \"is_active\": true,\n    \"origin_product_OwnerId\": \"Rewards_USA\",\n    \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\",\n    \"origin_url\": \"http://localhost:4200\",\n    \"program\": \"MyCooler\",\n    \"locale\": \"en-US\",\n    \"create_sso\": true,\n    \"password\": \"Modelo2021\",\n    \"gender\": \"Male\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Create Client  client requerid  atributte",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"phoneNumber\": \"+57{{$randomInt}}{{$randomInt}}\",\n    \"birthdate\": \"1991-06-19\",\n    \"termsAndConditions\": {\n        \"platform\": \"Rewards_USA\",\n        \"subplatform\": \"MyCooler\"\n    },\n    \"advertisement\": true,\n    \"origin\": \"web\",\n    \"country\": \"USA\",\n    \"zipcode\": \"46120\",\n    \"platform\": \"Rewards_USA\",\n    \"migration_tier\": \"NA\",\n    \"migration_points\": 0,\n    \"origin_platform_type\": \"Rewards_USA\",\n    \"rewards_platform_id\": \"Rewards_USA\",\n    \"rewards_program_id\": \"MyCooler\",\n    \"signup_campaign\": \"NA\",\n    \"registration_device_id\": \"501006464537369204515159537367804093171\",\n    \"registration_device_model\": \"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\",\n    \"registration_device_platform\": \"Win32\",\n    \"registration_device_os\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\",\n    \"is_active\": true,\n    \"origin_product_OwnerId\": \"Rewards_USA\",\n    \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\",\n    \"origin_url\": \"http://localhost:4200\",\n    \"program\": \"MyCooler\",\n    \"locale\": \"en-US\",\n    \"create_sso\": true,\n    \"password\": \"Modelo2021\",\n    \"gender\": \"Male\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Create Client incorrect email format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Instance email does not conform to the email format'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error[0]).to.eql(\"instance.email does not conform to the \\\"email\\\" format\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"email\": \"incorrect format\",\n   \"firstName\": \"{{$randomFirstName}}\",\n   \"lastName\": \"{{$randomLastName}}\",\n   \"phoneNumber\": \"+1900665445\",\n   \"birthdate\": \"2000-01-01\",\n   \"termsAndConditions\": {\n       \"platform\": \"{{platform}}\",\n       \"subplatform\": \"MyCooler\"\n   },\n   \"advertisement\": true,\n   \"origin\": \"web\",\n   \"country\": \"USA\",\n   \"zipcode\": \"27507\",\n   \"platform\": \"Rewards_USA\",\n   \"migration_tier\": \"NA\",\n   \"migration_points\": 0,\n   \"origin_platform_type\": \"Rewards_USA\",\n   \"rewards_platform_id\": \"Rewards_USA\",\n   \"rewards_program_id\": \"MyCooler\",\n   \"signup_campaign\": \"NA\",\n   \"registration_device_id\": \"501006464537369204515159537367804093171\",\n   \"registration_device_model\": \"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari\",\n   \"registration_device_platform\": \"Win32\",\n   \"registration_device_os\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.15\",\n   \"is_active\": true,\n   \"origin_product_OwnerId\": \"Rewards_USA\",\n   \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.15\",\n   \"origin_url\": \"http://localhost:4200\",\n   \"program\": \"MyCooler\",\n   \"locale\": \"en-US\",\n   \"create_sso\": true,\n   \"password\": \"Modelo2021\",\n   \"gender\":\"Male\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client"
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Update Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Client updated\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '102'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(102);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apicode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"yohisgil@gmail.com\",\n  \"platform\": \"Rewards_USA\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"app\",\n  \"agent\": \"PostmanRuntime/7.28.3\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Update Client requerid atributte",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"Validacion_cliente@gmail.com\",\n  \"agent\": \"PostmanRuntime/7.28.3\",\n   \"email_opt_in\": true,\n  \"push_opt_in\": true,\n  \"sms_opt_in\": true\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Update Client not exist  atributte",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Client not found'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Client not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Error' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"    pm.expect(jsonData.apiCode).to.eql(41);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"apiCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"Validacion_cliente@gmail.com\",\n  \"platform\": \"Rewards_USA\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\",\n  \"agent\": \"PostmanRuntime/7.28.3\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Update Client Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"Validacion_cliente@gmail.com\",\n  \"platform\": \"Rewards_USA\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\",\n  \"agent\": \"PostmanRuntime/7.28.3\",\n    \"email_opt_in\": true,\n  \"push_opt_in\": true,\n  \"sms_opt_in\": true\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client"
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Get Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '100'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(100);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apiCode\": { \"type\": \"number\" }, \r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/client?user={{email}}&program={{program}}&platform={{platform}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client"
									],
									"query": [
										{
											"key": "time_zone",
											"value": "America/Mexico_City",
											"disabled": true
										},
										{
											"key": "user",
											"value": "{{email}}"
										},
										{
											"key": "program",
											"value": "{{program}}"
										},
										{
											"key": "platform",
											"value": "{{platform}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Get Client time zone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '101'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(101);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apiCode\": { \"type\": \"number\" }, \r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/client?user=diana@gmail.com&platform=Rewards_USA&program=MyCooler&time_zone=America/Mexico_City",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client"
									],
									"query": [
										{
											"key": "user",
											"value": "diana@gmail.com"
										},
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "time_zone",
											"value": "America/Mexico_City"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Get Client requerid atributtes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/client?user=Validacion_cliente@gmail.com&platform=Rewards_USA",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client"
									],
									"query": [
										{
											"key": "user",
											"value": "Validacion_cliente@gmail.com"
										},
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler",
											"disabled": true
										},
										{
											"key": "time_zone",
											"value": "America/Mexico_City",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Get Client Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/client?user=Validacion_cliente@gmail.com&platform=Rewards_USA&program=MyCooler&time_zone=America/Mexico_City",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client"
									],
									"query": [
										{
											"key": "user",
											"value": "Validacion_cliente@gmail.com"
										},
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "time_zone",
											"value": "America/Mexico_City"
										},
										{
											"key": "NO",
											"value": "ERRR",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login Frequency",
					"item": [
						{
							"name": "200_Create Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Created\", () => {\r",
											"  pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Login frequency created\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '105'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(105);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apicode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": \"mpazaranzazu@gmail.com\",\n    \"time\": 0,\n    \"time_zone\": \"America/Mexico_City\",\n    \"platform\": \"Rewards_USA\",\n    \"program\": \"MyCooler\",\n    \"origin\": \"web\",\n    \"agent\": \"PostmanRuntime/8.28.8\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client/login/frequency",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"login",
										"frequency"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Create Login bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": \"johisgil@email.com\",\n    \"time\": 0,\n    \"time_zone\": \"America/Mexico_City\",\n    \"platform\": \"JOHIS\",\n    \"program\": \"PUNTOS\",\n    \"origin\": \"APP\",\n    \"agent\": \"PostmanRuntime/8.28.8\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client/login/frequency",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"login",
										"frequency"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Create Login  atributte requerid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": \"johisgil@email.com\",\n    \"time\": 0,\n    \"platform\": \"JOHIS\",\n    \"program\": \"PUNTOS\"\n   \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client/login/frequency",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"login",
										"frequency"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Create Login bad request Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": \"johisgil@email.com\",\n    \"time\": 0,\n    \"time_zone\": \"America/Mexico_City\",\n    \"platform\": \"JOHIS\",\n    \"program\": \"PUNTOS\",\n    \"origin\": \"APP\",\n    \"parametronoexiste\":\"cualquiecosa\",\n    \"agent\": \"PostmanRuntime/8.28.8\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client/login/frequency",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"login",
										"frequency"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Client Schema",
					"item": [
						{
							"name": "Config Default Value BackOffice Schema",
							"item": [
								{
									"name": "200_Get Client Schema",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Schema client found\");\r",
													"});\r",
													"\r",
													"pm.test(\"apiCode attribute is equal to '100'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.apiCode).to.eql(100);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all properties\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"status\");\r",
													"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
													"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
													"  pm.expect(pm.response.text()).to.include(\"message\");\r",
													"});\r",
													"\r",
													"const schema = { \r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"status\": { \"type\": \"string\" }, \r",
													"        \"statusCode\": { \"type\": \"number\" },\r",
													"        \"apiCode\": { \"type\": \"number\" }, \r",
													"        \"message\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"status\", \"statusCode\",\"apiCode\", \"message\"]\r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/client/schema?platform=Rewards_USA&program=MyCooler",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"client",
												"schema"
											],
											"query": [
												{
													"key": "platform",
													"value": "Rewards_USA"
												},
												{
													"key": "program",
													"value": "MyCooler"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200_Update Client Schema",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Client schema updated\");\r",
													"});\r",
													"\r",
													"pm.test(\"apiCode attribute is equal to '102'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.apiCode).to.eql(102);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all properties\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"status\");\r",
													"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
													"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
													"  pm.expect(pm.response.text()).to.include(\"message\");\r",
													"});\r",
													"\r",
													"const schema = { \r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"status\": { \"type\": \"string\" }, \r",
													"        \"statusCode\": { \"type\": \"number\" },\r",
													"        \"apiCode\": { \"type\": \"number\" }, \r",
													"        \"message\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"status\", \"statusCode\",\"apiCode\", \"message\"]\r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"platform\": \"Rewards_Test\",\n   \"program\": \"MyCooler_Prueba\",\n   \"client_structure\": [{\n       \"field_label\": \"Favorite beer\",\n       \"field_name\": \"favorite_cerveza\",\n       \"field_type\": \"text\",\n       \"field_regex\": \"/^[a-zA-Z '.-]*$/\",\n       \"field_Minlength\": 1,\n       \"field_Maxlength\": 50,\n       \"field_required\": false,\n       \"status\": \"Active\",\n       \"basic\": true,\n       \"position_V\": 1,\n       \"position_H\": 2,\n       \"regex_description\" : \"\"\n   }],\n    \"update_user\": \"yohisgil@gmail.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/client/schema",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"client",
												"schema"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Enable Profile Edit",
							"item": [
								{
									"name": "200_Get Client Schema Updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Schema client found\");\r",
													"});\r",
													"\r",
													"pm.test(\"apiCode attribute is equal to '100'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.apiCode).to.eql(100);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all properties\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"status\");\r",
													"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
													"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
													"  pm.expect(pm.response.text()).to.include(\"message\");\r",
													"});\r",
													"\r",
													"const schema = { \r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"status\": { \"type\": \"string\" }, \r",
													"        \"statusCode\": { \"type\": \"number\" },\r",
													"        \"apiCode\": { \"type\": \"number\" }, \r",
													"        \"message\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"status\", \"statusCode\",\"apiCode\", \"message\"]\r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/client/schema?platform=Rewards_USA&program=MyCooler",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"client",
												"schema"
											],
											"query": [
												{
													"key": "platform",
													"value": "Rewards_USA"
												},
												{
													"key": "program",
													"value": "MyCooler"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "400_Create Client Schema exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'There is already this client schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"There is already this client schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Error' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"platform\": \"Rewards_Test\",\n   \"program\": \"MyCooler_Prueba\",\n   \"client_structure\": [{\n           \"field_required\": true,\n           \"field_label\": \"Email\",\n           \"field_max_length\": 100,\n           \"field_min_length\": 1,\n           \"field_regex\": \"\",\n           \"field_name\": \"email\",\n           \"field_type\": \"text\",\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 1,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_required\": false,\n           \"field_label\": \"Name\",\n           \"field_name\": \"firstName\",\n           \"field_type\": \"text\",\n           \"field_regex\": \"[A-Za-zÀ-ÖØ-öø-ÿ ]*\",\n           \"field_min_length\": 1,\n           \"field_max_length\": 100,\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 2,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_required\": false,\n           \"field_label\": \"Last Name\",\n           \"field_name\": \"lastName\",\n           \"field_type\": \"text\",\n           \"field_regex\": \"[A-Za-zÀ-ÖØ-öø-ÿ ]*\",\n           \"field_min_length\": 1,\n           \"field_max_length\": 100,\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 3,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_required\": false,\n           \"field_label\": \"Phone\",\n           \"field_name\": \"phoneNumber\",\n           \"field_type\": \"phone\",\n           \"field_regex\": \"\",\n           \"field_min_length\": 10,\n           \"field_max_length\": 100,\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 4,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_required\": false,\n           \"field_label\": \"Birthdate\",\n           \"field_name\": \"birthdate\",\n           \"field_type\": \"date\",\n           \"field_format\": \"YYYY-MM-DD\",\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 4,\n           \"position_H\": 2,\n           \"regex_description\" : \"\"\n       },{\n           \"field_required\": false,\n           \"field_label\": \"Password\",\n           \"field_max_length\": 100,\n           \"field_min_length\": 1,\n           \"field_regex\": \"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9d]{8,}$\",\n           \"field_name\": \"password\",\n           \"field_type\": \"password\",\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 5,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_required\": false,\n           \"field_label\": \"Confirm Password\",\n           \"field_max_length\": 100,\n           \"field_min_length\": 1,\n           \"field_regex\": \"\",\n           \"field_name\": \"confirmPassword\",\n           \"field_type\": \"password\",\n           \"status\": \"Active\",\n           \"basic\": false\n       }, {\n           \"field_required\": true,\n           \"field_label\": \"Zip Code\",\n           \"field_max_length\": 100,\n           \"field_min_length\": 1,\n           \"field_regex\": \"\",\n           \"field_name\": \"zipcode\",\n           \"field_type\": \"text\",\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 6,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_label\": \"I want to receive news & promotions\",\n           \"field_name\": \"advertisement\",\n           \"field_type\": \"checkbox\",\n           \"field_required\": false,\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 7,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_label\": \"Terms & Conditions\",\n           \"field_name\": \"termsAndConditionsRewardsUSA\",\n           \"field_type_name\": \"termsAndConditions\",\n           \"field_type\": \"checkbox\",\n           \"subplatform\": \"MyCooler\",\n           \"platform\": \"Rewards_USA\",\n           \"field_required\": true,\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 8,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_label\": \"Email Newsletter Notifications\",\n           \"field_name\": \"email_opt_in\",\n           \"field_type\": \"checkbox\",\n           \"field_required\": true,\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 9,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_label\": \"Push Notifications\",\n           \"field_name\": \"push_opt_in\",\n           \"field_type\": \"checkbox\",\n           \"field_required\": true,\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 10,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_label\": \"SMS Notifications\",\n           \"field_name\": \"sms_opt_in\",\n           \"field_type\": \"checkbox\",\n           \"field_required\": true,\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 11,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }\n   ],\n   \"create_user\": \"yohisgil@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client/schema",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"schema"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Create Client Schema  basic false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'There is already this client schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"There is already this client schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Error' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"platform\": \"Rewards_Prueba1\",\n   \"program\": \"MyCooler_Prueba1\",\n   \"client_structure\": [{\n           \"field_required\": true,\n           \"field_label\": \"Email\",\n           \"field_max_length\": 100,\n           \"field_min_length\": 1,\n           \"field_regex\": \"\",\n           \"field_name\": \"email\",\n           \"field_type\": \"text\",\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 1,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_required\": true,\n           \"field_label\": \"Name\",\n           \"field_name\": \"firstName\",\n           \"field_type\": \"text\",\n           \"field_regex\": \"[A-Za-zÀ-ÖØ-öø-ÿ ]*\",\n           \"field_min_length\": 1,\n           \"field_max_length\": 100,\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 2,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_required\": true,\n           \"field_label\": \"Last Name\",\n           \"field_name\": \"lastName\",\n           \"field_type\": \"text\",\n           \"field_regex\": \"[A-Za-zÀ-ÖØ-öø-ÿ ]*\",\n           \"field_min_length\": 1,\n           \"field_max_length\": 100,\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 3,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_required\": true,\n           \"field_label\": \"Phone\",\n           \"field_name\": \"phoneNumber\",\n           \"field_type\": \"phone\",\n           \"field_regex\": \"\",\n           \"field_min_length\": 10,\n           \"field_max_length\": 100,\n           \"status\": \"Active\",\n           \"basic\": false,\n           \"position_V\": 4,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_required\": true,\n           \"field_label\": \"Birthdate\",\n           \"field_name\": \"birthdate\",\n           \"field_type\": \"date\",\n           \"field_format\": \"YYYY-MM-DD\",\n           \"status\": \"Active\",\n           \"basic\": false,\n           \"position_V\": 4,\n           \"position_H\": 2,\n           \"regex_description\" : \"\"\n       },{\n           \"field_required\": true,\n           \"field_label\": \"Password\",\n           \"field_max_length\": 100,\n           \"field_min_length\": 1,\n           \"field_regex\": \"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9d]{8,}$\",\n           \"field_name\": \"password\",\n           \"field_type\": \"password\",\n           \"status\": \"Active\",\n           \"basic\": false,\n           \"position_V\": 5,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_required\": true,\n           \"field_label\": \"Confirm Password\",\n           \"field_max_length\": 100,\n           \"field_min_length\": 1,\n           \"field_regex\": \"\",\n           \"field_name\": \"confirmPassword\",\n           \"field_type\": \"password\",\n           \"status\": \"Active\",\n           \"basic\": false\n       }, {\n           \"field_required\": true,\n           \"field_label\": \"Zip Code\",\n           \"field_max_length\": 100,\n           \"field_min_length\": 1,\n           \"field_regex\": \"\",\n           \"field_name\": \"zipcode\",\n           \"field_type\": \"text\",\n           \"status\": \"Active\",\n           \"basic\": false,\n           \"position_V\": 6,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_label\": \"I want to receive news & promotions\",\n           \"field_name\": \"advertisement\",\n           \"field_type\": \"checkbox\",\n           \"field_required\": false,\n           \"status\": \"Active\",\n           \"basic\": false,\n           \"position_V\": 7,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_label\": \"Terms & Conditions\",\n           \"field_name\": \"termsAndConditionsRewardsUSA\",\n           \"field_type_name\": \"termsAndConditions\",\n           \"field_type\": \"checkbox\",\n           \"subplatform\": \"MyCooler\",\n           \"platform\": \"Rewards_USA\",\n           \"field_required\": true,\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 8,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_label\": \"Email Newsletter Notifications\",\n           \"field_name\": \"email_opt_in\",\n           \"field_type\": \"checkbox\",\n           \"field_required\": true,\n           \"status\": \"Active\",\n           \"basic\": false,\n           \"position_V\": 9,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_label\": \"Push Notifications\",\n           \"field_name\": \"push_opt_in\",\n           \"field_type\": \"checkbox\",\n           \"field_required\": true,\n           \"status\": \"Active\",\n           \"basic\": false,\n           \"position_V\": 10,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_label\": \"SMS Notifications\",\n           \"field_name\": \"sms_opt_in\",\n           \"field_type\": \"checkbox\",\n           \"field_required\": true,\n           \"status\": \"Active\",\n           \"basic\": false,\n           \"position_V\": 11,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }\n   ],\n   \"create_user\": \"yohisgil@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client/schema",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"schema"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Create Client requerid fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"platform\": \"Rewards_Prueba\",\n   \"program\": \"MyCooler_Prueba\",\n   \"client_structure\": [{\n           \"field_required\": true,\n\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 1,\n           \"position_H\": 1\n       }, {\n           \"field_required\": true,\n           \"field_label\": \"Name\",\n           \"field_name\": \"firstName\",\n           \"field_type\": \"text\",\n           \"field_regex\": \"[A-Za-zÀ-ÖØ-öø-ÿ ]*\",\n           \"field_min_length\": 1,\n           \"field_max_length\": 100,\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 2,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_required\": true,\n           \"field_label\": \"Last Name\",\n           \"field_name\": \"lastName\",\n           \"field_type\": \"text\",\n           \"field_regex\": \"[A-Za-zÀ-ÖØ-öø-ÿ ]*\",\n           \"field_min_length\": 1,\n           \"field_max_length\": 100,\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 3,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_required\": true,\n           \"field_label\": \"Phone\",\n           \"field_name\": \"phoneNumber\",\n           \"field_type\": \"phone\",\n           \"field_regex\": \"\",\n           \"field_min_length\": 10,\n           \"field_max_length\": 100,\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 4,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_required\": true,\n           \"field_label\": \"Birthdate\",\n           \"field_name\": \"birthdate\",\n           \"field_type\": \"date\",\n           \"field_format\": \"YYYY-MM-DD\",\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 4,\n           \"position_H\": 2,\n           \"regex_description\" : \"\"\n       },{\n           \"field_required\": true,\n           \"field_label\": \"Password\",\n           \"field_max_length\": 100,\n           \"field_min_length\": 1,\n           \"field_regex\": \"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9d]{8,}$\",\n           \"field_name\": \"password\",\n           \"field_type\": \"password\",\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 5,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_required\": true,\n           \"field_label\": \"Confirm Password\",\n           \"field_max_length\": 100,\n           \"field_min_length\": 1,\n           \"field_regex\": \"\",\n           \"field_name\": \"confirmPassword\",\n           \"field_type\": \"password\",\n           \"status\": \"Active\",\n           \"basic\": false\n       }, {\n           \"field_required\": true,\n           \"field_label\": \"Zip Code\",\n           \"field_max_length\": 100,\n           \"field_min_length\": 1,\n           \"field_regex\": \"\",\n           \"field_name\": \"zipcode\",\n           \"field_type\": \"text\",\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 6,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_label\": \"I want to receive news & promotions\",\n           \"field_name\": \"advertisement\",\n           \"field_type\": \"checkbox\",\n           \"field_required\": false,\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 7,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_label\": \"Terms & Conditions\",\n           \"field_name\": \"termsAndConditionsRewardsUSA\",\n           \"field_type_name\": \"termsAndConditions\",\n           \"field_type\": \"checkbox\",\n           \"subplatform\": \"MyCooler\",\n           \"platform\": \"Rewards_USA\",\n           \"field_required\": true,\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 8,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_label\": \"Email Newsletter Notifications\",\n           \"field_name\": \"email_opt_in\",\n           \"field_type\": \"checkbox\",\n           \"field_required\": true,\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 9,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_label\": \"Push Notifications\",\n           \"field_name\": \"push_opt_in\",\n           \"field_type\": \"checkbox\",\n           \"field_required\": true,\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 10,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }, {\n           \"field_label\": \"SMS Notifications\",\n           \"field_name\": \"sms_opt_in\",\n           \"field_type\": \"checkbox\",\n           \"field_required\": true,\n           \"status\": \"Active\",\n           \"basic\": true,\n           \"position_V\": 11,\n           \"position_H\": 1,\n           \"regex_description\" : \"\"\n       }\n   ],\n   \"create_user\": \"yohisgil@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client/schema",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"schema"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Create Client Schema Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"platform\": \"Rewards_Test\",\n   \"program\": \"MyCooler_Test\",\n   \"client_structure\": [{\n       \"field_label\": \"Favorite sport\",\n       \"field_name\": \"favorite_sport\",\n       \"field_type\": \"text\",\n       \"field_regex\": \"/^[a-zA-Z '.-]*$/\",\n       \"field_Minlength\": 1,\n       \"field_Maxlength\": 10,\n       \"field_required\": false,\n       \"status\": \"Active\"\n   }, {\n       \"field_label\": \"Favorite Beer\",\n       \"field_name\": \"favorite_beer\",\n       \"field_type\": \"select\",\n       \"field_items\": [{\n           \"id\": 20201,\n           \"value\": \"Poker\",\n           \"order\": 1\n       }, {\n           \"id\": 20202,\n           \"value\": \"Aguila\",\n           \"order\": 2\n       }, {\n           \"id\": 20203,\n           \"value\": \"Club Colombia\",\n           \"order\": 3\n       }],\n       \"field_required\": true,\n       \"status\": \"Active\"\n   }, {\n       \"field_label\": \"Terms & Conditions\",\n       \"field_name\": \"termsAndConditionsRewardsTEST\",\n       \"field_type_name\": \"termsAndConditions\",\n       \"field_type\": \"checkbox\",\n       \"subplatform\": \"Rewards_USA\",\n       \"platform\": \"MyCooler\",\n       \"field_required\": true,\n       \"status\": \"Active\"\n   }],\n   \"create_user\": \"yohisgil@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client/schema",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"schema"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Get Client Schema requerid fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apicode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/client/schema?otro=afdafa",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"schema"
									],
									"query": [
										{
											"key": "platform",
											"value": "Prueba_joha",
											"disabled": true
										},
										{
											"key": "otro",
											"value": "afdafa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Get Client Schema Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{to",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/client/schema?platform=Rewards_Prueba&program=MyCooler_Prueba",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"schema"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_Prueba"
										},
										{
											"key": "program",
											"value": "MyCooler_Prueba"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Client Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const attributes = pm.response.json().data[0].client_structure;\r",
											"const validParams = [\"First Name\", \"Last Name\", \"Full Name\", \"Birthdate\", \"Gender\", \"Password\", \"Phone\", \"Zip Code\", \"Country\", \"Source\"]\r",
											"\r",
											"function verifySchema(beforeOrAfter) {\r",
											"    const status = beforeOrAfter === \"before\"\r",
											"    const testName = status ? \"are set to the right values\" : \"were updated successfully\"\r",
											"    let defaultValues = {};   \r",
											"    for(let attr of attributes) {\r",
											"        if(validParams.includes(attr.field_label)) { defaultValues[attr.field_label] = attr.default_value; }\r",
											"    }\r",
											"\r",
											"    pm.test(`The default values ${testName}`, ()=> {\r",
											"        for(let attr in defaultValues) {\r",
											"            switch(attr) {\r",
											"                case \"First Name\": pm.expect(defaultValues[attr]).to.eql(status ? \"Beer\": \"otherValue\"); break;\r",
											"                case \"Last Name\": pm.expect(defaultValues[attr]).to.eql(status ? \"Lover\": \"otherValue\"); break;\r",
											"                case \"Full Name\": pm.expect(defaultValues[attr]).to.eql(status ? \"Beer Lover\": \"otherValue\"); break;\r",
											"                case \"Birthdate\": pm.expect(defaultValues[attr]).to.eql(status ? \"1950-01-01\": \"otherValue\"); break;\r",
											"                case \"Gender\": pm.expect(defaultValues[attr]).to.eql(status ? \"Gender\": \"otherValue\"); break;\r",
											"                case \"Password\": pm.expect(defaultValues[attr]).to.eql(status ? \"Abc123456\": \"otherValue\"); break;\r",
											"                case \"Phone\": pm.expect(defaultValues[attr]).to.eql(status ? \"1234567890\": \"otherValue\"); break;\r",
											"                case \"Zip Code\": pm.expect(defaultValues[attr]).to.eql(status ? \"54001\": \"otherValue\"); break;\r",
											"                case \"Country\": pm.expect(defaultValues[attr]).to.eql(status ? \"Mexico\": \"otherValue\"); break;\r",
											"                case \"Source\": pm.expect(defaultValues[attr]).to.eql(status ? \"MyCooler2\": \"otherValue\"); break;\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"if(!pm.collectionVariables.get(\"runs\")) {\r",
											"    pm.collectionVariables.set(\"runs\", 1);\r",
											"    verifySchema(\"before\");\r",
											"}else if(pm.collectionVariables.get(\"runs\") === 1) {\r",
											"    verifySchema(\"after\");\r",
											"    pm.collectionVariables.set(\"runs\", 2)\r",
											"}else if(pm.collectionVariables.get(\"runs\") === 2) {\r",
											"    verifySchema(\"before\");\r",
											"    pm.collectionVariables.unset(\"runs\");\r",
											"    pm.collectionVariables.unset(\"defaultValues\");\r",
											"    pm.collectionVariables.unset(\"updatedSchema\");\r",
											"    postman.setNextRequest(null);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{urlApiAbi}}/client/schema?platform=Rewards_USA&program=MyCooler",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"schema"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Get Client Schema Updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const allProperties = pm.response.json().data[0].client_structure;\r",
											"pm.collectionVariables.set(\"allProperties\", allProperties);\r",
											"const validFields = [\"First Name\", \"Last Name\"];\r",
											"\r",
											"if(pm.collectionVariables.get(\"areFieldsEnabled\")) {\r",
											"    for(let property of allProperties) {\r",
											"        if(validFields.includes(property.field_label)){\r",
											"            pm.test(`The ${property.field_label} field was enabled successfuly`, () => {\r",
											"                pm.expect(property.allow_edit).to.be.true\r",
											"            });\r",
											"        }\r",
											"    }\r",
											"    pm.collectionVariables.unset(\"areFieldsEnabled\");\r",
											"    postman.setNextRequest(null);\r",
											"}else if(pm.collectionVariables.get(\"areFieldsEnabled\") === false) {\r",
											"        for(let property of allProperties) {\r",
											"        if(validFields.includes(property.field_label)){\r",
											"            pm.test(`The ${property.field_label} field was disabled successfuly`, () => {\r",
											"                pm.expect(property.allow_edit).to.be.false;\r",
											"            });\r",
											"        }\r",
											"    }\r",
											"    pm.collectionVariables.set(\"areFieldsEnabled\", true)\r",
											"    postman.setNextRequest(\"200_Disable allow_edit attribute for valid fields in the BackOffice\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/client/schema?platform=Rewards_USA&program=MyCooler",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"schema"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Disable allow_edit attribute for valid fields in the BackOffice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"200_Get Client Schema Updated\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(!pm.collectionVariables.get(\"areFieldsEnabled\")) {\r",
											"    pm.collectionVariables.set(\"areFieldsEnabled\", false);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"platform\": \"Rewards_USA\",\n   \"program\": \"MyCooler\",\n   \"client_structure\": [{\n                    \"field_type\": \"text\",\n                    \"field_label\": \"First Name\",\n                    \"field_name\": \"firstName\",\n                    \"status\": \"Active\",\n                    \"basic\": true,\n                    \"field_required\": true,\n                    \"field_regex\": \"\",\n                    \"regex_description\": \"Must be a string without numbers and special characters\",\n                    \"field_min_length\": 1,\n                    \"field_max_length\": 100,\n                    \"position_H\": 1,\n                    \"position_V\": 1,\n                    \"place_holder\": \"First Name\",\n                    \"default_value\": \"Beer\",\n                    \"allow_edit\": {{areFieldsEnabled}}\n                },\n                {\n                    \"field_type\": \"text\",\n                    \"field_label\": \"Last Name\",\n                    \"field_name\": \"lastName\",\n                    \"status\": \"Active\",\n                    \"basic\": true,\n                    \"field_required\": true,\n                    \"field_regex\": \"\",\n                    \"regex_description\": \"Must be a string without numbers and special characters\",\n                    \"field_min_length\": 1,\n                    \"field_max_length\": 100,\n                    \"position_H\": 1,\n                    \"position_V\": 2,\n                    \"place_holder\": \"Last Name\",\n                    \"default_value\": \"Lover\",\n                    \"allow_edit\": {{areFieldsEnabled}}\n                }],\n    \"update_user\": \"yohisgil@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client/schema",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"schema"
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Update Client Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//postman.setNextRequest(\"Get Client Schema\")\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const status = pm.collectionVariables.get(\"runs\") === 1;\r",
											"const payload = JSON.stringify([\r",
											"    {\r",
											"        \"field_type\": \"text\",\r",
											"        \"field_label\": \"First Name\",\r",
											"        \"field_name\": \"firstName\",\r",
											"        \"status\": \"Active\",\r",
											"        \"basic\": true,\r",
											"        \"field_required\": true,\r",
											"        \"field_regex\": \"\",\r",
											"        \"regex_description\": \"Must be a string without numbers and special characters\",\r",
											"        \"field_min_length\": 1,\r",
											"        \"field_max_length\": 100,\r",
											"        \"position_H\": 1,\r",
											"        \"position_V\": 1,\r",
											"        \"place_holder\": \"First Name\",\r",
											"        \"default_value\": status ? \"otherValue\" : \"Beer\",\r",
											"        \"allow_edit\": false\r",
											"    },\r",
											"    {\r",
											"        \"field_type\": \"text\",\r",
											"        \"field_label\": \"Last Name\",\r",
											"        \"field_name\": \"lastName\",\r",
											"        \"status\": \"Active\",\r",
											"        \"basic\": true,\r",
											"        \"field_required\": true,\r",
											"        \"field_regex\": \"\",\r",
											"        \"regex_description\": \"Must be a string without numbers and special characters\",\r",
											"        \"field_min_length\": 1,\r",
											"        \"field_max_length\": 100,\r",
											"        \"position_H\": 1,\r",
											"        \"position_V\": 2,\r",
											"        \"place_holder\": \"Last Name\",\r",
											"        \"default_value\": status ? \"otherValue\" : \"Lover\",\r",
											"        \"allow_edit\": true\r",
											"    },\r",
											"    {\r",
											"        \"field_type\": \"text\",\r",
											"        \"field_label\": \"Full Name\",\r",
											"        \"field_name\": \"fullName\",\r",
											"        \"status\": \"Active\",\r",
											"        \"basic\": false,\r",
											"        \"field_required\": true,\r",
											"        \"field_regex\": \"\",\r",
											"        \"regex_description\": \"Must be a string without numbers and special characters\",\r",
											"        \"field_min_length\": 1,\r",
											"        \"field_max_length\": 100,\r",
											"        \"place_holder\": \"Full Name\",\r",
											"        \"default_value\": status ? \"otherValue\" : \"Beer Lover\"\r",
											"    },\r",
											"    {\r",
											"        \"field_type\": \"date\",\r",
											"        \"field_label\": \"Birthdate\",\r",
											"        \"field_name\": \"birthdate\",\r",
											"        \"status\": \"Active\",\r",
											"        \"basic\": true,\r",
											"        \"field_required\": true,\r",
											"        \"regex_description\": \"\",\r",
											"        \"field_format\": \"MM/DD/YYYY\",\r",
											"        \"position_H\": 1,\r",
											"        \"position_V\": 3,\r",
											"        \"default_value\": status ? \"otherValue\" : \"1950-01-01\",\r",
											"        \"allow_edit\": true\r",
											"    },\r",
											"    {\r",
											"        \"field_type\": \"select\",\r",
											"        \"field_label\": \"Gender\",\r",
											"        \"field_name\": \"gender\",\r",
											"        \"status\": \"Active\",\r",
											"        \"basic\": true,\r",
											"        \"field_required\": true,\r",
											"        \"regex_description\": \"\",\r",
											"        \"field_items\": [\r",
											"            {\r",
											"                \"value\": \"Male\",\r",
											"                \"order\": 1\r",
											"            },\r",
											"            {\r",
											"                \"value\": \"Female\",\r",
											"                \"order\": 2\r",
											"            },\r",
											"            {\r",
											"                \"value\": \"Non-Binary\",\r",
											"                \"order\": 3\r",
											"            }\r",
											"        ],\r",
											"        \"position_H\": 1,\r",
											"        \"position_V\": 4,\r",
											"        \"default_value\": status ? \"otherValue\" : \"Gender\",\r",
											"        \"allow_edit\": true\r",
											"    },\r",
											"    {\r",
											"        \"field_type\": \"password\",\r",
											"        \"field_label\": \"Password\",\r",
											"        \"field_name\": \"password\",\r",
											"        \"status\": \"Active\",\r",
											"        \"basic\": true,\r",
											"        \"field_required\": true,\r",
											"        \"field_regex\": \"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9d]{8,}$\",\r",
											"        \"regex_description\": \"Must contain at least eight characters, at least one number and both lower and uppercase letters\",\r",
											"        \"field_min_length\": 1,\r",
											"        \"field_max_length\": 100,\r",
											"        \"position_H\": 1,\r",
											"        \"position_V\": 6,\r",
											"        \"default_value\": status ? \"otherValue\" : \"Abc123456\"\r",
											"    },\r",
											"    {\r",
											"        \"field_type\": \"phone\",\r",
											"        \"field_label\": \"Phone\",\r",
											"        \"field_name\": \"phoneNumber\",\r",
											"        \"status\": \"Active\",\r",
											"        \"basic\": true,\r",
											"        \"field_required\": true,\r",
											"        \"field_regex\": \"\",\r",
											"        \"regex_description\": \"\",\r",
											"        \"field_min_length\": 9,\r",
											"        \"field_max_length\": 13,\r",
											"        \"position_H\": 1,\r",
											"        \"position_V\": 8,\r",
											"        \"default_value\": status ? \"otherValue\" : \"1234567890\",\r",
											"        \"allow_edit\": false\r",
											"    },\r",
											"    {\r",
											"        \"field_type\": \"text\",\r",
											"        \"field_label\": \"Zip Code\",\r",
											"        \"field_name\": \"zipcode\",\r",
											"        \"status\": \"Active\",\r",
											"        \"basic\": true,\r",
											"        \"field_required\": true,\r",
											"        \"field_regex\": \"^[0-9]+$\",\r",
											"        \"regex_description\": \"Please enter a valid zip code.\",\r",
											"        \"field_min_length\": 5,\r",
											"        \"field_max_length\": 5,\r",
											"        \"position_H\": 1,\r",
											"        \"position_V\": 9,\r",
											"        \"place_holder\": \"33011\",\r",
											"        \"default_value\": status ? \"otherValue\" : \"54001\",\r",
											"        \"allow_edit\": false\r",
											"    },\r",
											"    {\r",
											"        \"field_type\": \"text\",\r",
											"        \"field_label\": \"Country\",\r",
											"        \"field_name\": \"country\",\r",
											"        \"status\": \"Active\",\r",
											"        \"basic\": false,\r",
											"        \"field_required\": true,\r",
											"        \"field_regex\": \"\",\r",
											"        \"regex_description\": \"\",\r",
											"        \"field_min_length\": 1,\r",
											"        \"field_max_length\": 100,\r",
											"        \"place_holder\": \"\",\r",
											"        \"default_value\": status ? \"otherValue\" : \"Mexico\",\r",
											"        \"allow_edit\": true\r",
											"    },\r",
											"    {\r",
											"        \"field_type\": \"text\",\r",
											"        \"field_label\": \"Source\",\r",
											"        \"field_name\": \"source\",\r",
											"        \"status\": \"Active\",\r",
											"        \"basic\": false,\r",
											"        \"field_required\": true,\r",
											"        \"field_regex\": \"\",\r",
											"        \"regex_description\": \"\",\r",
											"        \"field_min_length\": 1,\r",
											"        \"field_max_length\": 100,\r",
											"        \"place_holder\": \"\",\r",
											"        \"default_value\": status ? \"otherValue\" : \"MyCooler2\"\r",
											"    }]);\r",
											"pm.collectionVariables.set(\"updatedSchema\", payload);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "0be0f552db16cf5637e22bca5cabbd85",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"platform\": \"Rewards_USA\",\n    \"program\": \"MyCooler\",\n    \"client_structure\": {{updatedSchema}},\n    \"update_user\": \"funtional.test@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client/schema",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"schema"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Update Client Schema attribute requerid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apicode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"platform\": \"Rewards_Prueba\",\n   \"program\": \"MyCooler_Prueba\",\n   \"client_structure\": [{\n       \"field_label\": \"Favorite beer\",\n       \"field_name\": \"favorite_cerveza\",\n       \"field_type\": \"text\",\n       \"field_regex\": \"/^[a-zA-Z '.-]*$/\",\n       \"field_Minlength\": 1,\n       \"field_Maxlength\": 50,\n       \"field_required\": false,\n       \"status\": \"Active\",\n       \"basic\": true\n \n   }],\n    \"update_user\": \"yohisgil@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client/schema",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"schema"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Update Client Schema Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "token",
										"value": "{{tok",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"platform\": \"Rewards_Prueba\",\n   \"program\": \"MyCooler_Prueba\",\n   \"client_structure\": [{\n       \"field_label\": \"Favorite beer\",\n       \"field_name\": \"favorite_cerveza\",\n       \"field_type\": \"text\",\n       \"field_regex\": \"/^[a-zA-Z '.-]*$/\",\n       \"field_Minlength\": 1,\n       \"field_Maxlength\": 50,\n       \"field_required\": false,\n       \"status\": \"Active\",\n       \"basic\": true,\n       \"position_V\": 1,\n       \"position_H\": 2\n   }],\n    \"update_user\": \"yohisgil@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/client/schema",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"schema"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Delete Client Schema Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Error' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"message attribute is equal to 'Client schema not found'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Client schema not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '41'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(41);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/client/schema/615e6903dca1180008ebfeec",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"schema",
										"615e6903dca1180008ebfeec"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Delete Client Schema  Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "key",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "token",
										"value": "{{to",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/client/schema/615e6903dca1180008ebfeec",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"schema",
										"615e6903dca1180008ebfeec"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Schema Validation",
					"item": [
						{
							"name": "200_Client Schema Validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Client schema validation success\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '100'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(100);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apiCode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apiCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlApiAbi}}/client/schema/validation?platform=Rewards_USA&program=MyCooler&email=Validacion_cliente@gmail.com",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"schema",
										"validation"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "email",
											"value": "Validacion_cliente@gmail.com"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Client Schema Validation  requerid attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlApiAbi}}/client/schema/validation?platform=Rewards_USA&email=Validacion_cliente@gmail.com",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"schema",
										"validation"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler",
											"disabled": true
										},
										{
											"key": "email",
											"value": "Validacion_cliente@gmail.com"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Historical",
					"item": [
						{
							"name": "Get Historical Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Query without data\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '101'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(101);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apiCode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apiCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/client/historical?user=pruebahistorical@gmail.com&platform=Rewards_USA&program=MyCooler",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"client",
										"historical"
									],
									"query": [
										{
											"key": "user",
											"value": "pruebahistorical@gmail.com"
										},
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Points",
			"item": [
				{
					"name": "Points History",
					"item": [
						{
							"name": "200_Points History Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Points history found\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '100'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(100);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apiCode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apiCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/points/history?user=yohisgil@gmail.com&platform=Rewards_USA&program=MyCooler&page=1&limit=10",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"history"
									],
									"query": [
										{
											"key": "user",
											"value": "yohisgil@gmail.com"
										},
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Points History client not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Error'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '41'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(41);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Client not found' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Client not found\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"message.status\": { \"type\": \"object\" }, \r",
											"        \"message.message\": { \"type\": \"object\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/points/history?user=y@gmail.com&platform=Rewards_USA&program=MyCooler&page=1&limit=2",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"history"
									],
									"query": [
										{
											"key": "user",
											"value": "y@gmail.com"
										},
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Points History requerid params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Invalid schema' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apicode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/points/history?user=yohisgil@gmail.com&platform=Rewards_USA&program=MyCooler",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"history"
									],
									"query": [
										{
											"key": "user",
											"value": "yohisgil@gmail.com"
										},
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "2",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Points History email format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Invalid schema' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apicode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/points/history?user=yohisgil@gmail&platform=Rewards_USA&program=MyCooler&page=1&limit=2",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"history"
									],
									"query": [
										{
											"key": "user",
											"value": "yohisgil@gmail"
										},
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Points History Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/points/history?user=yohisgil@gmail.com&platform=Rewards_USA&program=MyCooler&page=1&limit=2",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"history"
									],
									"query": [
										{
											"key": "user",
											"value": "yohisgil@gmail.com"
										},
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Points Balance",
					"item": [
						{
							"name": "200_Points Balance",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/points?user=yohisgil@gmail.com&platform=Rewards_USA&program=MyCooler",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points"
									],
									"query": [
										{
											"key": "user",
											"value": "yohisgil@gmail.com"
										},
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Points Balance  client not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Error'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '41'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(41);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Client not found' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Client not found\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"message.status\": { \"type\": \"object\" }, \r",
											"        \"message.message\": { \"type\": \"object\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/points?user=y@gmail.com&platform=Rewards_USA&program=MyCooler",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points"
									],
									"query": [
										{
											"key": "user",
											"value": "y@gmail.com"
										},
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Points Balance requerid params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Invalid schema' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\",\"apicode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/points?user=yohisgil@gmail.com",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points"
									],
									"query": [
										{
											"key": "user",
											"value": "yohisgil@gmail.com"
										},
										{
											"key": "platform",
											"value": "Rewards_USA",
											"disabled": true
										},
										{
											"key": "program",
											"value": "MyCooler",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Points Balance requerid format email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Invalid schema' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\",\"apicode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/points?user=yohisgilgmail.com&platform=Rewards_USA&program=MyCooler",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points"
									],
									"query": [
										{
											"key": "user",
											"value": "yohisgilgmail.com"
										},
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Points Balance Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "token",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/points?user=yohisgil@gmail.com&platform=Rewards_USA&program=MyCooler",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points"
									],
									"query": [
										{
											"key": "user",
											"value": "yohisgil@gmail.com"
										},
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Deposit",
					"item": [
						{
							"name": "Birthday and Anniversary",
							"item": [
								{
									"name": "Unsuccessful",
									"item": [
										{
											"name": "Update Customer Anniversary",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"/*const profileInfo = pm.response.json().user.user_profile;",
															"",
															"pm.test(\"Client anniversary was updated\", () => {",
															"    pm.response.to.have.status(200);",
															"    pm.expect(profileInfo.anniversary).to.eq(pm.collectionVariables.get(\"anniversary\"));",
															"})",
															"*/"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"if(!pm.collectionVariables.get(\"anniversary\")) {\r",
															"    const previousDay = moment().subtract(1, \"days\").format(\"MM-DD\");\r",
															"    pm.collectionVariables.set(\"date\", \"day before\")\r",
															"    pm.collectionVariables.set(\"anniversary\", `2021-${previousDay}`);\r",
															"} else {\r",
															"    const nextDay = moment().add(1, \"days\").format(\"MM-DD\");\r",
															"    pm.collectionVariables.set(\"date\", \"next day\")\r",
															"    pm.collectionVariables.set(\"anniversary\", `2021-${nextDay}`);\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic NTQwMGRhMjE3ZTk2MmFiYzJkOGRjZDJkNTE4NjA2ZjNkMGIxMzkwZjpjMGRjZTM2NGUzM2FhMjVhMGQ2ZDNlNzAzMzk3N2NiYzllOTIwNTVh",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"user\":{\r\n    \"user_profile\":{\r\n        \"anniversary\": \"{{anniversary}}\"\r\n        }\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{SessionM_api_url}}/priv/v1/apps/:api_key/users/:customer_id/",
													"host": [
														"{{SessionM_api_url}}"
													],
													"path": [
														"priv",
														"v1",
														"apps",
														":api_key",
														"users",
														":customer_id",
														""
													],
													"variable": [
														{
															"key": "api_key",
															"value": "{{SessionM_api_key}}"
														},
														{
															"key": "customer_id",
															"value": "{{user_id_sessionm}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Client Birthday",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"if(!pm.collectionVariables.get(\"birthday\")) {\r",
															"    const previousDay = moment().subtract(1, \"days\").format(\"MM-DD\");\r",
															"    pm.collectionVariables.set(\"birthday\", `1990-${previousDay}`);\r",
															"} else {\r",
															"    const nextDay = moment().add(1, \"days\").format(\"MM-DD\");\r",
															"    pm.collectionVariables.set(\"birthday\", `1990-${nextDay}`);\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Client birthdate was updated\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(pm.response.json().message).to.eq(\"Client updated\");\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "key",
														"value": "{{key}}",
														"type": "text"
													},
													{
														"key": "token",
														"value": "{{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"user\": \"lucascruz@ciandt.com\",\n  \"platform\": \"Rewards_USA\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\",\n  \"agent\": \"PostmanRuntime/7.28.3\",\n  \"birthdate\": \"{{birthday}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{urlApiAbi}}/client",
													"host": [
														"{{urlApiAbi}}"
													],
													"path": [
														"client"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Customer Before",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const user = pm.response.json().user;",
															"if(pm.collectionVariables.get(\"date\") === \"day before\") {",
															"    pm.collectionVariables.set(\"currentPoints\", user.available_points);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic NTQwMGRhMjE3ZTk2MmFiYzJkOGRjZDJkNTE4NjA2ZjNkMGIxMzkwZjpjMGRjZTM2NGUzM2FhMjVhMGQ2ZDNlNzAzMzk3N2NiYzllOTIwNTVh",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{SessionM_api_url}}/priv/v1/apps/:api_key/users/:customer_id",
													"host": [
														"{{SessionM_api_url}}"
													],
													"path": [
														"priv",
														"v1",
														"apps",
														":api_key",
														"users",
														":customer_id"
													],
													"variable": [
														{
															"key": "api_key",
															"value": "{{SessionM_api_key}}"
														},
														{
															"key": "customer_id",
															"value": "{{user_id_sessionm}}",
															"description": "Lucas Cruz: sessionM_id"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "birthday-points",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request for Birthday points was successful\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(pm.response.json().status).to.eq(\"success\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{urlApiAbi}}/earn/birthday-points",
													"host": [
														"{{urlApiAbi}}"
													],
													"path": [
														"earn",
														"birthday-points"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Customer After Birthday",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const user = pm.response.json().user;",
															"const date = pm.collectionVariables.get(\"date\")",
															"const pointsBefore = pm.collectionVariables.get(\"currentPoints\");",
															"pm.test(`The user did not receive points having their birthday on the ${date}`, () => {",
															"    pm.expect(user.available_points).to.eq(pointsBefore);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic NTQwMGRhMjE3ZTk2MmFiYzJkOGRjZDJkNTE4NjA2ZjNkMGIxMzkwZjpjMGRjZTM2NGUzM2FhMjVhMGQ2ZDNlNzAzMzk3N2NiYzllOTIwNTVh",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{SessionM_api_url}}/priv/v1/apps/:api_key/users/:customer_id",
													"host": [
														"{{SessionM_api_url}}"
													],
													"path": [
														"priv",
														"v1",
														"apps",
														":api_key",
														"users",
														":customer_id"
													],
													"variable": [
														{
															"key": "api_key",
															"value": "{{SessionM_api_key}}"
														},
														{
															"key": "customer_id",
															"value": "{{user_id_sessionm}}",
															"description": "Lucas Cruz: sessionM_id"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "anniversary-points",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request for Anniversary points was successful\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(pm.response.json().status).to.eq(\"success\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{urlApiAbi}}/earn/anniversary-points",
													"host": [
														"{{urlApiAbi}}"
													],
													"path": [
														"earn",
														"anniversary-points"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Customer After Anniversary",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const user = pm.response.json().user;",
															"const pointsBefore = pm.collectionVariables.get(\"currentPoints\");",
															"const date = pm.collectionVariables.get(\"date\")",
															"",
															"pm.test(`The user did not receive points having their anniversary on the ${date}`, () => {",
															"    pm.expect(user.available_points).to.eq(pointsBefore);",
															"});",
															"",
															"if(pm.collectionVariables.get(\"date\") === \"day before\") {",
															"    pm.collectionVariables.set(\"date\", \"next day\");",
															"    postman.setNextRequest(\"Update Customer Anniversary\");",
															"}else {",
															"    pm.collectionVariables.unset(\"anniversary\");",
															"    pm.collectionVariables.unset(\"birthday\");",
															"    pm.collectionVariables.unset(\"date\");",
															"    pm.collectionVariables.unset(\"currentPoints\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic NTQwMGRhMjE3ZTk2MmFiYzJkOGRjZDJkNTE4NjA2ZjNkMGIxMzkwZjpjMGRjZTM2NGUzM2FhMjVhMGQ2ZDNlNzAzMzk3N2NiYzllOTIwNTVh",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{SessionM_api_url}}/priv/v1/apps/:api_key/users/:customer_id",
													"host": [
														"{{SessionM_api_url}}"
													],
													"path": [
														"priv",
														"v1",
														"apps",
														":api_key",
														"users",
														":customer_id"
													],
													"variable": [
														{
															"key": "api_key",
															"value": "{{SessionM_api_key}}"
														},
														{
															"key": "customer_id",
															"value": "{{user_id_sessionm}}",
															"description": "Lucas Cruz: sessionM_id"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Successful",
									"item": [
										{
											"name": "Update Customer Anniversary",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"/*const profileInfo = pm.response.json().user.user_profile;",
															"",
															"pm.test(\"Client anniversary was updated\", () => {",
															"    pm.response.to.have.status(200);",
															"    pm.expect(profileInfo.anniversary).to.eq(pm.collectionVariables.get(\"anniversaryToday\"));",
															"})",
															"*/"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"pm.collectionVariables.set(\"anniversaryToday\", `2021-${moment().format(\"MM-DD\")}`);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic NTQwMGRhMjE3ZTk2MmFiYzJkOGRjZDJkNTE4NjA2ZjNkMGIxMzkwZjpjMGRjZTM2NGUzM2FhMjVhMGQ2ZDNlNzAzMzk3N2NiYzllOTIwNTVh",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"user\":{\r\n    \"user_profile\":{\r\n        \"anniversary\": \"{{anniversaryToday}}\"\r\n        }\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{SessionM_api_url}}/priv/v1/apps/:api_key/users/:customer_id/",
													"host": [
														"{{SessionM_api_url}}"
													],
													"path": [
														"priv",
														"v1",
														"apps",
														":api_key",
														"users",
														":customer_id",
														""
													],
													"variable": [
														{
															"key": "api_key",
															"value": "{{SessionM_api_key}}"
														},
														{
															"key": "customer_id",
															"value": "{{user_id_sessionm}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Client Birthday",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"pm.collectionVariables.set(\"birthdayToday\", `1990-${moment().format(\"MM-DD\")}`);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Client birthdate was updated\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(pm.response.json().message).to.eq(\"Client updated\");\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "key",
														"value": "{{key}}",
														"type": "text"
													},
													{
														"key": "token",
														"value": "{{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"user\": \"lucascruz@ciandt.com\",\n  \"platform\": \"Rewards_USA\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\",\n  \"agent\": \"PostmanRuntime/7.28.3\",\n  \"birthdate\": \"{{birthdayToday}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{urlApiAbi}}/client",
													"host": [
														"{{urlApiAbi}}"
													],
													"path": [
														"client"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Customer Before",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic NTQwMGRhMjE3ZTk2MmFiYzJkOGRjZDJkNTE4NjA2ZjNkMGIxMzkwZjpjMGRjZTM2NGUzM2FhMjVhMGQ2ZDNlNzAzMzk3N2NiYzllOTIwNTVh",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{SessionM_api_url}}/priv/v1/apps/:api_key/users/:customer_id",
													"host": [
														"{{SessionM_api_url}}"
													],
													"path": [
														"priv",
														"v1",
														"apps",
														":api_key",
														"users",
														":customer_id"
													],
													"variable": [
														{
															"key": "api_key",
															"value": "{{SessionM_api_key}}"
														},
														{
															"key": "customer_id",
															"value": "{{user_id_sessionm}}",
															"description": "Lucas Cruz: sessionM_id"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "birthday-points",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request for Birthday points was successful\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(pm.response.json().status).to.eq(\"success\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{urlApiAbi}}/earn/birthday-points",
													"host": [
														"{{urlApiAbi}}"
													],
													"path": [
														"earn",
														"birthday-points"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Customer After Birthday",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const user = pm.response.json().user;",
															"const pointsBefore = pm.collectionVariables.get(\"currentPoints\");",
															"console.log(pointsBefore)",
															"pm.test(\"The user received points on their birthday\", () => {",
															"    pm.expect(user.available_points).to.eq(pointsBefore + 250);",
															"});",
															"",
															"pm.collectionVariables.set(\"currentPoints\", pointsBefore + 250);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic NTQwMGRhMjE3ZTk2MmFiYzJkOGRjZDJkNTE4NjA2ZjNkMGIxMzkwZjpjMGRjZTM2NGUzM2FhMjVhMGQ2ZDNlNzAzMzk3N2NiYzllOTIwNTVh",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{SessionM_api_url}}/priv/v1/apps/:api_key/users/:customer_id",
													"host": [
														"{{SessionM_api_url}}"
													],
													"path": [
														"priv",
														"v1",
														"apps",
														":api_key",
														"users",
														":customer_id"
													],
													"variable": [
														{
															"key": "api_key",
															"value": "{{SessionM_api_key}}"
														},
														{
															"key": "customer_id",
															"value": "{{user_id_sessionm}}",
															"description": "Lucas Cruz: sessionM_id"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "anniversary-points",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request for Anniversary points was successful\", () => {\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(pm.response.json().status).to.eq(\"success\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{urlApiAbi}}/earn/anniversary-points",
													"host": [
														"{{urlApiAbi}}"
													],
													"path": [
														"earn",
														"anniversary-points"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Customer After Anniversary",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const user = pm.response.json().user;",
															"const pointsBefore = pm.collectionVariables.get(\"currentPoints\");",
															"console.log(pointsBefore)",
															"pm.test(\"The user received points on their anniversary\", () => {",
															"    pm.expect(user.available_points).to.eq(pointsBefore + 250);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic NTQwMGRhMjE3ZTk2MmFiYzJkOGRjZDJkNTE4NjA2ZjNkMGIxMzkwZjpjMGRjZTM2NGUzM2FhMjVhMGQ2ZDNlNzAzMzk3N2NiYzllOTIwNTVh",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{SessionM_api_url}}/priv/v1/apps/:api_key/users/:customer_id",
													"host": [
														"{{SessionM_api_url}}"
													],
													"path": [
														"priv",
														"v1",
														"apps",
														":api_key",
														"users",
														":customer_id"
													],
													"variable": [
														{
															"key": "api_key",
															"value": "{{SessionM_api_key}}"
														},
														{
															"key": "customer_id",
															"value": "{{user_id_sessionm}}",
															"description": "Lucas Cruz: sessionM_id"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Emails",
									"item": [
										{
											"name": "Send Points Email",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if(!pm.collectionVariables.get(\"emailPointsType\")) {\r",
															"    pm.collectionVariables.set(\"emailPointsType\", \"RewardsConsumerBirthday\");\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response = pm.response.json();\r",
															"const emailType = pm.collectionVariables.get(\"emailPointsType\").includes(\"Birthday\") ? \"Birthday\" : \"Anniversary\"\r",
															"pm.test(`The ${emailType} email was sent successfully`, () => {\r",
															"    pm.response.to.have.status(200);\r",
															"    pm.expect(response.message).to.eql(\"The email has been sent correctly\");\r",
															"    pm.expect(response.status).to.eql(200);\r",
															"});\r",
															"\r",
															"if(pm.collectionVariables.get(\"emailPointsType\") == \"RewardsConsumerBirthday\") {\r",
															"    pm.collectionVariables.set(\"emailPointsType\", \"RewardsConsumerAnniversary\");\r",
															"    postman.setNextRequest(\"Send Points Email\");\r",
															"}else {\r",
															"    pm.collectionVariables.unset(\"emailPointsType\");\r",
															"    setTimeout(function(){}, 10000);\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "token",
														"value": "0be0f552db16cf5637e22bca5cabbd85"
													},
													{
														"key": "key",
														"value": "abi-global-launchpad"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"templateName\": \"{{emailPointsType}}\",\n    \"MailTo\": [\n        \"kamikzin2@hotmail.com\"\n    ],\n    \"data\": {\n        \"name\": \"{{$randomFirstName}}\",\n        \"subscriberId\": \"aade239e-f24c-11ec-9127-badf94356db5\",\n        \"userEmail\": \"kamikzin2@hotmail.com\"\n    }\n}"
												},
												"url": {
													"raw": "{{urlApiAbi}}/notifications/email",
													"host": [
														"{{urlApiAbi}}"
													],
													"path": [
														"notifications",
														"email"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Points to Unverified Email",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"It's not possible to send emails to unverified users\", () => {\r",
															"    pm.response.to.have.status(500);\r",
															"    pm.expect(pm.response.json().message).to.eql(`Email address is not verified. The following identities failed the check in region US-EAST-1: ${pm.collectionVariables.get(\"invalidEmail\")}`)\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "token",
														"value": "0be0f552db16cf5637e22bca5cabbd85",
														"type": "text"
													},
													{
														"key": "key",
														"value": "abi-global-launchpad",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"templateName\": \"RewardsConsumerBirthday\",\r\n    \"MailTo\": [\r\n        \"{{invalidEmail}}\"\r\n    ],\r\n    \"data\": {\r\n        \"name\": \"{{$randomFirstName}}\",\r\n        \"subscriberId\": \"aade239e-f24c-11ec-9127-badf94356db5\",\r\n        \"userEmail\": \"kamikzin2@hotmail.com\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{urlApiAbi}}/notifications/email",
													"host": [
														"{{urlApiAbi}}"
													],
													"path": [
														"notifications",
														"email"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET User Emails",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const emails = pm.response.json().value;\r",
															"\r",
															"pm.test(\"The emails were received by the user\", () => {\r",
															"    let subjects = [];\r",
															"    let emailIds = [];\r",
															"    for(let email of emails) {\r",
															"        if(email.subject == \"Happy Anniversary!\" || email.subject == \"Happy Birthday!\") {\r",
															"            subjects.push(email.subject);\r",
															"            emailIds.push(email.id);\r",
															"        }\r",
															"    }\r",
															"    pm.expect(subjects).to.include(\"Happy Anniversary!\");\r",
															"    pm.expect(subjects).to.include(\"Happy Birthday!\");\r",
															"    pm.collectionVariables.set(\"emailIds\", emailIds);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "EwBoA8l6BAAUkj1NuJYtTVha+Mogk+HEiPbQo04AAZV4DGXEtLDOX7zBxLn2rVgeG3D6+3r8bhuxbOEzmOUkJhH26y8MShLKtQNbq2LVVuIlHN6xNaT5FzDtNVpQLNU0A0999VmfumPHYOnO9AAq9fAocc+Mdz8IKfOFb3YD/IrU7QSTZL29QapvpScYU9JLjtljGr7abZLHypnxHNOfCEAU9VzEWCz6Lfa9hUDQ6wOZcBY9jNdvafNHqyNEqzEckqRjKspnHej3IVvLexhv6zm9fpRxDkfjXPhHoyfIDrIN1NIrbWVuXSP1pZq0luuuw4bEKiNAhqKe5tuFXcDDEzDyb+ZyngjJz+3RdXBaz6XcBKZio9/AOO9KdVvQ5nUDZgAACE92wniS8UYHOAKvJG/LpyFqIh0t7di71UdBfoxaZIWByMJn7KUqki7/VXxyqd5QTc+pDU3DGM5fOD1u+4azqxe/P8CnjbioP0kcQGWE6jofLhs5i86vKnxJtivW9f/CPsKSZro0UnQdIYsvG2GOdNdQQagFXIGdX+AXM5lY1zL1u/B6IqSpHTkqztbOagVWchOKVwYz0GkZodhxBl4UVukhr7fxoyEJvzwapFki/YdT9rRGkganUK9zCkZIWbdLiEAcwyFjbnLOt/7T9ZDidgCi2rRqTofHa3ZgX7zT7oCt0pqyIhglKoCS+p3QDylfmVkIuNAArD+kKJptZ614efe3bXY4Sw3EgoJjEr1ylq/LL7afZfj8bI0tmqAnhX66FLebU24HQeyGqctqa8WQnnbEyrCJB6lSK6b5d3bKznlgA3Qbgxy2wyDsaLWsiOGUQ6fz+bpasUYpmotnQw9vGA/XdSHGphhymqq96j3aZ9TUWeu2NND+nwM8nBpz9NZNI8SDRtJMxUvVGn29s2CLTs8c0levshLmag2mKkeaSkE3fBkon3EvUdPQwn0UPqVbFHVbNWNnIi0V8PwBSATwgNO1m5XaIL4x7+BtAjUA0vhh+cSzh460P9CJzm0RttLjch2CGWM3ggTWdiBfnjfc5CumLW/y5ZeIt0uPKTCVax9PIaSzGm3AK/5fgXywgkleN1sJlW0tjgvdex+zB7pXOPhDyl27gFKA757hWhdyArhlTmd9MZXoZundRcSed33SbVRMfAI=",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/me/messages",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"me",
														"messages"
													]
												}
											},
											"response": []
										},
										{
											"name": "DEL Emails",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"if(!pm.collectionVariables.get(\"currentEmailId\")) {\r",
															"    pm.collectionVariables.set(\"currentEmailId\", pm.collectionVariables.get(\"emailIds\")[0])\r",
															"}else {\r",
															"    pm.collectionVariables.set(\"currentEmailId\", pm.collectionVariables.get(\"emailIds\")[1])\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"The email was deleted successfully\", () => {\r",
															"    pm.response.to.have.status(204);\r",
															"})\r",
															"\r",
															"if(pm.collectionVariables.get(\"currentEmailId\") == pm.collectionVariables.get(\"emailIds\")[0]) {\r",
															"    postman.setNextRequest(\"DEL Emails\");\r",
															"}else {\r",
															"    pm.collectionVariables.unset(\"currentEmailId\");\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "EwBoA8l6BAAUkj1NuJYtTVha+Mogk+HEiPbQo04AAZV4DGXEtLDOX7zBxLn2rVgeG3D6+3r8bhuxbOEzmOUkJhH26y8MShLKtQNbq2LVVuIlHN6xNaT5FzDtNVpQLNU0A0999VmfumPHYOnO9AAq9fAocc+Mdz8IKfOFb3YD/IrU7QSTZL29QapvpScYU9JLjtljGr7abZLHypnxHNOfCEAU9VzEWCz6Lfa9hUDQ6wOZcBY9jNdvafNHqyNEqzEckqRjKspnHej3IVvLexhv6zm9fpRxDkfjXPhHoyfIDrIN1NIrbWVuXSP1pZq0luuuw4bEKiNAhqKe5tuFXcDDEzDyb+ZyngjJz+3RdXBaz6XcBKZio9/AOO9KdVvQ5nUDZgAACE92wniS8UYHOAKvJG/LpyFqIh0t7di71UdBfoxaZIWByMJn7KUqki7/VXxyqd5QTc+pDU3DGM5fOD1u+4azqxe/P8CnjbioP0kcQGWE6jofLhs5i86vKnxJtivW9f/CPsKSZro0UnQdIYsvG2GOdNdQQagFXIGdX+AXM5lY1zL1u/B6IqSpHTkqztbOagVWchOKVwYz0GkZodhxBl4UVukhr7fxoyEJvzwapFki/YdT9rRGkganUK9zCkZIWbdLiEAcwyFjbnLOt/7T9ZDidgCi2rRqTofHa3ZgX7zT7oCt0pqyIhglKoCS+p3QDylfmVkIuNAArD+kKJptZ614efe3bXY4Sw3EgoJjEr1ylq/LL7afZfj8bI0tmqAnhX66FLebU24HQeyGqctqa8WQnnbEyrCJB6lSK6b5d3bKznlgA3Qbgxy2wyDsaLWsiOGUQ6fz+bpasUYpmotnQw9vGA/XdSHGphhymqq96j3aZ9TUWeu2NND+nwM8nBpz9NZNI8SDRtJMxUvVGn29s2CLTs8c0levshLmag2mKkeaSkE3fBkon3EvUdPQwn0UPqVbFHVbNWNnIi0V8PwBSATwgNO1m5XaIL4x7+BtAjUA0vhh+cSzh460P9CJzm0RttLjch2CGWM3ggTWdiBfnjfc5CumLW/y5ZeIt0uPKTCVax9PIaSzGm3AK/5fgXywgkleN1sJlW0tjgvdex+zB7pXOPhDyl27gFKA757hWhdyArhlTmd9MZXoZundRcSed33SbVRMfAI=",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/me/messages/:id",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"me",
														"messages",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{currentEmailId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "200_Deposit user points",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200);\r",
											"    pm.expect(jsonData.message).to.eql(\"Added points\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '105'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(105);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apiCode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\",\"apiCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"yohisgil@gmail.com\",\r\n    \"program\": \"MyCooler\",\r\n    \"platform\": \"Rewards_USA\",\r\n    \"origin\": \"web\",\r\n    \"agent\": \"theAgent\",\r\n    \"amount\": 700,\r\n    \"reference_id\": \"the-id-123\",\r\n    \"reference_type\": \"some-reference-456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/points/deposit",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Deposit client not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode attribute is equal to 'Client not found'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200);\r",
											"    pm.expect(jsonData.message).to.eql(\"Client not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '101'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(101);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apiCode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\",\"apiCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"yohisgil@gmail.com\",\r\n    \"program\": \"MyCo\",\r\n    \"platform\": \"Rewards_USA\",\r\n    \"origin\": \"web\",\r\n    \"agent\": \"theAgent\",\r\n    \"amount\": 10000,\r\n    \"reference_id\": \"the-id-123\",\r\n    \"reference_type\": \"some-reference-456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/points/deposit",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Deposit negative points",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to 'null'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"message.statusCode\": { \"type\": \"string\" },\r",
											"        \"message.status\": { \"type\": \"number\" },\r",
											"        \"message.message\": { \"type\": \"string\" },\r",
											"        \"apiCode\": { \"type\": \"null\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"yohisgil@gmail.com\",\r\n    \"program\": \"MyCooler\",\r\n    \"platform\": \"Rewards_USA\",\r\n    \"origin\": \"web\",\r\n    \"agent\": \"theAgent\",\r\n    \"amount\": -1,\r\n    \"reference_id\": \"the-id-123\",\r\n    \"reference_type\": \"some-reference-456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/points/deposit",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Deposit user points requerid params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to 'null'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"message.statusCode\": { \"type\": \"string\" },\r",
											"        \"message.status\": { \"type\": \"number\" },\r",
											"        \"message.message\": { \"type\": \"string\" },\r",
											"        \"apiCode\": { \"type\": \"null\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"yohisgil@gmail.com\",\r\n    \"program\": \"MyCooler\",\r\n    \"platform\": \"Rewards_USA\",\r\n    \"origin\": \"web\",\r\n    \"agent\": \"theAgent\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/points/deposit",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Deposit user points Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "token",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"yohisgil@gmail.com\",\r\n    \"program\": \"MyCooler\",\r\n    \"platform\": \"Rewards_USA\",\r\n    \"origin\": \"web\",\r\n    \"agent\": \"theAgent\",\r\n    \"amount\": 30,\r\n    \"reference_id\": \"the-id-123\",\r\n    \"reference_type\": \"some-reference-456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/points/deposit",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"deposit"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Spend",
					"item": [
						{
							"name": "200_Spend user points",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200);\r",
											"    pm.expect(jsonData.message).to.eql(\"Removed points\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '105'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(105);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"    pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apiCode\": { \"type\": \"number\" }\r",
											"\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"message\", \"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"yohisgil@gmail.com\",\r\n    \"program\": \"MyCooler\",\r\n    \"platform\": \"Rewards_USA\",\r\n    \"origin\": \"web\",\r\n    \"agent\": \"theAgent\",\r\n    \"amount\": 1,\r\n    \"reference_id\": \"the-id-123\",\r\n    \"reference_type\": \"some-reference-456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/points/spend",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"spend"
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Spend client not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode attribute is equal to 'Client not found'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200);\r",
											"    pm.expect(jsonData.message).to.eql(\"Client not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '101'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(101);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apiCode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\",\"apiCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"yohisgil@gmail.com\",\r\n    \"program\": \"MyCo\",\r\n    \"platform\": \"Rewards_USA\",\r\n    \"origin\": \"web\",\r\n    \"agent\": \"theAgent\",\r\n    \"amount\": 10000,\r\n    \"reference_id\": \"the-id-123\",\r\n    \"reference_type\": \"some-reference-456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/points/spend",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"spend"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Spend  negative points",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to 'null'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"message.statusCode\": { \"type\": \"string\" },\r",
											"        \"message.status\": { \"type\": \"number\" },\r",
											"        \"message.message\": { \"type\": \"string\" },\r",
											"        \"apiCode\": { \"type\": \"null\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"yohisgil@gmail.com\",\r\n    \"program\": \"MyCooler\",\r\n    \"platform\": \"Rewards_USA\",\r\n    \"origin\": \"web\",\r\n    \"agent\": \"theAgent\",\r\n    \"amount\": -10,\r\n    \"reference_id\": \"the-id-123\",\r\n    \"reference_type\": \"some-reference-456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/points/spend",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"spend"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_spend more points than the client's total",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to 'null'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"message.statusCode\": { \"type\": \"string\" },\r",
											"        \"message.status\": { \"type\": \"number\" },\r",
											"        \"message.message\": { \"type\": \"string\" },\r",
											"        \"apiCode\": { \"type\": \"null\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"yohisgil@gmail.com\",\r\n    \"program\": \"MyCooler\",\r\n    \"platform\": \"Rewards_USA\",\r\n    \"origin\": \"web\",\r\n    \"agent\": \"theAgent\",\r\n    \"amount\": \"5010000\",\r\n    \"reference_id\": \"the-id-123\",\r\n    \"reference_type\": \"some-reference-456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/points/spend",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"spend"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_spend user points requerid params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to 'null'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"message.statusCode\": { \"type\": \"string\" },\r",
											"        \"message.status\": { \"type\": \"number\" },\r",
											"        \"message.message\": { \"type\": \"string\" },\r",
											"        \"apiCode\": { \"type\": \"null\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"yohisgil@gmail.com\",\r\n    \"program\": \"MyCooler\",\r\n    \"platform\": \"Rewards_USA\",\r\n    \"origin\": \"web\",\r\n    \"agent\": \"theAgent\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/points/spend",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"spend"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_spend user points Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "token",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"yohisgil@gmail.com\",\r\n    \"program\": \"MyCooler\",\r\n    \"platform\": \"Rewards_USA\",\r\n    \"origin\": \"web\",\r\n    \"agent\": \"theAgent\",\r\n    \"amount\": 30,\r\n    \"reference_id\": \"the-id-123\",\r\n    \"reference_type\": \"some-reference-456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/points/spend",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"spend"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tier",
					"item": [
						{
							"name": "200_Tier move user no exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode attribute is equal to 'Client not found'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200);\r",
											"    pm.expect(jsonData.message).to.eql(\"Client not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '101'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(101);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apiCode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\",\"apiCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"y@gmail.com\",\r\n    \"program\": \"MyCooler\",\r\n    \"platform\": \"Rewards_USA\",\r\n    \"origin\": \"app\",\r\n    \"agent\": \"theAgent\",\r\n    \"action\": \"down\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/points/tier",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"tier"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Tier move requerid params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to 'null'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"message.statusCode\": { \"type\": \"string\" },\r",
											"        \"message.status\": { \"type\": \"number\" },\r",
											"        \"message.message\": { \"type\": \"string\" },\r",
											"        \"apiCode\": { \"type\": \"null\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"agent\": \"theAgent\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/points/tier",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"tier"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Tier move action params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to 'null'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"message.statusCode\": { \"type\": \"string\" },\r",
											"        \"message.status\": { \"type\": \"number\" },\r",
											"        \"message.message\": { \"type\": \"string\" },\r",
											"        \"apiCode\": { \"type\": \"null\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"yohisgil@gmail.com\",\r\n    \"program\": \"MyCooler\",\r\n    \"platform\": \"Rewards_USA\",\r\n    \"origin\": \"app\",\r\n    \"agent\": \"theAgent\",\r\n    \"action\": \"hola\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/points/tier",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"tier"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Tier move  origin  params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to 'null'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"message.statusCode\": { \"type\": \"string\" },\r",
											"        \"message.status\": { \"type\": \"number\" },\r",
											"        \"message.message\": { \"type\": \"string\" },\r",
											"        \"apiCode\": { \"type\": \"null\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"yohisgil@gmail.com\",\r\n    \"program\": \"MyCooler\",\r\n    \"platform\": \"Rewards_USA\",\r\n    \"origin\": \"hola\",\r\n    \"agent\": \"theAgent\",\r\n    \"action\": \"up\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/points/tier",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"points",
										"tier"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Email",
					"item": [
						{
							"name": "200_Send Email successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'The email has been sent correctly'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"The email has been sent correctly\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to 'null'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data\": { \"type\": \"object\" }, \r",
											"        \"status\": { \"type\": \"number\" }, \r",
											"        \"apiCode\": { \"type\": \"null\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"message\", \"apiCode\", \"data\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"templateName\": \"RewardsGenericEmail\",\r\n    \"MailTo\": [\r\n        \"yohisgil@gmail.com\"\r\n    ],\r\n    \"data\": {\r\n      \"name\": \"Johanna\",\r\n      \"message\": \"Enviando prueba\"\r\n    }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/notifications/email",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"notifications",
										"email"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Send Email successful fields requerid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'instance requires property \\\"message\\\"'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message[0]).to.eql(\"instance requires property \\\"message\\\"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to '400'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"data attribute is equal to 'null'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to '400'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status attribute is equal to 'bad request'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"bad request\");\r",
											"});\r",
											"\r",
											"pm.test(\"api code attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"array\" },\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"data\": { \"type\": \"null\" },\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"        \"messageCode\": { \"type\": \"number\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\", \"statusCode\", \"data\", \"status\", \"apiCode\", \"messageCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"templateName\": \"RewardsGenericEmail\",\r\n    \"MailTo\": [\r\n        \"pruebastapitapp@gmail.com\"\r\n    ],\r\n    \"data\": {\r\n \r\n    }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/notifications/email",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"notifications",
										"email"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Send Email requerid fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'instance.MailTo[0] does not conform to the \\\"email\\\" format'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message[0]).to.eql(\"instance.MailTo[0] does not conform to the \\\"email\\\" format\");\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode attribute is equal to '400'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"data attribute is equal to 'null'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"status attribute is equal to 'bad request'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"bad request\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"array\" },\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"data\": { \"type\": \"null\" },\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"        \"messageCode\": { \"type\": \"number\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\", \"statusCode\", \"data\", \"status\", \"apiCode\", \"messageCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"templateName\": \"RewardsGenericEmail\",\r\n    \"MailTo\": [\r\n        \"siban.martinglobant.com\"\r\n    ],\r\n    \"data\": {\r\n      \"name\": \"Mariano\",\r\n      \"message\": \"Soy una prueba\"\r\n    }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/notifications/email",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"notifications",
										"email"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Send Email Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "wrongtoken",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"templateName\": \"RewardsGenericEmail\",\r\n    \"MailTo\": [\r\n        \"siban.martinglobant.com\"\r\n    ],\r\n    \"data\": {\r\n      \"name\": \"Mariano\",\r\n      \"message\": \"Soy una prueba\"\r\n    }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/notifications/email",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"notifications",
										"email"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Sms",
					"item": [
						{
							"name": "200_Send Sms Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Sms notification sent successfully'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Sms notification sent successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to 'null'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data\": { \"type\": \"object\" }, \r",
											"        \"status\": { \"type\": \"number\" }, \r",
											"        \"apiCode\": { \"type\": \"null\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"message\", \"apiCode\", \"data\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"templateName\": \"Prueba SMS Joha\",\r\n    \"phoneNumber\": \"573004666255\",\r\n    \"data\": {\r\n        \"message\": \"Welcome to my cooler! Hope you enjoy it\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/notifications/sms",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"notifications",
										"sms"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Send Sms requerid fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'instance requires property \\\"templateName\\\"'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message[0]).to.eql(\"instance requires property \\\"templateName\\\"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to '400'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"data attribute is equal to 'null'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to '400'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status attribute is equal to 'bad request'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"bad request\");\r",
											"});\r",
											"\r",
											"pm.test(\"api code attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"array\" },\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"data\": { \"type\": \"null\" },\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"        \"messageCode\": { \"type\": \"number\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\", \"statusCode\", \"data\", \"status\", \"apiCode\", \"messageCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"template__wrong_name\": \"RewardsGenericSms\",\r\n    \"phone_number\": \"5492995330097\",\r\n    \"data\": {\r\n        \"message\": \"Welcome to my cooler! Hope you enjoy it\"\r\n    }\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/notifications/sms",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"notifications",
										"sms"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Send Sms Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "wrongtoken",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"template_name\": \"RewardsGenericSms\",\r\n    \"phone_number\": \"5492995330097\",\r\n    \"data\": {\r\n        \"message\": \"Welcome to my cooler! Hope you enjoy it\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/notifications/sms",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"notifications",
										"sms"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Push notifications",
					"item": [
						{
							"name": "List audiences",
							"item": [
								{
									"name": "200_Search audiences exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//BEESRPG-T2301",
													"",
													"pm.test(\"Status is 200 and code name 'OK'\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Response - status is: Success\", function () {",
													"    pm.expect(pm.response.json().status).to.eql(\"success\")",
													"});",
													"",
													"pm.test(\"Response - message is: Audiences retrieved successfully\", function () {",
													"    pm.expect(pm.response.json().message).to.eql(\"Audiences retrieved successfully\")",
													"});",
													"",
													"pm.test(\"Response - apicode is: 100\", function () {",
													"    pm.expect(pm.response.json().apiCode).to.eql(100)",
													"});",
													"",
													"pm.test(\"Response - data is not empty\", function () {",
													"    pm.expect(pm.response.json().data).is.not.empty",
													"});",
													"",
													"pm.test(\"Response must have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"const schema = {",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"statusCode\": { \"type\": \"number\" },",
													"        \"status\": { \"type\": \"string\" },",
													"        \"message\": { \"type\": \"string\" },",
													"        \"apiCode\": { \"type\": \"number\" },",
													"        \"data\": { \"type\": \"array\" },",
													"    },",
													"    \"required\": [\"statusCode\", \"status\", \"message\", \"apiCode\", \"data\"]",
													"};",
													"pm.test('Schema is valid', function () {",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/notifications/audiences?platform={{platform}}&program={{program}}&audience_name=Testing Audience",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"notifications",
												"audiences"
											],
											"query": [
												{
													"key": "platform",
													"value": "{{platform}}"
												},
												{
													"key": "program",
													"value": "{{program}}"
												},
												{
													"key": "audience_name",
													"value": "Testing Audience"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200_Search audiences exist - validate id and name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//BEESRPG-T2302",
													"",
													"pm.test(\"Status is 200 and code name 'OK'\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Response - status is: Success\", function () {",
													"    pm.expect(pm.response.json().status).to.eql(\"success\")",
													"});",
													"",
													"pm.test(\"Response - message is: Audiences retrieved successfully\", function () {",
													"    pm.expect(pm.response.json().message).to.eql(\"Audiences retrieved successfully\")",
													"});",
													"",
													"pm.test(\"Response - apicode is: 100\", function () {",
													"    pm.expect(pm.response.json().apiCode).to.eql(100)",
													"});",
													"",
													"pm.test(\"Response - data is not empty\", function () {",
													"    pm.expect(pm.response.json().data).is.not.empty",
													"});",
													"",
													"pm.test(\"Validate id\", function () {",
													"    pm.expect(pm.response.json().data[0].id).is.eql(\"63161996701feb8c6ad9c26c\")",
													"});",
													"",
													"pm.test(\"Validate name\", function () {",
													"    pm.expect(pm.response.json().data[0].name).is.eql(\"Testing audience 2\")",
													"});",
													"",
													"pm.test(\"Response must have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"const schema = {",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"statusCode\": { \"type\": \"number\" },",
													"        \"status\": { \"type\": \"string\" },",
													"        \"message\": { \"type\": \"string\" },",
													"        \"apiCode\": { \"type\": \"number\" },",
													"        \"data\": { \"type\": \"array\" },",
													"    },",
													"    \"required\": [\"statusCode\", \"status\", \"message\", \"apiCode\", \"data\"]",
													"};",
													"pm.test('Schema is valid', function () {",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/notifications/audiences?platform={{platform}}&program={{program}}&audience_name=Testing Audience 2",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"notifications",
												"audiences"
											],
											"query": [
												{
													"key": "platform",
													"value": "{{platform}}"
												},
												{
													"key": "program",
													"value": "{{program}}"
												},
												{
													"key": "audience_name",
													"value": "Testing Audience 2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200_Search audiences exist - audiences not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//BEESRPG-T2303",
													"",
													"pm.test(\"Status is 200 and code name 'OK'\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Response - status is: Success\", function () {",
													"    pm.expect(pm.response.json().status).to.eql(\"success\")",
													"});",
													"",
													"pm.test(\"Response - message is: There aren't audiences\", function () {",
													"    pm.expect(pm.response.json().message).to.eql(\"There aren't audiences\")",
													"});",
													"",
													"pm.test(\"Response - apicode is: 101\", function () {",
													"    pm.expect(pm.response.json().apiCode).to.eql(101)",
													"});",
													"",
													"pm.test(\"Response must have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"const schema = {",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"statusCode\": { \"type\": \"number\" },",
													"        \"status\": { \"type\": \"string\" },",
													"        \"message\": { \"type\": \"string\" },",
													"        \"apiCode\": { \"type\": \"number\" },",
													"    },",
													"    \"required\": [\"statusCode\", \"status\", \"message\", \"apiCode\"]",
													"};",
													"pm.test('Schema is valid', function () {",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/notifications/audiences?platform={{platform}}&program={{program}}&audience_name=not exist",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"notifications",
												"audiences"
											],
											"query": [
												{
													"key": "platform",
													"value": "{{platform}}"
												},
												{
													"key": "program",
													"value": "{{program}}"
												},
												{
													"key": "audience_name",
													"value": "not exist"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400_Instance requires property",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//BEESRPG-T2304",
													"",
													"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});",
													"",
													"pm.test(\"Response - statusCode is: 400\", function () {",
													"    pm.expect(pm.response.json().statusCode).to.eql(400)",
													"});",
													"",
													"pm.test(\"Response - apicode is: 40\", function () {",
													"    pm.expect(pm.response.json().apiCode).to.eql(40)",
													"});",
													"",
													"pm.test(\"Response - status is: bad request\", function () {",
													"    pm.expect(pm.response.json().status).to.eql(\"bad request\")",
													"});",
													"",
													"pm.test(\"Response - message is: instance requires property\", function () {",
													"    pm.expect(pm.response.json().message[0]).to.eql(\"instance requires property \\\"program\\\"\")",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response must have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"const schema = {",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"statusCode\": { \"type\": \"number\" },",
													"        \"status\": { \"type\": \"string\" },",
													"        \"message\": { \"type\": \"array\" },",
													"        \"apiCode\": { \"type\": \"number\" },",
													"    },",
													"    \"required\": [\"statusCode\", \"status\", \"message\", \"apiCode\"]",
													"};",
													"pm.test('Schema is valid', function () {",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/notifications/audiences?platform={{platform}}&audience_name=not exist",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"notifications",
												"audiences"
											],
											"query": [
												{
													"key": "platform",
													"value": "{{platform}}"
												},
												{
													"key": "program",
													"value": "{{program}}",
													"disabled": true
												},
												{
													"key": "audience_name",
													"value": "not exist"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401_Unauthorized",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//BEESRPG-T2305",
													"",
													"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {",
													"    pm.response.to.have.status(401);",
													"    pm.response.to.have.status(\"Unauthorized\");",
													"});",
													"",
													"pm.test(\"Message in response is 'Unauthorized'\", function () {",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")",
													"});",
													"",
													"pm.test(\"Response must have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response has all properties\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"message\");",
													"});",
													"",
													"const schema = { ",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"message\": { \"type\": \"string\" },",
													"",
													"    },",
													"    \"required\": [\"message\"]",
													"};",
													"pm.test('Schema is valid', function() {",
													"  pm.response.to.have.jsonSchema(schema);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{token}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/notifications/audiences?platform={{platform}}&program={{program}}&audience_name=not exist",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"notifications",
												"audiences"
											],
											"query": [
												{
													"key": "platform",
													"value": "{{platform}}"
												},
												{
													"key": "program",
													"value": "{{program}}"
												},
												{
													"key": "audience_name",
													"value": "not exist"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "My Cooler",
							"item": [
								{
									"name": "Login Push",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"accessToken\", jsonData.idToken);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"emailPush\", \"test-badge-100@test.com\")",
													"pm.globals.set(\"passwordPush\", \"Abcd1234\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-sso-region",
												"value": "NorthAmerica",
												"type": "text"
											},
											{
												"key": "x-sso-lang",
												"value": "en",
												"type": "text"
											},
											{
												"key": "x-sso-comname",
												"value": "MyCooler",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "APIKEY a4803841-1993-4806-94a0-08885d2fd3e4",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{emailPush}}\",\r\n  \"password\": \"{{passwordPush}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://uzp4m061bh.execute-api.us-east-1.amazonaws.com/preprod/user/login",
											"protocol": "https",
											"host": [
												"uzp4m061bh",
												"execute-api",
												"us-east-1",
												"amazonaws",
												"com"
											],
											"path": [
												"preprod",
												"user",
												"login"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Login Push",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"accessToken\", jsonData.idToken);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"emailPush\", \"test-automatio.01@mycooler.com\")",
													"pm.globals.set(\"passwordPush\", \"Abcd1234\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-sso-region",
												"value": "NorthAmerica",
												"type": "text"
											},
											{
												"key": "x-sso-lang",
												"value": "en",
												"type": "text"
											},
											{
												"key": "x-sso-comname",
												"value": "MyCooler",
												"type": "text"
											},
											{
												"key": "authorization",
												"value": "APIKEY a4803841-1993-4806-94a0-08885d2fd3e4",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{emailPush}}\",\r\n  \"password\": \"{{passwordPush}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://uzp4m061bh.execute-api.us-east-1.amazonaws.com/preprod/user/login",
											"protocol": "https",
											"host": [
												"uzp4m061bh",
												"execute-api",
												"us-east-1",
												"amazonaws",
												"com"
											],
											"path": [
												"preprod",
												"user",
												"login"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200_Client Push Notifications non-existing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//BEESRPG-T2348",
													"",
													"pm.test(\"Status code is 200 OK\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.have.status(\"OK\")",
													"});",
													"",
													"pm.test(\"Response, apiCode is 101\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.apiCode).is.equal(101)",
													"});",
													"",
													"",
													"pm.test(\"Response, status is success\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).is.equal(\"success\")",
													"});",
													"",
													"pm.test(\"Response, message is equal to 'There aren't push notifications'\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).is.equal(\"There aren't push notifications\")",
													"});",
													"",
													"pm.test(\"Response must have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response has all properties\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"message\");",
													"});",
													"",
													"const schema = { ",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"message\": { \"type\": \"string\" }, ",
													"",
													"    },",
													"    \"required\": [\"message\"]",
													"};",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.response.to.have.jsonSchema(schema);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//You should execute login SSO API before",
													"",
													"pm.variables.set(\"registrationToken\", \"testM-7TeWExGyUN7p2MW:APA91bHTZh9a3gAQnO9cKCv6iEMj0xlhZ6kdVS20YkbKh3T3iIKGxaaln1acajIuMAdJRvKNpKQaMKD-ABotiexdfwgKpa1h6uty3oRGVM9kpQQaKEUsgYN_tHfWusJfw9uiYUqR-w38\" + _.random(1, 1000))",
													"",
													"var url = pm.environment.get(\"urlApiAbi\")",
													"var token = pm.environment.get(\"token\")",
													"var key = pm.environment.get(\"key\")",
													"var platform = pm.environment.get(\"createPlatform\")",
													"var program = pm.environment.get(\"program\")",
													"var email = pm.globals.get(\"emailPush\")",
													"var password = pm.globals.get(\"passwordPush\")",
													"var loginToken = pm.variables.get(\"registrationToken\")",
													"",
													"var registrationToken = {",
													"    url: url + '/auth/login',",
													"    headers: {",
													"        'token': token,",
													"        'key': key,",
													"        'Content-Type': 'application/json',",
													"",
													"    },",
													"    method: 'POST',",
													"    body: JSON.stringify({",
													"        \"user\": email,",
													"        \"password\": password,",
													"        \"time_zone\": \"America/Mexico_City\",",
													"        \"platform\": platform,",
													"        \"program\": program,",
													"        \"origin\": \"web\",",
													"        \"agent\": \"PostmanRuntime/8.28.8\",",
													"        \"registration_token\": loginToken",
													"    })",
													"};",
													"",
													"    pm.sendRequest(registrationToken, (error, response) => {",
													"        if (error) { console.log(error) }",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/notifications/push/client?platform=Rewards_USA&program=MyCooler",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"notifications",
												"push",
												"client"
											],
											"query": [
												{
													"key": "platform",
													"value": "Rewards_USA"
												},
												{
													"key": "program",
													"value": "MyCooler"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200_Client Push Notifications Existing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//BEESRPG-T1785",
													"",
													"pm.test(\"Status code is 200 OK\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.have.status(\"OK\")",
													"});",
													"",
													"pm.test(\"Response, apiCode is 100\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.apiCode).is.equal(100)",
													"});",
													"",
													"",
													"pm.test(\"Response, status is success\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).is.equal(\"success\")",
													"});",
													"",
													"pm.test(\"Response, message is equal to 'Client push notifications successfully retrieved'\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).is.equal(\"Client push notifications successfully retrieved\")",
													"});",
													"",
													"pm.test(\"Response, notification id is equal to '6335a6152acc060009c1a323'\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data[0].id).is.equal(\"6335a6152acc060009c1a323\")",
													"});",
													"",
													"pm.test(\"Response, notification message is equal to 'Test Automation message'\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data[0].message).is.equal(\"Test Automation message\")",
													"});",
													"",
													"pm.test(\"Response must have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response has all properties\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"data\");",
													"});",
													"",
													"const schema = { ",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"data\": { \"type\": \"array\" }, ",
													"",
													"    },",
													"    \"required\": [\"data\"]",
													"};",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.response.to.have.jsonSchema(schema);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//You should execute login SSO API before",
													"",
													"pm.variables.set(\"registrationToken\", \"testM-7TeWExGyUN7p2MW:APA91bHTZh9a3gAQnO9cKCv6iEMj0xlhZ6kdVS20YkbKh3T3iIKGxaaln1acajIuMAdJRvKNpKQaMKD-ABotiexdfwgKpa1h6uty3oRGVM9kpQQaKEUsgYN_tHfWusJfw9uiYUqR-w38\" + _.random(1, 1000))",
													"",
													"var url = pm.environment.get(\"urlApiAbi\")",
													"var token = pm.environment.get(\"token\")",
													"var key = pm.environment.get(\"key\")",
													"var platform = pm.environment.get(\"createPlatform\")",
													"var program = pm.environment.get(\"program\")",
													"var email = pm.globals.get(\"emailPush\")",
													"var password = pm.globals.get(\"passwordPush\")",
													"var loginToken = pm.variables.get(\"registrationToken\")",
													"",
													"var registrationToken = {",
													"    url: url + '/auth/login',",
													"    headers: {",
													"        'token': token,",
													"        'key': key,",
													"        'Content-Type': 'application/json',",
													"",
													"    },",
													"    method: 'POST',",
													"    body: JSON.stringify({",
													"        \"user\": email,",
													"        \"password\": password,",
													"        \"time_zone\": \"America/Mexico_City\",",
													"        \"platform\": platform,",
													"        \"program\": program,",
													"        \"origin\": \"web\",",
													"        \"agent\": \"PostmanRuntime/8.28.8\",",
													"        \"registration_token\": loginToken",
													"    })",
													"};",
													"",
													"    pm.sendRequest(registrationToken, (error, response) => {",
													"        if (error) { console.log(error) }",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/notifications/push/client?platform=Rewards_USA&program=MyCooler",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"notifications",
												"push",
												"client"
											],
											"query": [
												{
													"key": "platform",
													"value": "Rewards_USA"
												},
												{
													"key": "program",
													"value": "MyCooler"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400_Client Push Notifications_Bad request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//BEESRPG-T2349",
													"",
													"pm.test(\"Status code is 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.status(\"Bad Request\")",
													"});",
													"",
													"pm.test(\"Response, apiCode is 40\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.apiCode).is.equal(40)",
													"});",
													"",
													"pm.test(\"Response, status is bad request\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).is.equal(\"bad request\")",
													"});",
													"",
													"pm.test(\"Response, message is equal to 'instance requires property'\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message[0]).contain(\"instance requires property\")",
													"});",
													"",
													"pm.test(\"Response must have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response has all properties\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"message\");",
													"});",
													"",
													"const schema = { ",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"message\": { \"type\": \"array\" }, ",
													"",
													"    },",
													"    \"required\": [\"message\"]",
													"};",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.response.to.have.jsonSchema(schema);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/notifications/push/client",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"notifications",
												"push",
												"client"
											]
										}
									},
									"response": []
								},
								{
									"name": "401_Client Push Notifications Not authorized",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//BEESRPG-T2350",
													"",
													"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {",
													"    pm.response.to.have.status(401);",
													"    pm.response.to.have.status(\"Unauthorized\");",
													"});",
													"",
													"pm.test(\"Message in response is 'Unauthorized'\", function () {",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")",
													"});",
													"",
													"pm.test(\"Response must have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response has all properties\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"message\");",
													"});",
													"",
													"const schema = { ",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"message\": { \"type\": \"string\" },",
													"",
													"    },",
													"    \"required\": [\"message\"]",
													"};",
													"pm.test('Schema is valid', function() {",
													"  pm.response.to.have.jsonSchema(schema);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "token",
												"value": "{{accessToken}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/notifications/push/client?platform=Rewards_USA&program=MyCooler",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"notifications",
												"push",
												"client"
											],
											"query": [
												{
													"key": "platform",
													"value": "Rewards_USA"
												},
												{
													"key": "program",
													"value": "MyCooler"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404_Push Notifications Client Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//BEESRPG-T2351",
													"",
													"pm.test(\"Status code is 400 Bad Request\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.status(\"Not Found\")",
													"});",
													"",
													"pm.test(\"Response, apiCode is 41\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.apiCode).is.equal(41)",
													"});",
													"",
													"pm.test(\"Response, status is not found\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).is.equal(\"not found\")",
													"});",
													"",
													"pm.test(\"Response, message is equal to 'User not found'\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).is.equal(\"User not found\")",
													"});",
													"",
													"pm.test(\"Response must have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response has all properties\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"message\");",
													"});",
													"",
													"const schema = { ",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"message\": { \"type\": \"string\" }, ",
													"",
													"    },",
													"    \"required\": [\"message\"]",
													"};",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.response.to.have.jsonSchema(schema);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/notifications/push/client?platform=Rewards_USA&program=MyCooler",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"notifications",
												"push",
												"client"
											],
											"query": [
												{
													"key": "platform",
													"value": "Rewards_USA"
												},
												{
													"key": "program",
													"value": "MyCooler"
												},
												{
													"key": "user",
													"value": "isaac_quintero000@gmail.com",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200_Mark as read Client Push Notification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//BEESRPG-T2352",
													"",
													"pm.test(\"Status code is 200 OK\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.have.status(\"OK\")",
													"});",
													"",
													"pm.test(\"Response, apiCode is 101\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.apiCode).is.equal(101)",
													"});",
													"",
													"",
													"pm.test(\"Response, status is success\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).is.equal(\"success\")",
													"});",
													"",
													"pm.test(\"Response, message is equal to 'Client push notifications marked as read successfully'\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).is.equal(\"Client push notifications marked as read successfully\")",
													"});",
													"",
													"pm.test(\"Response must have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response has all properties\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"message\");",
													"});",
													"",
													"const schema = { ",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"message\": { \"type\": \"string\" }, ",
													"",
													"    },",
													"    \"required\": [\"message\"]",
													"};",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.response.to.have.jsonSchema(schema);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/notifications/push/client/read/6335a6152acc060009c1a323?platform=Rewards_USA&program=MyCooler",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"notifications",
												"push",
												"client",
												"read",
												"6335a6152acc060009c1a323"
											],
											"query": [
												{
													"key": "platform",
													"value": "Rewards_USA"
												},
												{
													"key": "program",
													"value": "MyCooler"
												},
												{
													"key": "user",
													"value": "isaac_quintero@gmail.com",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404_Mark as read Client Push Notification_NoFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//BEESRPG-T2353",
													"",
													"pm.test(\"Status code is 404 OK\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.status(\"Not Found\")",
													"});",
													"",
													"pm.test(\"Response, apiCode is 41\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.apiCode).is.equal(41)",
													"});",
													"",
													"",
													"pm.test(\"Response, status is 'not found'\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).is.equal(\"not found\")",
													"});",
													"",
													"pm.test(\"Response, message is equal to 'Client push notification not found'\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).is.equal(\"Client push notification not found\")",
													"});",
													"",
													"pm.test(\"Response must have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response has all properties\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"message\");",
													"});",
													"",
													"const schema = { ",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"message\": { \"type\": \"string\" }, ",
													"",
													"    },",
													"    \"required\": [\"message\"]",
													"};",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.response.to.have.jsonSchema(schema);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/notifications/push/client/read/6335a6152acc060009c1a327?platform=Rewards_USA&program=MyCooler",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"notifications",
												"push",
												"client",
												"read",
												"6335a6152acc060009c1a327"
											],
											"query": [
												{
													"key": "platform",
													"value": "Rewards_USA"
												},
												{
													"key": "program",
													"value": "MyCooler"
												},
												{
													"key": "user",
													"value": "isaac_quintero@gmail.com",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400_Mark as read Client Push Notification_Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//BEESRPG-T2354",
													"",
													"pm.test(\"Status code is 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.status(\"Bad Request\")",
													"});",
													"",
													"pm.test(\"Response, apiCode is 40\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.apiCode).is.equal(40)",
													"});",
													"",
													"",
													"pm.test(\"Response, status is 'bad request'\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).is.equal(\"bad request\")",
													"});",
													"",
													"pm.test(\"Response, message is equal to 'instance.id does not meet maximum length of 24'\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message[0]).contain(\"instance.id does not meet maximum length of 24\")",
													"});",
													"",
													"pm.test(\"Response must have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response has all properties\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"message\");",
													"});",
													"",
													"const schema = { ",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"message\": { \"type\": \"array\" }, ",
													"",
													"    },",
													"    \"required\": [\"message\"]",
													"};",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.response.to.have.jsonSchema(schema);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/notifications/push/client/read/6335a6152acc060009c1a3225465412135464987976457?platform=Rewards_USA&program=MyCooler",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"notifications",
												"push",
												"client",
												"read",
												"6335a6152acc060009c1a3225465412135464987976457"
											],
											"query": [
												{
													"key": "platform",
													"value": "Rewards_USA"
												},
												{
													"key": "program",
													"value": "MyCooler"
												},
												{
													"key": "user",
													"value": "isaac_quintero@gmail.com",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "403_Mark as read Client Push Notification_MissingAuthenticationToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//BEESRPG-T2355",
													"",
													"pm.test(\"Status is 404 and code name 'Forbidden'\", function () {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.status(\"Forbidden\");",
													"});",
													"",
													"pm.test(\"Message in response is 'Missing Authentication Token'\", function () {",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Missing Authentication Token\")",
													"});",
													"",
													"pm.test(\"Response must have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response has all properties\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"message\");",
													"});",
													"",
													"const schema = { ",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"message\": { \"type\": \"string\" },",
													"",
													"    },",
													"    \"required\": [\"message\"]",
													"};",
													"pm.test('Schema is valid', function() {",
													"  pm.response.to.have.jsonSchema(schema);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "token",
												"value": "{{accessToken}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/notifications/push/client/read/?platform=Rewards_USA&program=MyCooler",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"notifications",
												"push",
												"client",
												"read",
												""
											],
											"query": [
												{
													"key": "platform",
													"value": "Rewards_USA"
												},
												{
													"key": "program",
													"value": "MyCooler"
												},
												{
													"key": "user",
													"value": "isaac_quintero@gmail.com",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401_Unauthorized",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//BEESRPG-T2356",
													"",
													"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {",
													"    pm.response.to.have.status(401);",
													"    pm.response.to.have.status(\"Unauthorized\");",
													"});",
													"",
													"pm.test(\"Message in response is 'Unauthorized'\", function () {",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")",
													"});",
													"",
													"pm.test(\"Response must have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response has all properties\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"message\");",
													"});",
													"",
													"const schema = { ",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"message\": { \"type\": \"string\" },",
													"",
													"    },",
													"    \"required\": [\"message\"]",
													"};",
													"pm.test('Schema is valid', function() {",
													"  pm.response.to.have.jsonSchema(schema);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "token",
												"value": "{{accessToken}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/notifications/push/client/read/6335a6152acc060009c1a323?platform=Rewards_USA&program=MyCooler",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"notifications",
												"push",
												"client",
												"read",
												"6335a6152acc060009c1a323"
											],
											"query": [
												{
													"key": "platform",
													"value": "Rewards_USA"
												},
												{
													"key": "program",
													"value": "MyCooler"
												},
												{
													"key": "user",
													"value": "isaac_quintero@gmail.com",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404_Delete Client Push Notification_ClientNotNotificationFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//BEESRPG-T2358",
													"",
													"pm.test(\"Status code is 404 OK\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.status(\"Not Found\")",
													"});",
													"",
													"pm.test(\"Response, apiCode is 41\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.apiCode).is.equal(41)",
													"});",
													"",
													"",
													"pm.test(\"Response, status is 'not found'\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).is.equal(\"not found\")",
													"});",
													"",
													"pm.test(\"Response, message is equal to 'User not found'\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).is.equal(\"User not found\")",
													"});",
													"",
													"pm.test(\"Response must have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response has all properties\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"message\");",
													"});",
													"",
													"const schema = { ",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"message\": { \"type\": \"string\" }, ",
													"",
													"    },",
													"    \"required\": [\"message\"]",
													"};",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.response.to.have.jsonSchema(schema);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/notifications/push/client/6318a5f30140e200096dfc3b",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"notifications",
												"push",
												"client",
												"6318a5f30140e200096dfc3b"
											],
											"query": [
												{
													"key": "platform",
													"value": "Rewards_USA",
													"disabled": true
												},
												{
													"key": "program",
													"value": "MyCooler",
													"disabled": true
												},
												{
													"key": "user",
													"value": "isaac_quintero@gmail.com",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400_Delete Client Push Notification_Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//BEESRPG-T2359",
													"",
													"pm.test(\"Status code is 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.status(\"Bad Request\")",
													"});",
													"",
													"pm.test(\"Response, apiCode is 40\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.apiCode).is.equal(40)",
													"});",
													"",
													"",
													"pm.test(\"Response, status is 'bad request'\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).is.equal(\"bad request\")",
													"});",
													"",
													"pm.test(\"Response, message is equal to 'instance.id does not meet minimum length of 24'\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message[0]).contain(\"instance.id does not meet minimum length of 24\")",
													"});",
													"",
													"pm.test(\"Response must have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response has all properties\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"message\");",
													"});",
													"",
													"const schema = { ",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"message\": { \"type\": \"array\" }, ",
													"",
													"    },",
													"    \"required\": [\"message\"]",
													"};",
													"",
													"pm.test('Schema is valid', function() {",
													"  pm.response.to.have.jsonSchema(schema);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/notifications/push/client/6318a5f30140e200096dfc",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"notifications",
												"push",
												"client",
												"6318a5f30140e200096dfc"
											],
											"query": [
												{
													"key": "platform",
													"value": "Rewards_USA",
													"disabled": true
												},
												{
													"key": "program",
													"value": "MyCooler",
													"disabled": true
												},
												{
													"key": "user",
													"value": "isaac_quintero@gmail.com",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401_Delete Client Push Notification_NotAuthorized",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//BEESRPG-T2360",
													"",
													"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {",
													"    pm.response.to.have.status(401);",
													"    pm.response.to.have.status(\"Unauthorized\");",
													"});",
													"",
													"pm.test(\"Message in response is 'Unauthorized'\", function () {",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")",
													"});",
													"",
													"pm.test(\"Response must have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response has all properties\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"message\");",
													"});",
													"",
													"const schema = { ",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"message\": { \"type\": \"string\" },",
													"",
													"    },",
													"    \"required\": [\"message\"]",
													"};",
													"pm.test('Schema is valid', function() {",
													"  pm.response.to.have.jsonSchema(schema);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "key",
												"value": "{{key}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/notifications/push/client/6318a5f30140e200096dfcdd",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"notifications",
												"push",
												"client",
												"6318a5f30140e200096dfcdd"
											],
											"query": [
												{
													"key": "platform",
													"value": "Rewards_USA",
													"disabled": true
												},
												{
													"key": "program",
													"value": "MyCooler",
													"disabled": true
												},
												{
													"key": "user",
													"value": "isaac_quintero@gmail.com",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Redemption",
			"item": [
				{
					"name": "Offers Category",
					"item": [
						{
							"name": "200_Get Offer Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Categories found\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '100'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(100);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apiCode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apiCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/category?platform=Rewards_USA&program=MyCooler&type=experience",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"category"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "type",
											"value": "experience"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Get Offer Categories without data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Query without data\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '101'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(101);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apiCode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apiCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/category?platform=Reward&program=MyCooler&type=merch",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"category"
									],
									"query": [
										{
											"key": "platform",
											"value": "Reward"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "type",
											"value": "merch"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Get Offer Categories required params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Invalid schema' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apicode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/category",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"category"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA",
											"disabled": true
										},
										{
											"key": "program",
											"value": "MyCooler",
											"disabled": true
										},
										{
											"key": "type",
											"value": "merch",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Get Offer Categories Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "key",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/category?platform=Rewards_USA&program=MyCooler&type=merch",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"category"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "type",
											"value": "merch"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Offers Filter",
					"item": [
						{
							"name": "200_Get Offer Filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Offers filter found\");\r",
											"});\r",
											"\r",
											"pm.test(\"The attributes should be correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.platform).to.eql(\"Rewards_USA\");\r",
											"    pm.expect(jsonData.data.program).to.eql(\"MyCooler\");\r",
											"    pm.expect(jsonData.data.type).to.eql(\"merchandising\");\r",
											"    pm.expect(jsonData.data.category).to.eql(\"Clothes\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '100'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(100);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"data.data\": { \"type\": \"array\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apicode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/filter?platform=Rewards_USA&program=MyCooler&filter_type=merchandising&filter_category=Clothes",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"filter"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler",
											"description": "filter"
										},
										{
											"key": "filter_type",
											"value": "merchandising"
										},
										{
											"key": "filter_category",
											"value": "Clothes"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Get Offer Filter not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Offers filter not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '101'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(101);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"data.data\": { \"type\": \"array\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apicode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/filter?platform=Rewards_USA&program=MyCooler&filter_type=merchandising&filter_category=x",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"filter"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "filter_type",
											"value": "merchandising"
										},
										{
											"key": "filter_category",
											"value": "x"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Get Offer Filter Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/filter?platform=Rewards_USA&program=MyCooler&filter_type=merchandising",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"filter"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "filter_type",
											"value": "merchandising"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Get Offer Filter Unauthorized Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/filter?platform=Rewards_USA&program=MyCooler&filter_type=merchandising",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"filter"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "filter_type",
											"value": "merchandising"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Offers Item",
					"item": [
						{
							"name": "200_Get Offer Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"     var jsonData = pm.response.json();\r",
											"     pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"     pm.expect(jsonData.message).to.eql(\"Offers items found\");\r",
											" });\r",
											"\r",
											"pm.test(\"The attributes should be correct\", function () {\r",
											"     var jsonData = pm.response.json();\r",
											"     pm.expect(jsonData.data[0].platform).to.eql(\"Rewards_USA\");\r",
											"     pm.expect(jsonData.data[0].program).to.eql(\"MyCooler\");\r",
											"     pm.expect(jsonData.data[0].filter_type).to.eql(\"merchandising\");\r",
											"     //pm.expect(jsonData.data[0].filter_category).to.eql(\"Clothes\");\r",
											" });\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '100'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(100);\r",
											" });\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"data.data\": { \"type\": \"array\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apicode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/items?platform=Rewards_USA&program=MyCooler&filter_type=merchandising&store_id={{store_id}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"items"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "filter_type",
											"value": "merchandising"
										},
										{
											"key": "store_id",
											"value": "{{store_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Get Offer Item not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Offers items not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '101'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(101);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"data.data\": { \"type\": \"array\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apicode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/items?platform=Rewards_USA&program=MyCooler&filter_type=x&store_id={{store_id}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"items"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "filter_type",
											"value": "x"
										},
										{
											"key": "store_id",
											"value": "{{store_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Get Offer Item Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/items?platform=Rewards_USA&filter_type=merchandising&store_id={{store_id}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"items"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "filter_type",
											"value": "merchandising"
										},
										{
											"key": "store_id",
											"value": "{{store_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Get Offer Item Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/items?platform=Rewards_USA&program=MyCooler&filter_type=merchandising&store_id={{store_id}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"items"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "filter_type",
											"value": "merchandising"
										},
										{
											"key": "store_id",
											"value": "{{store_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Order History",
					"item": [
						{
							"name": "200_Order History  without  user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Query with data\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '100'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(100);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apicode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/history?platform=Rewards_USA&program=MyCooler",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"history"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "user",
											"value": "yohisgil@gmail.com",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Order History  with user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Query with data\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '100'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(100);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apicode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/history?platform=Rewards_USA&program=MyCooler&user=yohisgil@gmail.com",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"history"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "user",
											"value": "yohisgil@gmail.com"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Orders History by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Query without data\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '101'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(101);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apicode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/61720b6c79bef600080fdb92",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"61720b6c79bef600080fdb92"
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Orders History by id  no information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Query without data\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '101'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(101);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apicode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/6172e0693e7d9998ac4a7624",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"6172e0693e7d9998ac4a7624"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Order History requerid params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Invalid schema' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apicode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/history?program=MyCooler&user=yohisgil@gmail.com",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"history"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA",
											"disabled": true
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "user",
											"value": "yohisgil@gmail.com"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Orders History by id requerid params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Invalid schema' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apicode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/617204bd9e4df300095c82",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"617204bd9e4df300095c82"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Order History Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/history?platform=Rewards_USA&program=MyCooler&user=yohisgil@gmail.com",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"history"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "user",
											"value": "yohisgil@gmail.com"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Orders History by id  Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/6172e0693e7d9998ac4a7624",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"6172e0693e7d9998ac4a7624"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Offers Item",
					"item": [
						{
							"name": "200_Get Offer Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"// pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"//     pm.expect(jsonData.message).to.eql(\"Offers items found\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"The attributes should be correct\", function () {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData.data.platform).to.eql(\"Rewards_USA\");\r",
											"//     pm.expect(jsonData.data.program).to.eql(\"MyCooler\");\r",
											"//     pm.expect(jsonData.data.type).to.eql(\"merchandising\");\r",
											"//     pm.expect(jsonData.data.category).to.eql(\"clothes\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"apicode attribute is equal to '100'\", function () {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData.apicode).to.eql(100);\r",
											"// });\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"data.data\": { \"type\": \"array\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apicode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/items?platform={{createPlatform}}&program=TinTin&filter_type=merchandising&store_id=4d1cb45d-feda-4982-92b8-69004f73ec93",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"items"
									],
									"query": [
										{
											"key": "platform",
											"value": "{{createPlatform}}"
										},
										{
											"key": "program",
											"value": "TinTin"
										},
										{
											"key": "filter_type",
											"value": "merchandising"
										},
										{
											"key": "store_id",
											"value": "4d1cb45d-feda-4982-92b8-69004f73ec93"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Get Offer  by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"// pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"//     pm.expect(jsonData.message).to.eql(\"Offers items found\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"The attributes should be correct\", function () {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData.data[0].platform).to.eql(\"Rewards_USA\");\r",
											"//     pm.expect(jsonData.data[0].program).to.eql(\"MyCooler\");\r",
											"//     pm.expect(jsonData.data[0].filter_type).to.eql(\"merchandising\");\r",
											"//     pm.expect(jsonData.data[0].filter_category).to.eql(\"clothes\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"apicode attribute is equal to '100'\", function () {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData.apicode).to.eql(100);\r",
											"// });\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"data.data\": { \"type\": \"array\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apicode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/items/627d85b3c6fcc900091ff199",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"items",
										"627d85b3c6fcc900091ff199"
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Get Offer  not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"// pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"//     pm.expect(jsonData.message).to.eql(\"Offers items found\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"The attributes should be correct\", function () {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData.data[0].platform).to.eql(\"Rewards_USA\");\r",
											"//     pm.expect(jsonData.data[0].program).to.eql(\"MyCooler\");\r",
											"//     pm.expect(jsonData.data[0].filter_type).to.eql(\"merchandising\");\r",
											"//     pm.expect(jsonData.data[0].filter_category).to.eql(\"clothes\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"apicode attribute is equal to '100'\", function () {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData.apicode).to.eql(100);\r",
											"// });\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"data.data\": { \"type\": \"array\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apicode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/items/627d85b3c6fcc900091ff155",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"items",
										"627d85b3c6fcc900091ff155"
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Get Offer Item not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Offers items not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '101'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(101);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"data.data\": { \"type\": \"array\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\",\"apicode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/items?platform={{createPlatform}}&program=TinTin&filter_type=x&store_id=dd",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"items"
									],
									"query": [
										{
											"key": "platform",
											"value": "{{createPlatform}}"
										},
										{
											"key": "program",
											"value": "TinTin"
										},
										{
											"key": "filter_type",
											"value": "x"
										},
										{
											"key": "store_id",
											"value": "dd"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Get Offer required params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/items?platform={{createPlatform}}&filter_type=merchandising",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"items"
									],
									"query": [
										{
											"key": "platform",
											"value": "{{createPlatform}}"
										},
										{
											"key": "filter_type",
											"value": "merchandising"
										},
										{
											"key": "store_id",
											"value": "{{store_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Get Offer Item Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"//     pm.response.to.have.status(401);\r",
											"//     pm.response.to.have.status(\"Unauthorized\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"//     let jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"// });\r",
											"\r",
											"// pm.test(\"Response must have a body\", function () {\r",
											"//     pm.response.to.be.withBody;\r",
											"//     pm.response.to.be.json;\r",
											"// });\r",
											"\r",
											"// pm.test(\"Response has all properties\", function () {\r",
											"//   pm.expect(pm.response.text()).to.include(\"message\");\r",
											"// });\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"// pm.test('Schema is valid', function() {\r",
											"//   pm.response.to.have.jsonSchema(schema);\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "key",
										"value": "TinTin",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/redemption/items?platform={{createPlatform}}&program={{program}}&filter_type=mechandising&store_id=4d1cb45d-feda-4982-92b8-69004f73ec93",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"items"
									],
									"query": [
										{
											"key": "platform",
											"value": "{{createPlatform}}"
										},
										{
											"key": "program",
											"value": "{{program}}"
										},
										{
											"key": "filter_type",
											"value": "mechandising"
										},
										{
											"key": "store_id",
											"value": "4d1cb45d-feda-4982-92b8-69004f73ec93"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Offers Buy",
					"item": [
						{
							"name": "200_Buy Offer Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1916\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Successful operation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"test-automation-02@test.com\",\n  \"platform\": \"{{platform}}\",\n  \"program\": \"{{program}}\",\n  \"origin\": \"web\",\n  \"agent\": \"mozilla\",\n  \"offer_id\": \"624f14992e26f50009f47d8f\",\n  \"store_id\": \"44fa8dfe-eb3e-4b4e-a389-70e0cae0e659\",\n  \"quantity\": 1,\n  \"points\": 0,\n  \"address\": \"3105 NW 107th Ave, Doral, FL 33172\",\n  \"zipcode\": \"33172\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/redemption/items/buy",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"items",
										"buy"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Buy Offer not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1919\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Offer was not found'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Offer was not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"predencion@gmail.com\",\n  \"platform\": \"Rewards_USA\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\",\n  \"agent\": \"mozilla\",\n  \"offer_id\": \"624f14992e26f50009f47d8b\",\n  \"store_id\": \"44fa8dfe-eb3e-4b4e-a389-70e0cae0e659\",\n  \"quantity\": 1,\n  \"points\": 15,\n  \"address\": \"3105 NW 107th Ave, Doral, FL 33172\",\n  \"zipcode\": \"33172\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/redemption/items/buy",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"items",
										"buy"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Buy Offer client not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1920\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'The client was not found'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"The client was not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"test.automation.NE@testabi.com\",\n  \"platform\": \"Rewards_USA\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\",\n  \"agent\": \"mozilla\",\n  \"offer_id\": \"624f14992e26f50009f47da4\",\n  \"store_id\": \"44fa8dfe-eb3e-4b4e-a389-70e0cae0e659\",\n  \"quantity\": 1,\n  \"points\": 50,\n  \"address\": \"3105 NW 107th Ave, Doral, FL 33172\",\n  \"zipcode\": \"33172\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/redemption/items/buy",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"items",
										"buy"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Buy Offer zip code not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1932\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Zip code was not found'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Zip code was not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"test.automation.0100@testabi.com\",\n  \"platform\": \"Rewards_USA\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\",\n  \"agent\": \"mozilla\",\n  \"offer_id\": \"624f14992e26f50009f47da4\",\n  \"store_id\": \"44fa8dfe-eb3e-4b4e-a389-70e0cae0e659\",\n  \"quantity\": 1,\n  \"points\": 50,\n  \"address\": \"3105 NW 107th Ave, Doral, FL 33172\",\n  \"zipcode\": \"11111\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/redemption/items/buy",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"items",
										"buy"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Buy Offer requerid params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1933\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"        \"error\": { \"type\": \"array\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apicode\", \"status\", \"message\", \"error\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": \"yohisgil@gmail.com\",\n    \"offer_id\": \"617c36bc74537d00096a08e1\",\n    \"store_id\": \"44fa8dfe-eb3e-4b4e-a389-70e0cae0e659\",\n    \"quantity\": 1,\n    \"points\": 22\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/redemption/items/buy",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"items",
										"buy"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Buy Offer Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1935\r",
											"\r",
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": \"yohisgil@gmail.com\",\n    \"platform\": \"Rewards_USA\",\n    \"program\": \"MyCooler\",\n    \"origin\": \"web\",\n    \"agent\": \"aws\",\n    \"offer_id\": \"61840039acd52800082afac6\",\n    \"store_id\": \"44fa8dfe-eb3e-4b4e-a389-70e0cae0e659\",\n    \"quantity\": 1,\n    \"points\": 0,\n    \"is_award\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/redemption/items/buy",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"items",
										"buy"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Buy offer is not an award",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1934\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'The offer is not an award'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"The offer is not an award\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": \"yohisgil@gmail.com\",\n    \"platform\": \"Rewards_USA\",\n    \"program\": \"MyCooler\",\n    \"origin\": \"web\",\n    \"agent\": \"aws\",\n    \"offer_id\": \"6298097da5c7310009d45f95\",\n    \"store_id\": \"44fa8dfe-eb3e-4b4e-a389-70e0cae0e659\",\n    \"quantity\": 1,\n    \"points\": 0,\n    \"is_award\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/redemption/items/buy",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"items",
										"buy"
									]
								}
							},
							"response": []
						},
						{
							"name": "500_Buy Offer Not enough points",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1918\r",
											"\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Internal Server Error\", () => {\r",
											"  pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code attribute is equal to '500'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"message attribute is equal to 'Spend amount was greater than available balance.'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Spend amount was greater than available balance.\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '52'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(52);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"test.automation.0100@testabi.com\",\n  \"platform\": \"Rewards_USA\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\",\n  \"agent\": \"mozilla\",\n  \"offer_id\": \"624f14992e26f50009f47da4\",\n  \"store_id\": \"44fa8dfe-eb3e-4b4e-a389-70e0cae0e659\",\n  \"quantity\": 1,\n  \"points\": 50,\n  \"address\": \"3105 NW 107th Ave, Doral, FL 33172\",\n  \"zipcode\": \"33172\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/redemption/items/buy",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"redemption",
										"items",
										"buy"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Settings",
			"item": [
				{
					"name": "faqs/category",
					"item": [
						{
							"name": "201-105_faq/category_Create successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 201 and code name 'Created'\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"pm.test(\"Status in response is 'created'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"created\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 201\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(201)",
											"});",
											"",
											"pm.test(\"Message in response is 'Faq Category Created'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Faq Category Created\")",
											"});",
											"",
											"pm.test(\"ApiCode in response is 105\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(105)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"    pm.expect(pm.response.text()).to.include(\"data\");",
											"    pm.expect(pm.response.text()).to.include(\"category\");",
											"    pm.expect(pm.response.text()).to.include(\"platform\");",
											"    pm.expect(pm.response.text()).to.include(\"program\");",
											"    pm.expect(pm.response.text()).to.include(\"create_user\");",
											"    pm.expect(pm.response.text()).to.include(\"create_date\");",
											"    pm.expect(pm.response.text()).to.include(\"_id\");",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"status\": { \"type\": \"string\" },",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"message\": { \"type\": \"string\" }, ",
											"        \"data\": { \"type\": \"object\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"status\", \"statusCode\", \"message\", \"data\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"//Set global variable \"createFaqCategoryId\" with the category created",
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"createFaqCategoryId\", jsonData.data._id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generate text to category",
											"var result           = 'Test faq category ';",
											"var characters       = '0123456789';",
											"var charactersLength = 6;",
											"for ( var i = 0; i < charactersLength; i++ ) {",
											"    result += characters.charAt(Math.floor(Math.random() * charactersLength));",
											"}",
											"pm.globals.set(\"createFaqCategory\", result);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"category\": \"{{createFaqCategory}}\",\n    \"platform\": \"Rewards_USA\",\n    \"program\": \"MyCooler\",\n    \"create_user\": \"pruebastapitapp@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-40_faq/category_Category already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Status in response is 'error'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"Message in response is 'The category already exists'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The category already exists\")",
											"});",
											"",
											"pm.test(\"ApiCode in response is 40\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(40)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"    pm.expect(pm.response.text()).to.include(\"data\");",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"status\": { \"type\": \"string\" },",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"message\": { \"type\": \"string\" }, ",
											"        \"data\": { \"type\": \"array\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"status\", \"statusCode\", \"message\", \"data\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"category\": \"{{createFaqCategory}}\",\n    \"platform\": \"{{createPlatform}}\",\n    \"program\": \"MyCooler\",\n    \"create_user\": \"backofficeuser@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-40_faq/category_Required property category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Status in response is error\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"Message in response is 'instance requires property \\\"category\\\"'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.error[0]).to.eql(\"instance requires property \\\"category\\\"\")",
											"});",
											"",
											"pm.test(\"ApiCode in response is 40\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(40)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"status\": { \"type\": \"string\" },",
											"        \"message\": { \"type\": \"object\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"statusCode\",\"status\",\"message\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"platform\": \"{{createPlatform}}\",\n    \"program\": \"MyCooler\",\n    \"create_user\": \"backofficeuser@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-40_faq/category_Required property platform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Status in response is error\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"Message in response is 'instance requires property \\\"platform\\\"'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.error[0]).to.eql(\"instance requires property \\\"platform\\\"\")",
											"});",
											"",
											"pm.test(\"ApiCode in response is 40\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(40)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"status\": { \"type\": \"string\" },",
											"        \"message\": { \"type\": \"object\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"statusCode\",\"status\",\"message\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"category\": \"{{createFaqCategory}}\",\n    \"program\": \"MyCooler\",\n    \"create_user\": \"testbackcreate@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-40_faq/category_Required property program",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Status in response is error\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"Message in response is 'iinstance requires property \\\"program\\\"'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.error[0]).to.eql(\"instance requires property \\\"program\\\"\")",
											"});",
											"",
											"pm.test(\"ApiCode in response is 40\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(40)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"status\": { \"type\": \"string\" },",
											"        \"message\": { \"type\": \"object\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"statusCode\",\"status\",\"message\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"category\": \"{{createFaqCategory}}\",\n    \"platform\": \"{{createPlatform}}\",\n    \"create_user\": \"testbackcreate@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-40_faq/category_Required property create_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Status in response is error\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"Message in response is 'instance requires property \\\"create_user\\\"'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.error[0]).to.eql(\"instance requires property \\\"create_user\\\"\")",
											"});",
											"",
											"pm.test(\"ApiCode in response is 40\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(40)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"status\": { \"type\": \"string\" },",
											"        \"message\": { \"type\": \"object\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"statusCode\",\"status\",\"message\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"category\": \"{{createFaqCategory}}\",\n    \"platform\": \"{{createPlatform}}\",\n    \"program\": \"MyCooler\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-40_faq/category_Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Status in response is error\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"ApiCode in response is 40\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(40)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"status\": { \"type\": \"string\" },",
											"        \"message\": { \"type\": \"object\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"statusCode\",\"status\",\"message\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"category\": \"{{createFaqCategory}}\",\n    \"platform\": \"{{createPlatform}}\",\n    \"platformm\": \"Rewards_USA\",\n    \"program\": \"MyCooler\",\n    \"create_user\": \"testbackcreate@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_faq/category_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {",
											"    pm.response.to.have.status(401);",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});",
											"",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" }",
											"    },",
											"    \"required\": [\"message\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"category\": \"{{createFaqCategory}}\",\n    \"platform\": \"{{createPlatform}}\",\n    \"program\": \"MyCooler\",\n    \"create_user\": \"testbackcreate@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category"
									]
								}
							},
							"response": []
						},
						{
							"name": "201-102_faq/category_Update successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 200 and code name 'OK'\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Status in response is 'success'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 200\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(200)",
											"});",
											"",
											"pm.test(\"Message in response is 'Category updated'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Category updated\")",
											"});",
											"",
											"pm.test(\"ApiCode in response is 102\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(102)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"    pm.expect(pm.response.text()).to.include(\"data\");",
											"    pm.expect(pm.response.text()).to.include(\"category\");",
											"    pm.expect(pm.response.text()).to.include(\"platform\");",
											"    pm.expect(pm.response.text()).to.include(\"program\");",
											"    pm.expect(pm.response.text()).to.include(\"create_user\");",
											"    pm.expect(pm.response.text()).to.include(\"create_date\");",
											"    pm.expect(pm.response.text()).to.include(\"_id\");",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"status\": { \"type\": \"string\" },",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"message\": { \"type\": \"string\" }, ",
											"        \"data\": { \"type\": \"object\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"status\", \"statusCode\", \"message\", \"data\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generate text to category",
											"var result           = 'Test faq category ';",
											"var characters       = '0123456789';",
											"var charactersLength = 6;",
											"for ( var i = 0; i < charactersLength; i++ ) {",
											"    result += characters.charAt(Math.floor(Math.random() * charactersLength));",
											"}",
											"pm.globals.set(\"updateFaqCategory\", result);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"category\": \"{{updateFaqCategory}}\",\n    \"update_user\": \"testbackupdate@email.com\"\n}\n\n\n    ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category/{{createFaqCategoryId}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category",
										"{{createFaqCategoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-40_faq/category_Format property id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Status in response is 'error'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"Message in response is 'instance.id does not meet minimum length of 24'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.error[0]).to.eql(\"instance.id does not meet minimum length of 24\")",
											"});",
											"",
											"pm.test(\"ApiCode in response is 40\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(40)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"status\": { \"type\": \"string\" },",
											"        \"message\": { \"type\": \"object\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"statusCode\", \"status\", \"message\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"category\": \"{{updateFaqCategory}}\",\n    \"update_user\" : \"testbackupdate@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category/",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "400-40_faq/category_Required property category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Status in response is error\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"Message in response is 'instance requires property \\\"category\\\"'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.error[0]).to.eql(\"instance requires property \\\"category\\\"\")",
											"});",
											"",
											"pm.test(\"ApiCode in response is 40\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(40)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"status\": { \"type\": \"string\" },",
											"        \"message\": { \"type\": \"object\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"statusCode\",\"status\",\"message\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"update_user\": \"juan@abinbev.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category/{{createFaqCategoryId}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category",
										"{{createFaqCategoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-40_faq/category_Required property update_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Status in response is error\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"Message in response is 'instance requires property \\\"update_user\\\"'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.error[0]).to.eql(\"instance requires property \\\"update_user\\\"\")",
											"});",
											"",
											"pm.test(\"ApiCode in response is 40\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(40)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"status\": { \"type\": \"string\" },",
											"        \"message\": { \"type\": \"object\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"statusCode\",\"status\",\"message\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"category\": \"{{updateFaqCategory}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category/{{createFaqCategoryId}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category",
										"{{createFaqCategoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-40_faq/category_Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Status in response is 'error'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"Message in response is 'instance is not allowed to have the additional property \\\"categoryy\\\"'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.error[0]).to.eql(\"instance is not allowed to have the additional property \\\"categoryy\\\"\")",
											"});",
											"",
											"pm.test(\"ApiCode in response is 40\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(40)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"status\": { \"type\": \"string\" },",
											"        \"message\": { \"type\": \"object\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"statusCode\", \"status\", \"message\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"category\": \"{{updateFaqCategory}}\",\n    \"categoryy\": \"{{updateFaqCategory}}\",\n    \"update_user\" : \"testbackupdate@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category/{{createFaqCategoryId}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category",
										"{{createFaqCategoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-41_faq/category_Category already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Status in response is 'Bad request'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"Message in response is 'This category name is already in use'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"This category name is already in use\")",
											"});",
											"",
											"pm.test(\"ApiCode in response is 40\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(40)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"    pm.expect(pm.response.text()).to.include(\"data\");",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"status\": { \"type\": \"string\" },",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"message\": { \"type\": \"string\" }, ",
											"        \"data\": { \"type\": \"array\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"status\", \"statusCode\", \"message\", \"data\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"category\": \"{{updateFaqCategory}}\",\n    \"update_user\" : \"testbackupdate@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category/{{createFaqCategoryId}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category",
										"{{createFaqCategoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_faq/category_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {",
											"    pm.response.to.have.status(401);",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});",
											"",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" }",
											"    },",
											"    \"required\": [\"message\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"update_user\": \"juan@abinbev.com\",\n    \"category\": \"Additional help\", \n    \"platform\": \"MyCooler\", \n    \"origin\": \"Rewards_USAs\", \n    \"origin_creation\": \"backoffice\", \n    \"create_user\": \"backofficeuser\" \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category/{{createFaqCategoryId}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category",
										"{{createFaqCategoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200-100_faq/category_Successful data query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 200 and code name 'OK'\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Status in response is 'success'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 200\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(200)",
											"});",
											"",
											"pm.test(\"Message in response is 'Query without data'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Query without data\")",
											"});",
											"",
											"pm.test(\"ApiCode in response is 101\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(101)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"    pm.expect(pm.response.text()).to.include(\"data\");",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"status\": { \"type\": \"string\" },",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"message\": { \"type\": \"string\" }, ",
											"        \"data\": { \"type\": \"array\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"status\", \"statusCode\", \"message\", \"data\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category?platform=MyCooler\n",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category"
									],
									"query": [
										{
											"key": "platform",
											"value": "MyCooler\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200-101_faq/category_Successful query without data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 200 and code name 'OK'\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Status in response is 'success'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 200\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(200)",
											"});",
											"",
											"pm.test(\"Message in response is 'Query without data'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Query without data\")",
											"});",
											"",
											"pm.test(\"ApiCode in response is 101\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(101)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"    pm.expect(pm.response.text()).to.include(\"data\");",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"status\": { \"type\": \"string\" },",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"message\": { \"type\": \"string\" }, ",
											"        \"data\": { \"type\": \"array\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"status\", \"statusCode\", \"message\", \"data\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category?platform=notExistsPlatform",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category"
									],
									"query": [
										{
											"key": "platform",
											"value": "notExistsPlatform"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400-40_faq/category_Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Status in response is error\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"ApiCode in response is 40\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(40)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"status\": { \"type\": \"string\" },",
											"        \"message\": { \"type\": \"object\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"statusCode\",\"status\",\"message\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category?platforgrgggm=MyCooler",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category"
									],
									"query": [
										{
											"key": "platforgrgggm",
											"value": "MyCooler"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401_faq/category_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {",
											"    pm.response.to.have.status(401);",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});",
											"",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" }",
											"    },",
											"    \"required\": [\"message\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category?platform={{createPlatform}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category"
									],
									"query": [
										{
											"key": "platform",
											"value": "{{createPlatform}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200-103_faq/category_Delete successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 200 and code name 'OK'\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Status in response is 'deleted'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"deleted\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 200\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(200)",
											"});",
											"",
											"pm.test(\"Message in response is 'Category deleted'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Category deleted\")",
											"});",
											"",
											"pm.test(\"ApiCode in response is 103\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(103)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"status\": { \"type\": \"string\" },",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"message\": { \"type\": \"string\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"status\", \"statusCode\", \"message\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category/{{createFaqCategoryId}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category",
										"{{createFaqCategoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-40_faq/category_Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Status in response is error\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"ApiCode in response is 40\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(40)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"status\": { \"type\": \"string\" },",
											"        \"message\": { \"type\": \"string\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"statusCode\",\"status\",\"message\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category/6153674d2376f10008624",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category",
										"6153674d2376f10008624"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-41_faq/category_Category faq does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Status in response is 'Bad request'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"Message in response is 'This category does not exist'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"This category does not exist\")",
											"});",
											"",
											"pm.test(\"ApiCode in response is 41\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(41)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"status\": { \"type\": \"string\" },",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"message\": { \"type\": \"string\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"status\", \"statusCode\", \"message\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category/6153674d2376f100086245fa",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category",
										"6153674d2376f100086245fa"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_faq/category_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {",
											"    pm.response.to.have.status(401);",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});",
											"",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" }",
											"    },",
											"    \"required\": [\"message\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/category/614b2d591660410008ee2a23",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"category",
										"614b2d591660410008ee2a23"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "faqs",
					"item": [
						{
							"name": "400-40_faq_Category does not exist in catalog",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Message in response is 'The category does not exist in the catalog'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The category does not exist in the catalog\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"ApiCode in response is 40\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(40)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" }, ",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [ \"message\", \"statusCode\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"idcategory\": \"no existe en el catalogo\",\n    \"platform\": \"Rewards_USA\",\n    \"program\" : \"MyCooler\",\n    \"question\": \"How do I earn points for my purchases?\",\n    \"answer\": \"Upload photos of your purchase receipts from stores, bars and restaurants to earn points.\\n\\nOnly receipts from January 17, 2019 –present will be accepted. Visit your Recent activity to track points earned from your purchases within 48 hours.\\n\\nNew Jersey and Utah residents are not eligible to earn points for beverage purchases.\",\n    \"order\": 1,\n    \"create_user\": \"pruebastapitapp@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-40_faq_Bad request required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"Status in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\")",
											"});",
											"",
											"pm.test(\"Message in response is 'Invalid schema'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.message).to.eql(\"Invalid schema\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"  pm.expect(pm.response.text()).to.include(\"status\");",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" }, ",
											"        \"status\": { \"type\": \"string\" }, ",
											"        \"message\": { \"type\": \"object\" },",
											"",
											"    },",
											"    \"required\": [\"statusCode\", \"status\", \"message\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"category\": \"About MyCooler\",\n    \"platform\": \"Tapit_USA\",\n    \"programsss\" : \"MyCooler\",\n    \"question\": \"How do I earn points for my purchases test?\",\n    \"anwser\": \"Upload photos of your purchase receipts from stores, bars and restaurants to earn points.\\n\\nOnly receipts from January 17, 2019 –present will be accepted. Visit your Recent activity to track points earned from your purchases within 48 hours.\\n\\nNew Jersey and Utah residents are not eligible to earn points for beverage purchases.\",\n    \"order\": 1,\n    \"create_user\": \"backofficeuser@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-40_faq/rating_Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Message in response is 'Invalid schema'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.message).to.eql(\"Invalid schema\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400 \", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400 )",
											"});",
											"",
											"pm.test(\"ApiCode in response is 40 \", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(40 )",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"  pm.expect(pm.response.text()).to.include(\"status\");",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"object\" }, ",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"statusCode\", \"message\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"idFaq\": \"615ca63153dd330008f8c3f4\",\n    \"category\": \"Additional help\",\n    \"platformf\" : \"Rewards_USA\",\n    \"wasHelpful\" : true,\n    \"user\" : \"jzapata@ab-inbev\",\n    \"agent\" : \"example\",\n    \"program\" : \"MyCooler\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/rating",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"rating"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_faq/rating_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {",
											"    pm.response.to.have.status(401);",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});",
											"",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" }, ",
											"    },",
											"    \"required\": [\"message\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"idFaq\": \"615ca91af246410009b61eb7\",\n    \"category\": \"Additional help\",\n    \"platform\" : \"Rewards_USA\",\n    \"wasHelpful\" : true,\n    \"user\" : \"jzapata@ab-inbev\",\n    \"agent\" : \"example\",\n    \"program\" : \"MyCooler\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/rating",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"rating"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-40_faq/rating_Faq does not exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Message in response is 'This faq does not exist'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"This faq does not exist\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"ApiCode in response is 40\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(40)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"status\");",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"  pm.expect(pm.response.text()).to.include(\"data\");",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"data\": { \"type\": \"array\" }, ",
											"        \"message\": { \"type\": \"string\" }, ",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"statusCode\", \"message\", \"data\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"idFaq\": \"615c7f99a720c40009dce6e9\",\n    \"category\": \"Additional help\",\n    \"platform\" : \"Rewards_USA\",\n    \"wasHelpful\" : true,\n    \"user\" : \"jzapata@ab-inbev\",\n    \"agent\" : \"example\",\n    \"program\" : \"MyCooler\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/rating",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"rating"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_faq_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {",
											"    pm.response.to.have.status(401);",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});",
											"",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" },",
											"",
											"    },",
											"    \"required\": [\"message\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"category\": \"About MyCooler\",\n    \"platform\": \"Tapit_USA\",\n    \"program\" : \"MyCooler\",\n    \"question\": \"How do I earn points for my purchases test?\",\n    \"anwser\": \"Upload photos of your purchase receipts from stores, bars and restaurants to earn points.\\n\\nOnly receipts from January 17, 2019 –present will be accepted. Visit your Recent activity to track points earned from your purchases within 48 hours.\\n\\nNew Jersey and Utah residents are not eligible to earn points for beverage purchases.\",\n    \"order\": 1,\n    \"create_user\": \"backofficeuser@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-40_faq_Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"Status in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\")",
											"});",
											"",
											"pm.test(\"Message in response is 'Invalid schema'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.message).to.eql(\"Invalid schema\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"  pm.expect(pm.response.text()).to.include(\"status\");",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" }, ",
											"        \"status\": { \"type\": \"string\" }, ",
											"        \"message\": { \"type\": \"object\" },",
											"",
											"    },",
											"    \"required\": [\"statusCode\", \"status\", \"message\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"idcategory\": \"About MyCooler\",\n   \"platform\": \"Tapit_USA update\",\n   \"programgggg\" : \"MyCooler update\",\n   \"question\": \"How do I earn points for my purchases update?\",\n   \"answer\": \"Upload photos of your purchase receipts from stores, bars and restaurants to earn points.\\n\\nOnly receipts from January 17, 2019 –present will be accepted. Visit your Recent activity to track points earned from your purchases within 48 hours.\\n\\nNew Jersey and Utah residents are not eligible to earn points for beverage purchases. update\",\n   \"order\": 2,\n   \"update_user\": \"backofficeuser@update.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/615b5c8341ec410008efef7e",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"615b5c8341ec410008efef7e"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-41_faq_Category not exist in catalog",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Message in response is 'This Faq does not exist'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"This Faq does not exist\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"ApiCode in response is 41\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(41)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"status\");",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"  pm.expect(pm.response.text()).to.include(\"data\");",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"status\": { \"type\": \"string\" },",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"message\": { \"type\": \"string\" }, ",
											"        \"data\": { \"type\": \"array\" }, ",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"status\", \"statusCode\", \"message\", \"data\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"idcategory\": \"About MyCoolerssss\",\n   \"platform\": \"Tapit_USA\",\n   \"program\" : \"MyCooler\",\n   \"question\": \"How do I earn points for my purchases?\",\n   \"answer\": \"Upload photos of your purchase receipts from stores, bars and restaurants to earn points.\\n\\nOnly receipts from January 17, 2019 –present will be accepted. Visit your Recent activity to track points earned from your purchases within 48 hours.\\n\\nNew Jersey and Utah residents are not eligible to earn points for beverage purchases.\",\n   \"order\": 2,\n   \"update_user\": \"backofficeuser@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/615c85c181337a00085f2c0e",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"615c85c181337a00085f2c0e"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_faq_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {",
											"    pm.response.to.have.status(401);",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});",
											"",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" },",
											"",
											"    },",
											"    \"required\": [\"message\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"category\": \"About MyCooler\",\n   \"platform\": \"Tapit_USA update\",\n   \"program\" : \"MyCooler update\",\n   \"question\": \"How do I earn points for my purchases update?\",\n   \"anwser\": \"Upload photos of your purchase receipts from stores, bars and restaurants to earn points.\\n\\nOnly receipts from January 17, 2019 –present will be accepted. Visit your Recent activity to track points earned from your purchases within 48 hours.\\n\\nNew Jersey and Utah residents are not eligible to earn points for beverage purchases. update\",\n   \"order\": 2,\n   \"update_user\": \"backofficeuser@update.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/615b5c8341ec410008efef7e",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"615b5c8341ec410008efef7e"
									]
								}
							},
							"response": []
						},
						{
							"name": "200-100_faq_Successful data query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 200 and code name 'OK'\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Message in response is 'Query without data'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Query without data\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 200\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(200)",
											"});",
											"",
											"pm.test(\"ApiCode in response is 100\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(101)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"status\");",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"  pm.expect(pm.response.text()).to.include(\"data\");",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"data\": { \"type\": \"array\" }, ",
											"        \"message\": { \"type\": \"string\" }, ",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"statusCode\", \"message\", \"data\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/?platform=Rewards_USA&category=Test faq category 340345&program=MyCooler",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										""
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "category",
											"value": "Test faq category 340345"
										},
										{
											"key": "program",
											"value": "MyCooler"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200-101_faq_Successful query without data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 200 and code name 'OK'\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Message in response is 'Query without data'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Query without data\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 200\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(200)",
											"});",
											"",
											"pm.test(\"ApiCode in response is 101\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(101)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"data\");",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"data\": { \"type\": \"array\" }, ",
											"        \"message\": { \"type\": \"string\" }, ",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"statusCode\", \"message\", \"data\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/?platform=MyCooler&category=notExistsCategory&program=MyCooler",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										""
									],
									"query": [
										{
											"key": "platform",
											"value": "MyCooler"
										},
										{
											"key": "category",
											"value": "notExistsCategory"
										},
										{
											"key": "program",
											"value": "MyCooler"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400-40_faq_Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"Status in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\")",
											"});",
											"",
											"pm.test(\"Message in response is 'Invalid schema'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.message).to.eql(\"Invalid schema\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"  pm.expect(pm.response.text()).to.include(\"status\");",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" }, ",
											"        \"status\": { \"type\": \"string\" }, ",
											"        \"message\": { \"type\": \"object\" },",
											"",
											"    },",
											"    \"required\": [\"statusCode\", \"status\", \"message\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/?platform=MyCooler&categorfy=notExistsCategory",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										""
									],
									"query": [
										{
											"key": "platform",
											"value": "MyCooler"
										},
										{
											"key": "categorfy",
											"value": "notExistsCategory"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401_faq_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {",
											"    pm.response.to.have.status(401);",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});",
											"",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" },",
											"",
											"    },",
											"    \"required\": [\"message\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/?platform=MyCooler&categorfy=notExistsCategory",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										""
									],
									"query": [
										{
											"key": "platform",
											"value": "MyCooler"
										},
										{
											"key": "categorfy",
											"value": "notExistsCategory"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400-40_faq_Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Message in response is 'instance.id does not meet minimum length of 24'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message.error[0]).to.eql(\"instance.id does not meet minimum length of 24\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"ApiCode in response is 40\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(40)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"status\": { \"type\": \"string\" }, ",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"statusCode\", \"status\",\"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/615dbec56e2d4500080",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"615dbec56e2d4500080"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-41_faq_Faq does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Message in response is 'This faq does not exist'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"This faq does not exist\")",
											"});",
											"",
											"pm.test(\"StatusCode in response is 400\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"ApiCode in response is 41\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(41)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"data\");",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"data\": { \"type\": \"array\" }, ",
											"        \"message\": { \"type\": \"string\" }, ",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"apicode\": { \"type\": \"number\" }",
											"    },",
											"    \"required\": [\"statusCode\", \"message\", \"data\", \"apicode\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/615c7f99a720c40009dce6e9",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"615c7f99a720c40009dce6e9"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_faq_Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {",
											"    pm.response.to.have.status(401);",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});",
											"",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" }, ",
											"    },",
											"    \"required\": [\"message\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/faqs/615b5c8341ec410008efef7e",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"faqs",
										"615b5c8341ec410008efef7e"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Feature Flags",
					"item": [
						{
							"name": "201_Create feature flag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 201 and code name 'Created'\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Feature Flag created'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Feature Flag created\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 201\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(201)\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 105 \", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(105 )\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"  pm.expect(pm.response.text()).to.include(\"platform\");\r",
											"  pm.expect(pm.response.text()).to.include(\"timestamp_create\");\r",
											"  pm.expect(pm.response.text()).to.include(\"program\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_user\");\r",
											"  pm.expect(pm.response.text()).to.include(\"type_component\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_date\");\r",
											"  pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data\": { \"type\": \"object\" }, \r",
											"        \"message\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"message\", \"data\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id_feature\": \"{{$randomStreetName}}\",\r\n    \"platform\": \"JUEVES\",\r\n    \"program\" : \"JUEVES\",\r\n    \"type_component\": \"app\",\r\n    \"create_user\": \"email@email\",\r\n    \"basic\": true,\r\n    \"valid_zipcodes\": [\r\n        {\r\n             \"initial\": \"35004\",\r\n            \"final\": \"36925\"\r\n        },\r\n      \r\n        {\r\n            \"initial\": \"99501\",\r\n            \"final\": \"99929\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/feature-flag",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"feature-flag"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Create feature flag atributte required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Invalid schema'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.message).to.eql(\"Invalid schema\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 400\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400)\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 40\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data.message.message\": { \"type\": \"array\" }, \r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id_feature\": \"ULTIMO\",\r\n    \"platform\": \"ULTIMO\",\r\n    \"program\" : \"ULTIMO\",\r\n  \r\n    \"create_user\": \"email@email\",\r\n    \"basic\": true,\r\n    \"valid_zipcodes\": [\r\n        {\r\n            \"initial\": \"35004\",\r\n            \"final\": \"36925\"\r\n        },\r\n      \r\n        {\r\n            \"initial\": \"90001\",\r\n            \"final\": \"96161\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/feature-flag",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"feature-flag"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Create feature flag not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'There is a feature flag with this id_feature ULTIMO'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"There is a feature flag with this id_feature ULTIMO\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 400\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400)\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 40\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data.message.message\": { \"type\": \"array\" }, \r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id_feature\": \"ULTIMO\",\r\n    \"platform\": \"ULTIMO\",\r\n    \"program\" : \"ULTIMO\",\r\n    \"type_component\": \"app\",\r\n    \"create_user\": \"email@email\",\r\n    \"basic\": true,\r\n    \"valid_zipcodes\": [\r\n        {\r\n            \"initial\": \"35004\",\r\n            \"final\": \"36925\"\r\n        },\r\n      \r\n        {\r\n            \"initial\": \"90001\",\r\n            \"final\": \"96161\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/feature-flag",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"feature-flag"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Create feature flag Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id_feature\": \"ULTIMO\",\r\n    \"platform\": \"ULTIMO\",\r\n    \"program\" : \"ULTIMO\",\r\n    \"type_component\": \"app\",\r\n    \"create_user\": \"email@email\",\r\n    \"basic\": true,\r\n    \"valid_zipcodes\": [\r\n        {\r\n            \"initial\": \"35004\",\r\n            \"final\": \"36925\"\r\n        },\r\n      \r\n        {\r\n            \"initial\": \"90001\",\r\n            \"final\": \"96161\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/feature-flag",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"feature-flag"
									]
								}
							},
							"response": []
						},
						{
							"name": "200_feature flag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 200 and code name 'OK'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Query with data'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Query with data\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 200\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200)\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 100\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(100)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"  pm.expect(pm.response.text()).to.include(\"platform\");\r",
											"  pm.expect(pm.response.text()).to.include(\"timestamp_create\");\r",
											"  pm.expect(pm.response.text()).to.include(\"program\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_user\");\r",
											"  pm.expect(pm.response.text()).to.include(\"type_component\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_date\");\r",
											"  pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data\": { \"type\": \"array\" }, \r",
											"        \"message\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"message\", \"data\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/settings/feature-flag?platform=ULTIMO&program=ULTIMO",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"feature-flag"
									],
									"query": [
										{
											"key": "platform",
											"value": "ULTIMO"
										},
										{
											"key": "program",
											"value": "ULTIMO"
										},
										{
											"key": "type_component",
											"value": "app",
											"disabled": true
										},
										{
											"key": "user",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Basic feature flags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 200 and code name 'OK'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Query with data'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Query with data\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 200\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200)\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 100\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(100)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"  pm.expect(pm.response.text()).to.include(\"platform\");\r",
											"  pm.expect(pm.response.text()).to.include(\"timestamp_create\");\r",
											"  pm.expect(pm.response.text()).to.include(\"program\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_user\");\r",
											"  pm.expect(pm.response.text()).to.include(\"type_component\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_date\");\r",
											"  pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data\": { \"type\": \"array\" }, \r",
											"        \"message\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"message\", \"data\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlApiAbi}}/settings/feature-flag/basic?platform=ULTIMO&program=ULTIMO&type_component=app",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"feature-flag",
										"basic"
									],
									"query": [
										{
											"key": "platform",
											"value": "ULTIMO"
										},
										{
											"key": "program",
											"value": "ULTIMO"
										},
										{
											"key": "type_component",
											"value": "app"
										},
										{
											"key": "user",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_feature flag not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Invalid schema'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.message).to.eql(\"Invalid schema\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 400\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400)\r",
											"    pm.expect(jsonData.status).to.eql(\"error\")\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 40\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data.message.message\": { \"type\": \"array\" }, \r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/settings/feature-flag?no=dfadfafd",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"feature-flag"
									],
									"query": [
										{
											"key": "platform",
											"value": "ULTIMO",
											"disabled": true
										},
										{
											"key": "program",
											"value": "ULTIMO",
											"disabled": true
										},
										{
											"key": "type_component",
											"value": "app",
											"disabled": true
										},
										{
											"key": "no",
											"value": "dfadfafd"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Basic feature flags not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Invalid schema'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.message).to.eql(\"Invalid schema\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 400\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400)\r",
											"    pm.expect(jsonData.status).to.eql(\"error\")\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 40\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data.message.message\": { \"type\": \"array\" }, \r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlApiAbi}}/settings/feature-flag/basic?platform=ULTIMO&no=reraraa",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"feature-flag",
										"basic"
									],
									"query": [
										{
											"key": "platform",
											"value": "ULTIMO"
										},
										{
											"key": "program",
											"value": "ULTIMO",
											"disabled": true
										},
										{
											"key": "type_component",
											"value": "app",
											"disabled": true
										},
										{
											"key": "no",
											"value": "reraraa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401_feature flag  Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/settings/feature-flag?platform=ULTIMO&program=ULTIMO",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"feature-flag"
									],
									"query": [
										{
											"key": "platform",
											"value": "ULTIMO"
										},
										{
											"key": "program",
											"value": "ULTIMO"
										},
										{
											"key": "type_component",
											"value": "app",
											"disabled": true
										},
										{
											"key": "user",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_feature flag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 200 and code name 'OK'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Feature Flag updated'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Feature Flag updated\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 200\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200)\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 102\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(102)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"  pm.expect(pm.response.text()).to.include(\"platform\");\r",
											"  pm.expect(pm.response.text()).to.include(\"timestamp_create\");\r",
											"  pm.expect(pm.response.text()).to.include(\"program\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_user\");\r",
											"  pm.expect(pm.response.text()).to.include(\"type_component\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_date\");\r",
											"  pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data\": { \"type\": \"object\" }, \r",
											"        \"message\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"message\", \"data\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": false, \r\n    \"update_user\": \"creado@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/feature-flag/621d4b510b5e9e000961cc69",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"feature-flag",
										"621d4b510b5e9e000961cc69"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_feature flag required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Invalid schema'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.message).to.eql(\"Invalid schema\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 400\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400)\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 40\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data.message.message\": { \"type\": \"array\" }, \r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": false\r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/feature-flag/615e757ee82bfd0009024405",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"feature-flag",
										"615e757ee82bfd0009024405"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_feature flag Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": false, \r\n    \"update_user\": \"creado@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/feature-flag/615e757ee82bfd0009024405",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"feature-flag",
										"615e757ee82bfd0009024405"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "terms-and-conditions",
					"item": [
						{
							"name": "201_Create Terms & Conditions",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform\": \"Terminos y condiciones\",\r\n    \"subplatform\": \"terminos y condiciones 1\",\r\n    \"program\": \"T&M\",\r\n    \"url\": \"https://www.terminos y condiciones.com\",\r\n    \"create_user\": \"terminoscondiciones@prueba.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/terms-and-conditions",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"terms-and-conditions"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Create Terms & Conditions already exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'These terms and conditions already exist for this platform and program'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"These terms and conditions already exist for this platform and program\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 400\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400)\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 40\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data\": { \"type\": \"array\" }, \r",
											"        \"message\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"message\", \"data\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform\": \"Terminos y condiciones\",\r\n    \"subplatform\": \"terminos y condiciones 1\",\r\n    \"program\": \"T&M\",\r\n    \"url\": \"https://www.terminos y condiciones.com\",\r\n    \"create_user\": \"terminoscondiciones@prueba.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/terms-and-conditions",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"terms-and-conditions"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Create Terms & Conditions atributte requerid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Invalid schema'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.message).to.eql(\"Invalid schema\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 400\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400)\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 40\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"object\" }, \r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform\": \"Terminos y condiciones\",\r\n    \"subplatform\": \"terminos y condiciones 1\",\r\n    \"program\": \"T&M\",\r\n    \r\n    \"create_user\": \"terminoscondiciones@prueba.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/terms-and-conditions",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"terms-and-conditions"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Create Terms & Conditions Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform\": \"Terminos y condiciones\",\r\n    \"subplatform\": \"terminos y condiciones 1\",\r\n    \"program\": \"T&M\",\r\n    \r\n    \"create_user\": \"terminoscondiciones@prueba.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/terms-and-conditions",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"terms-and-conditions"
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Terms & Conditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 200 and code name 'Created'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Query with data'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Query with data\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 200\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200)\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 100 \", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(100 )\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"  pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"platform\");\r",
											"  pm.expect(pm.response.text()).to.include(\"url\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_user\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_date\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data\": { \"type\": \"array\" }, \r",
											"        \"message\": { \"type\": \"string\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\",\"status\", \"message\", \"data\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/settings/terms-and-conditions",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"terms-and-conditions"
									],
									"query": [
										{
											"key": "platform",
											"value": "Terminos %26 condiciones",
											"disabled": true
										},
										{
											"key": "program",
											"value": "T%26M",
											"disabled": true
										},
										{
											"key": "subplatform",
											"value": "terminos y condiciones 1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Terms & Conditions without params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 200 and code name 'Created'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Query with data'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Query with data\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 200\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200)\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 100 \", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(100 )\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"  pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"platform\");\r",
											"  pm.expect(pm.response.text()).to.include(\"url\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_user\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_date\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data\": { \"type\": \"array\" }, \r",
											"        \"message\": { \"type\": \"string\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\",\"status\", \"message\", \"data\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/settings/terms-and-conditions",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"terms-and-conditions"
									],
									"query": [
										{
											"key": "platform",
											"value": "Terminos y condiciones",
											"disabled": true
										},
										{
											"key": "program",
											"value": "T%26M",
											"disabled": true
										},
										{
											"key": "subplatform",
											"value": "terminos y condiciones 1",
											"disabled": true
										},
										{
											"key": "otro",
											"value": "434343",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Terms & Conditions  atributte not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Invalid schema'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.message).to.eql(\"Invalid schema\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 400\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400)\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 40\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"object\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"message\", \"status\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/settings/terms-and-conditions?RAFA=56788",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"terms-and-conditions"
									],
									"query": [
										{
											"key": "platform",
											"value": "Terminos y condiciones",
											"disabled": true
										},
										{
											"key": "program",
											"value": "T%26M",
											"disabled": true
										},
										{
											"key": "subplatform",
											"value": "terminos y condiciones 1",
											"disabled": true
										},
										{
											"key": "RAFA",
											"value": "56788"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Terms & Conditions Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/settings/terms-and-conditions?platform=Terminos y condiciones&program=T%26M&subplatform=terminos y condiciones 1",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"terms-and-conditions"
									],
									"query": [
										{
											"key": "platform",
											"value": "Terminos y condiciones"
										},
										{
											"key": "program",
											"value": "T%26M"
										},
										{
											"key": "subplatform",
											"value": "terminos y condiciones 1"
										},
										{
											"key": "RAFA",
											"value": "56788",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Update Term & Conditions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 200 and code name 'OK'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Terms & Conditions updated'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Terms & Conditions updated\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 200 \", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200 )\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 102 \", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(102 )\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"platform\");\r",
											"  pm.expect(pm.response.text()).to.include(\"subplatform\");\r",
											"  pm.expect(pm.response.text()).to.include(\"program\");\r",
											"  pm.expect(pm.response.text()).to.include(\"url\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_user\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_date\");\r",
											"  pm.expect(pm.response.text()).to.include(\"last_update_date\");\r",
											"  pm.expect(pm.response.text()).to.include(\"update_user\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data\": { \"type\": \"object\" }, \r",
											"        \"message\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"message\", \"data\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"platform\": \"Rewards_USA\",\r\n   \"program\": \"MyCooler\",\r\n   \"subplatform\": \"MyCooler\",\r\n   \"url\": \"https://www.mycooler.com/en/terms-conditions.html\",\r\n   \"update_user\": \"yohisgil@gmail.com\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/terms-and-conditions",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"terms-and-conditions"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Update Term & Conditions not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'This terms and conditions does not exist'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"This terms and conditions does not exist\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 400\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400)\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 41\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(41)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data\": { \"type\": \"array\" }, \r",
											"        \"message\": { \"type\": \"string\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"message\", \"status\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"platform\": \"cualquierdato\",\r\n   \"program\": \"43874837\",\r\n   \"subplatform\": \"terminos y condiciones 1\",\r\n   \"url\": \"https://CAMBIO URLl\",\r\n   \"update_user\": \"terminosscambios@terminos.com\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/terms-and-conditions",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"terms-and-conditions"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Update Term & Conditions Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"platform\": \"cualquierdato\",\r\n   \"program\": \"43874837\",\r\n   \"subplatform\": \"terminos y condiciones 1\",\r\n   \"url\": \"https://CAMBIO URLl\",\r\n   \"update_user\": \"terminosscambios@terminos.com\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/terms-and-conditions",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"terms-and-conditions"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_terms & Conditions not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'This terms and conditions does not exist'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"This terms and conditions does not exist\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 400\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400)\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 41\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(41)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data\": { \"type\": \"array\" }, \r",
											"        \"message\": { \"type\": \"string\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"message\", \"status\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/settings/terms-and-conditions/615e338b457d220008888b99",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"terms-and-conditions",
										"615e338b457d220008888b99"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_terms & Conditions  Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/settings/terms-and-conditions/615e338b457d220008888b99",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"terms-and-conditions",
										"615e338b457d220008888b99"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Global Configurations",
					"item": [
						{
							"name": "201_Create Global Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 201 and code name 'Created'\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Global Configuration created'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Global Configuration created\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 201\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(201)\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 105 \", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(105 )\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"  pm.expect(pm.response.text()).to.include(\"platform\");\r",
											"  pm.expect(pm.response.text()).to.include(\"program\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_user\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_date\");\r",
											"  pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data\": { \"type\": \"object\" }, \r",
											"        \"message\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"message\", \"data\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform\":\"{{$randomStreetName}}\",\r\n    \"program\" : \"Configuracion\",\r\n    \"configuration\":\"age_gate\",\r\n    \"value\":{\r\n        \"ageGateMin\": 5,\r\n        \"ageGateMax\": 10\r\n    },\r\n    \"basic\":true,\r\n    \"create_user\": \"global@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/configurations",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Create Global Configuration already existent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'There is already this configuration for this platform'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"There is already this configuration for this platform\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 400\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400)\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 40\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data.message.message\": { \"type\": \"array\" }, \r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform\":\"GLOBAL0610\",\r\n    \"program\" : \"Configuracion\",\r\n    \"configuration\":\"age_gate\",\r\n    \"value\":{\r\n        \"ageGateMin\": 18,\r\n        \"ageGateMax\": 222\r\n    },\r\n    \"basic\":true,\r\n    \"create_user\": \"global@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/configurations",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Create Global Configuration Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform\":\"GLOBAL0610\",\r\n    \"program\" : \"Configuracion\",\r\n    \"configuration\":\"age_gate\",\r\n    \"value\":{\r\n        \"ageGateMin\": 18,\r\n        \"ageGateMax\": 222\r\n    },\r\n    \"basic\":true,\r\n    \"create_user\": \"global@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/configurations",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Basic Global  Configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 200 and code name 'OK'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Query with data'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Query with data\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 200\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200)\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 100\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(100)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"  pm.expect(pm.response.text()).to.include(\"platform\");\r",
											"  pm.expect(pm.response.text()).to.include(\"program\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_user\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_date\");\r",
											"  pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data\": { \"type\": \"array\" }, \r",
											"        \"message\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"message\", \"data\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/settings/configurations/basic?platform=GLOBAL0610",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"configurations",
										"basic"
									],
									"query": [
										{
											"key": "platform",
											"value": "GLOBAL0610"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Global   Configurations not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Invalid schema'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.message).to.eql(\"Invalid schema\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 400\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400)\r",
											"    pm.expect(jsonData.status).to.eql(\"error\")\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 40\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data.message.message\": { \"type\": \"array\" }, \r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/settings/configurations?no=54545",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"configurations"
									],
									"query": [
										{
											"key": "no",
											"value": "54545"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Basic Global  Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/settings/configurations?no=sdgdfgb",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"configurations"
									],
									"query": [
										{
											"key": "no",
											"value": "sdgdfgb"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Global Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 200 and code name 'OK'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Global Configuration updated'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Global Configuration updated\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 200\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200)\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 102\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(102)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"data\");\r",
											"  pm.expect(pm.response.text()).to.include(\"platform\");\r",
											"  pm.expect(pm.response.text()).to.include(\"program\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_user\");\r",
											"  pm.expect(pm.response.text()).to.include(\"create_date\");\r",
											"  pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data\": { \"type\": \"object\" }, \r",
											"        \"message\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"message\", \"data\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform\":\"GLOBAL0610\",\r\n    \"program\" : \"Configuracion\",\r\n    \"configuration\":\"age_gate\",\r\n    \"value\":{\r\n        \"ageGateMin\": 18,\r\n        \"ageGateMax\": 222\r\n    },\r\n    \"update_user\": \"globalACTUALIADO@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/configurations",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Global Configuration not exist params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'This configuration does not exist'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"This configuration does not exist\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 400\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400)\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\")\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 41\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(41)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data.message.message\": { \"type\": \"array\" }, \r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform\":\"GLOBAL0\",\r\n    \"program\" : \"Configuracion\",\r\n    \"configuration\":\"age_gate\",\r\n    \"value\":{\r\n        \"ageGateMin\": 18,\r\n        \"ageGateMax\": 222\r\n    },\r\n    \"update_user\": \"globalACTUALIADO@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/configurations",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Global Configuration params required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Invalid schema'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.message).to.eql(\"Invalid schema\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 400\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400)\r",
											"    pm.expect(jsonData.status).to.eql(\"error\")\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 40\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data.message.message\": { \"type\": \"array\" }, \r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \r\n\r\n\r\n    \"value\":{\r\n        \"ageGateMin\": 18,\r\n        \"ageGateMax\": 222\r\n    },\r\n    \"update_user\": \"globalACTUALIADO@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/configurations",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Global Configuration Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \r\n\r\n\r\n    \"value\":{\r\n        \"ageGateMin\": 18,\r\n        \"ageGateMax\": 222\r\n    },\r\n    \"update_user\": \"globalACTUALIADO@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/configurations",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Delete Global Configuration not exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'This configuration does not exist'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"This configuration does not exist\")\r",
											"});\r",
											"\r",
											"pm.test(\"StatusCode in response is 400\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400)\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\")\r",
											"});\r",
											"\r",
											"pm.test(\"ApiCode in response is 41\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(41)\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"data.message.message\": { \"type\": \"array\" }, \r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" }\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"apicode\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/configurations/615e57b78d9c540009a01172",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"configurations",
										"615e57b78d9c540009a01172"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Delete Global Configuration  Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/settings/configurations/615e57b78d9c540009a01172",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"settings",
										"configurations",
										"615e57b78d9c540009a01172"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "OTP",
					"item": [
						{
							"name": "200_Send internal Valid Code Channel SMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name 'OK' or 'Bad request'\", () => {\r",
											"  pm.expect(pm.response.status).to.be.oneOf([\"OK\", \"Bad Request\"])\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Valid code sent'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.be.equal(\"Valid code sent\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"{{smsClient}}\",\n  \"channel\": \"SMS\",\n  \"platform\": \"Rewards_USA\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/otp",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Send SSO Valid code - client not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Client not found'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Client not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is equal to 400 and statusCode is equal to Error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"apiCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"dimicae@email.ghostinspector.com\",\n  \"channel\": \"SMS\",\n  \"platform\": \"platform abc\",\n  \"program\": \"program abc\",\n  \"origin\": \"web\",\n  \"external_retry\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/otp",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Send SSO Valid code - bad request attribute user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is equal to 400 and statusCode is equal to 'Bad request'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\", \"apicode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"dimicae@email.ghostinspector.com\",\n  \"channel\": \"EMAIL\",\n  \"platform\": \"Rewards_USA\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\",\n  \"external_retry\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/otp",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Send SSO Valid code - invalid channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is equal to 400 and statusCode is equal to 'Bad request'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\", \"apicode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"yohisgil@gmail.com\",\n  \"channel\": \"EMAIL\",\n  \"platform\": \"Rewards_USA\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\",\n  \"external_retry\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/otp",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Send SSO Valid code - invalid boolean external retry",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is equal to 400 and statusCode is equal to 'Bad request'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\", \"apicode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"yohisgil@gmail.com\",\n  \"channel\": \"EMAIL\",\n  \"platform\": \"Rewards_USA\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\",\n  \"external_retry\": \"verdadero\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/otp",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Verification SSO Valid Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Client not found'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Client not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is equal to 400 and statusCode is equal to Error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"apiCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"automation86@gmail.com\",\n  \"code\": \"662337\",\n  \"external_retry\": false,\n  \"platform\": \"Rewards_USA\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/otp/verification",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"otp",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Verification internal Valid Code - Invalid format attribute code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name 'Bad Request'\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is equal to 400 and statusCode is equal to 'Error'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"error\": { \"type\": \"array\" },\r",
											"        \"valid\": { \"type\": \"string\"},\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"apicode\", \"message\", \"error\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"yohis@gmail.com\",\n  \"code\": \"1A234\",\n  \"external_retry\": true,\n  \"platform\": \"Rewards_USA\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/otp/verification",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"otp",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "500_Verification SSO error status CONFIRMED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name 'Internal Server Error'\", () => {\r",
											"  pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Error in signup confirm in SSO Global'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Error in signup confirm in SSO Global\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is equal to 500 and statusCode is equal to 'Error'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"error\": { \"type\": \"string\" },\r",
											"        \"valid\": { \"type\": \"string\"},\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\", \"error\", \"valid\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"useralertsb@gmail.com\",\n  \"code\": \"227513\",\n  \"external_retry\": false,\n  \"platform\": \"Rewards_USA\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/otp/verification",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"otp",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "500_Verification SSO Error in validate (external retry False)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name 'Internal Server Error'\", () => {\r",
											"  pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Error in signup confirm in SSO Global'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Error in signup confirm in SSO Global\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is equal to 500 and statusCode is equal to 'Error'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\", \"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"useralertsb@gmail.com\",\n  \"code\": \"227513\",\n  \"external_retry\": true,\n  \"platform\": \"Rewards_USA\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/otp/verification",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"otp",
										"verification"
									]
								}
							},
							"response": []
						},
						{
							"name": "500_Verification internal Valid Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name 'Internal Server Error'\", () => {\r",
											"  pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Error in signup confirm in SSO Global'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Error in signup confirm in SSO Global\");\r",
											"});\r",
											"\r",
											"pm.test(\"Error attribute is equal to 'Username/client id combination not found.'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Username/client id combination not found.\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '52'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(52);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is equal to 500 and statusCode is equal to 'Error'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"error\": { \"type\": \"string\" },\r",
											"        \"valid\": { \"type\": \"string\"},\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"blondes_120@hotmail.com\",\n  \"code\": \"174028\",\n  \"external_retry\": false,\n  \"platform\": \"{{platform}}\",\n  \"program\": \"{{program}}\",\n  \"origin\": \"web\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/otp/verification",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"otp",
										"verification"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Forgot Password",
					"item": [
						{
							"name": "200_Forgot Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Internal Server Error\", () => {\r",
											"  pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"message code is equal to 'Error in forgot password in SSO Global'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Error in forgot password in SSO Global\");\r",
											"});\r",
											"\r",
											"pm.test(\"error code is equal to 'Username/client id combination not found.'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Username/client id combination not found.\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "origin",
										"value": "http://localhost:4200",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"yohisgil@gmail.com\",\n  \"platform\": \"Rewards_USA\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\",\n  \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\" \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/forgot-password",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"forgot-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Forgot Password  attributes requerid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "origin",
										"value": "http://localhost:4200",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/forgot-password",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"forgot-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Forgot Password format email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'instance.user does not conform to the \\\"email\\\" format'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error[0]).to.eql(\"instance.user does not conform to the \\\"email\\\" format\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "origin",
										"value": "http://localhost:4200",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"yohisgilgmail.com\",\n  \"platform\": \"Rewards_USA\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\",\n  \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\" \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/forgot-password",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"forgot-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Forgot Password attribute name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "origin",
										"value": "http://localhost:4200",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"yohisgil@gmail.com\",\n  \"platform\": \"122121\",\n  \"program\": \"9898989\",\n  \"origin\": \"web\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/forgot-password",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"forgot-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Forgot Password Submit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "origin",
										"value": "http://localhost:4200",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": \"mapazaranzazu@gmail.com\",\n  \"code\": \"863469\",\n  \"program\": \"MyCooler\",\n  \"origin\": \"web\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/forgot-password/submit",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"forgot-password",
										"submit"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PhoneNumber",
					"item": [
						{
							"name": "400_Update PhoneNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"    pm.expect(jsonData.message).to.eql(\"Client not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to 41\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(41);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text",
										"equals": true
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text",
										"equals": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": \"taekwondojitaevillamaria@gmail.com\",\n    \"phoneNumber\": \"+573117366639\",\n    \"platform\":\"Rewards_USA\",\n    \"program\":\"MyCooler\",\n    \"origin\":\"web\",\n    \"agent\":\"PostmanRuntime/8.28.8\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/update/phonenumber",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"update",
										"phonenumber"
									]
								}
							},
							"response": []
						},
						{
							"name": "500_Update PhoneNumber has been already used by another user before",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Internal Server Error\", () => {\r",
											"  pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is equal to 'Error'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Error in update phonenumber in SSO Global\");\r",
											"});\r",
											"\r",
											"pm.test(\"statusCode is equal to '500'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(500);\r",
											"    pm.expect(jsonData.error).to.eql(\"This phone number has been already used by another user before.\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '52'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(52);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text",
										"equals": true
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text",
										"equals": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": \"paula@gmail.com\",\n    \"phoneNumber\": \"+573058979758\",\n    \"platform\":\"Rewards_USA\",\n    \"program\":\"MyCooler\",\n    \"origin\":\"web\",\n    \"agent\":\"PostmanRuntime/8.28.8\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/update/phonenumber",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"update",
										"phonenumber"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Registration Token",
					"item": [
						{
							"name": "200_Save registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T2326\r",
											"\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response, idToken is not empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.idToken).is.not.empty\r",
											"});\r",
											"\r",
											"pm.test(\"Response, expiration is not empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.refreshToken).is.not.empty\r",
											"});\r",
											"\r",
											"pm.test(\"Response, expiration is not empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.accessToken).is.not.empty\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"accessToken\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"accessToken\": { \"type\": \"string\" }, \r",
											"\r",
											"    },\r",
											"    \"required\": [\"accessToken\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": \"test-automation-02@test.com\",\n    \"password\": \"Abcd1234\",\n    \"time_zone\": \"America/Mexico_City\",\n    \"platform\": \"{{platform}}\",\n    \"program\": \"{{program}}\",\n    \"origin\": \"web\",\n    \"agent\": \"PostmanRuntime/8.28.8\",\n    \"registration_token\":\"fkbHdM-7TeWExGyUN7p2MW:APA91bHTZh9a3gAQnO9cKCv6iEMj0xlhZ6kdVS20YkbKh3T3iIKGxaaln1acajIuMAdJRvKNpKQaMKD-ABotiexdfwgKpa1h6uty3oRGVM9kpQQaKEUsgYN_tHfWusJfw9uiYUqR-w38\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/login",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_login not exist client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T2329\r",
											"\r",
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response, status is Error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).is.eql(\"Error\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response, statusCode is 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).is.equal(400)\r",
											"});\r",
											"\r",
											"pm.test(\"Response, apiCode is 40\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).is.equal(40)\r",
											"});\r",
											"\r",
											"pm.test(\"Response, message is 'Client does not exist'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).is.equal(\"Client does not exist\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response, message is 'Client does not exist in Middleware'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).is.equal(\"Client does not exist in Middleware\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" }, \r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": \"notexist@gmail.com\",\n    \"password\": \"Modelo2022\",\n    \"time_zone\": \"America/Mexico_City\",\n    \"platform\": \"Rewards_USA\",\n    \"program\": \"MyCooler\",\n    \"origin\": \"web\",\n    \"agent\": \"PostmanRuntime/8.28.8\",\n    \"registration_token\":\"fkbHdM-7TeWExGyUN7p2MW:APA91bHTZh9a3gAQnO9cKCv6iEMj0xlhZ6kdVS20YkbKh3T3iIKGxaaln1acajIuMAdJRvKNpKQaMKD-ABotiexdfwgKpa1h6uty3oRGVM9kpQQaKEUsgYN_tHfWusJfw9uiYUqR-w38\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/login",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_not parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T2330\r",
											"\r",
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response, status is Bad request\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).is.eql(\"Bad request\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response, statusCode is 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).is.equal(400)\r",
											"});\r",
											"\r",
											"pm.test(\"Response, apicode is 40\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).is.equal(40)\r",
											"});\r",
											"\r",
											"pm.test(\"Response, message is 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).is.equal(\"Invalid schema\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response, message is 'instance requires property \\\"platform\\'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error[0]).contain(\"instance requires property\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" }, \r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": \"notexist@gmail.com\",\n    \"password\": \"Modelo2022\",\n    \"time_zone\": \"America/Mexico_City\",\n    \"program\": \"MyCooler\",\n    \"origin\": \"web\",\n    \"agent\": \"PostmanRuntime/8.28.8\",\n    \"registration_token\":\"fkbHdM-7TeWExGyUN7p2MW:APA91bHTZh9a3gAQnO9cKCv6iEMj0xlhZ6kdVS20YkbKh3T3iIKGxaaln1acajIuMAdJRvKNpKQaMKD-ABotiexdfwgKpa1h6uty3oRGVM9kpQQaKEUsgYN_tHfWusJfw9uiYUqR-w38\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/login",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "200_login token - invalid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T2331\r",
											"\r",
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response, status is Error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).is.eql(\"Error\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response, statusCode is 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).is.equal(400)\r",
											"});\r",
											"\r",
											"pm.test(\"Response, apiCode is 52\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).is.equal(52)\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response, message is 'Error in login SSO Global'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).is.equal(\"Error in login SSO Global\")\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"error\": { \"type\": \"string\" }, \r",
											"\r",
											"    },\r",
											"    \"required\": [\"error\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": \"test-automation-02@test.com\",\n    \"password\": \"Abc1234\",\n    \"time_zone\": \"America/Mexico_City\",\n    \"platform\": \"{{platform}}\",\n    \"program\": \"{{program}}\",\n    \"origin\": \"web\",\n    \"agent\": \"PostmanRuntime/8.28.8\",\n    \"registration_token\":\"fkbHdM-7TeWExGyUN7p2MW:APA91bHTZh9a3gAQnO9cKCv6iEMj0xlhZ6kdVS20YkbKh3T3iIKGxaaln1acajIuMAdJRvKNpKQaMKD-ABotiexdfwgKpa1h6uty3oRGVM9kpQQaKEUsgYN_tHfWusJfw9uiYUqR-w38\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/login",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Log out Token",
					"item": [
						{
							"name": "Login token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"accessToken\", jsonData.idToken);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"emailToken\", \"automation5518@email.ghostinspector.com\")",
											"pm.globals.set(\"passwordToken\", \"Automation2022\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-sso-region",
										"value": "NorthAmerica",
										"type": "text"
									},
									{
										"key": "x-sso-lang",
										"value": "en",
										"type": "text"
									},
									{
										"key": "x-sso-comname",
										"value": "MyCooler",
										"type": "text"
									},
									{
										"key": "authorization",
										"value": "APIKEY a4803841-1993-4806-94a0-08885d2fd3e4",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{emailToken}}\",\r\n  \"password\": \"{{passwordToken}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://uzp4m061bh.execute-api.us-east-1.amazonaws.com/preprod/user/login",
									"protocol": "https",
									"host": [
										"uzp4m061bh",
										"execute-api",
										"us-east-1",
										"amazonaws",
										"com"
									],
									"path": [
										"preprod",
										"user",
										"login"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Logout delete token success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T2320\r",
											"\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"statusCode attribute is equal to '200'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '100'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(100);\r",
											"});\r",
											"\r",
											"pm.test(\"message attribute is equal to 'Successful operation'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Successful operation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"    pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"apiCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"var token = pm.environment.get(\"accessToken\")\r",
											"var platform = pm.environment.get(\"createPlatform\")\r",
											"var program = pm.environment.get(\"program\")\r",
											"var loginToken = pm.variables.get(\"registrationToken\")\r",
											"var url = pm.environment.get(\"urlApiAbi\")\r",
											"\r",
											"var logOutToken = {\r",
											"    url: url + '/auth/logout',\r",
											"    headers: {\r",
											"        'token': token,\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    method: 'POST',\r",
											"    body: JSON.stringify({\r",
											"        \"platform\": platform,\r",
											"        \"program\": program,\r",
											"        \"origin\": \"web\",\r",
											"        \"agent\": \"PostmanRuntime/8.28.8\",\r",
											"        \"registration_token\": loginToken\r",
											"    })\r",
											"};\r",
											"\r",
											"pm.sendRequest(logOutToken, (error, response) => {\r",
											"    if (error) { console.log(error) }\r",
											"    pm.test(\"Validate login tokean was deleted'\", function () {\r",
											"        pm.expect(response.json().message).to.eql(\"Client not found\")\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//You should execute login SSO API before",
											"",
											"pm.variables.set(\"registrationToken\", \"testM-7TeWExGyUN7p2MW:APA91bHTZh9a3gAQnO9cKCv6iEMj0xlhZ6kdVS20YkbKh3T3iIKGxaaln1acajIuMAdJRvKNpKQaMKD-ABotiexdfwgKpa1h6uty3oRGVM9kpQQaKEUsgYN_tHfWusJfw9uiYUqR-w38\" + _.random(1, 1000))",
											"",
											"var url = pm.environment.get(\"urlApiAbi\")",
											"var token = pm.environment.get(\"token\")",
											"var key = pm.environment.get(\"key\")",
											"var platform = pm.environment.get(\"createPlatform\")",
											"var program = pm.environment.get(\"program\")",
											"var email = pm.globals.get(\"emailToken\")",
											"var password = pm.globals.get(\"passwordToken\")",
											"var loginToken = pm.variables.get(\"registrationToken\")",
											"",
											"var registrationToken = {",
											"    url: url + '/auth/login',",
											"    headers: {",
											"        'token': token,",
											"        'key': key,",
											"        'Content-Type': 'application/json',",
											"",
											"    },",
											"    method: 'POST',",
											"    body: JSON.stringify({",
											"        \"user\": email,",
											"        \"password\": password,",
											"        \"time_zone\": \"America/Mexico_City\",",
											"        \"platform\": platform,",
											"        \"program\": program,",
											"        \"origin\": \"web\",",
											"        \"agent\": \"PostmanRuntime/8.28.8\",",
											"        \"registration_token\": loginToken",
											"    })",
											"};",
											"",
											"    pm.sendRequest(registrationToken, (error, response) => {",
											"        if (error) { console.log(error) }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{accessToken}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"platform\": \"{{platform}}\",\n    \"program\": \"{{program}}\",\n    \"origin\": \"web\",\n    \"agent\": \"PostmanRuntime/8.28.8\",\n    \"registration_token\":\"{{registrationToken}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/logout",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Registration token not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T2322\r",
											"\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"statusCode attribute is equal to '200'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '100'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(100);\r",
											"});\r",
											"\r",
											"pm.test(\"message attribute is equal to 'Regitration token not found'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Regitration token not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"    pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"apiCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//You should execute login SSO API before"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{accessToken}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"platform\": \"{{platform}}\",\n    \"program\": \"{{program}}\",\n    \"origin\": \"web\",\n    \"agent\": \"PostmanRuntime/8.28.8\",\n    \"registration_token\":\"registration token not found\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/logout",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Delete token - Invalid Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T2324\r",
											"\r",
											"pm.test(\"Status code is 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"});\r",
											"\r",
											"pm.test(\"statusCode attribute is equal to '400'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"message attribute is equal to 'Instance requires property'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error[0]).to.eql(\"instance requires property \\\"program\\\"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"    pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"apicode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"var token = pm.environment.get(\"accessToken\")\r",
											"var platform = pm.environment.get(\"createPlatform\")\r",
											"var program = pm.environment.get(\"program\")\r",
											"var loginToken = pm.variables.get(\"registrationToken\")\r",
											"var url = pm.environment.get(\"urlApiAbi\")\r",
											"\r",
											"var logOutToken = {\r",
											"    url: url + '/auth/logout',\r",
											"    headers: {\r",
											"        'token': token,\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    method: 'POST',\r",
											"    body: JSON.stringify({\r",
											"        \"platform\": platform,\r",
											"        \"program\": program,\r",
											"        \"origin\": \"web\",\r",
											"        \"agent\": \"PostmanRuntime/8.28.8\",\r",
											"        \"registration_token\": loginToken\r",
											"    })\r",
											"};\r",
											"\r",
											"pm.sendRequest(logOutToken, (error, response) => {\r",
											"    if (error) { console.log(error) }\r",
											"    pm.test(\"Validate login tokean was deleted'\", function () {\r",
											"        pm.expect(response.json().message).to.eql(\"Client not found\")\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//You should execute login SSO API before",
											"",
											"pm.variables.set(\"registrationToken\", \"testM-7TeWExGyUN7p2MW:APA91bHTZh9a3gAQnO9cKCv6iEMj0xlhZ6kdVS20YkbKh3T3iIKGxaaln1acajIuMAdJRvKNpKQaMKD-ABotiexdfwgKpa1h6uty3oRGVM9kpQQaKEUsgYN_tHfWusJfw9uiYUqR-w38\" + _.random(1, 1000))",
											"",
											"var url = pm.environment.get(\"urlApiAbi\")",
											"var token = pm.environment.get(\"token\")",
											"var key = pm.environment.get(\"key\")",
											"var platform = pm.environment.get(\"createPlatform\")",
											"var program = pm.environment.get(\"program\")",
											"var email = pm.globals.get(\"emailToken\")",
											"var password = pm.globals.get(\"passwordToken\")",
											"var loginToken = pm.variables.get(\"registrationToken\")",
											"",
											"var registrationToken = {",
											"    url: url + '/auth/login',",
											"    headers: {",
											"        'token': token,",
											"        'key': key,",
											"        'Content-Type': 'application/json',",
											"",
											"    },",
											"    method: 'POST',",
											"    body: JSON.stringify({",
											"        \"user\": email,",
											"        \"password\": password,",
											"        \"time_zone\": \"America/Mexico_City\",",
											"        \"platform\": platform,",
											"        \"program\": program,",
											"        \"origin\": \"web\",",
											"        \"agent\": \"PostmanRuntime/8.28.8\",",
											"        \"registration_token\": loginToken",
											"    })",
											"};",
											"",
											"    pm.sendRequest(registrationToken, (error, response) => {",
											"        if (error) { console.log(error) }",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{accessToken}}",
										"type": "text"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"platform\": \"{{platform}}\",\n    \"origin\": \"web\",\n    \"agent\": \"PostmanRuntime/8.28.8\",\n    \"registration_token\":\"{{registrationToken}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/logout",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Social Media Login",
					"item": [
						{
							"name": "200_SSO_Identity_Providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name OK\", () => {",
											"  pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"apiCode attribute is equal to '100'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.apiCode).to.eql(100);",
											"});",
											"",
											"pm.test(\"Message attribute is equal to 'Identity providers successfully retrieved'\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Identity providers successfully retrieved\");",
											"});",
											"",
											"pm.test(\"Status attribute is equal to 'success' and statusCode is equal to '200'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"    pm.expect(jsonData.statusCode).to.eql(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data type of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.message).to.be.a(\"string\");",
											"  pm.expect(jsonData.apiCode).to.be.a(\"number\");",
											"  pm.expect(jsonData.data).to.be.an(\"array\");",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"status\");",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"  pm.expect(pm.response.text()).to.include(\"apiCode\");",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"  pm.expect(pm.response.text()).to.include(\"data\");",
											"});",
											"",
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"statusCode\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"apiCode\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"status\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"message\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"data\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"name\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"url\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"image\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"id\",",
											"            \"name\",",
											"            \"url\",",
											"            \"image\"",
											"          ]",
											"        },",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"name\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"url\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"image\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"id\",",
											"            \"name\",",
											"            \"url\",",
											"            \"image\"",
											"          ]",
											"        },",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"name\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"url\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"image\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"id\",",
											"            \"name\",",
											"            \"url\",",
											"            \"image\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"statusCode\",",
											"    \"apiCode\",",
											"    \"status\",",
											"    \"message\",",
											"    \"data\"",
											"  ]",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlApiAbi}}/auth/identity-providers?platform={{createPlatform}}&program={{program}}&redirect_uri=http://localhost:3000/login",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"identity-providers"
									],
									"query": [
										{
											"key": "platform",
											"value": "{{createPlatform}}"
										},
										{
											"key": "program",
											"value": "{{program}}"
										},
										{
											"key": "redirect_uri",
											"value": "http://localhost:3000/login"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_SSO_Identity_Providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name Bad Request\", () => {",
											"  pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"apiCode attribute is equal to '40'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.apiCode).to.eql(40);",
											"});",
											"",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", () => {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");",
											"});",
											"",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");",
											"    pm.expect(jsonData.statusCode).to.eql(400);",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"status\");",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"  pm.expect(pm.response.text()).to.include(\"apiCode\");",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"  pm.expect(pm.response.text()).to.include(\"error\");",
											"});",
											"",
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"statusCode\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"apiCode\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"status\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"message\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"error\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"string\"",
											"        },",
											"        {",
											"          \"type\": \"string\"",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"statusCode\",",
											"    \"apiCode\",",
											"    \"status\",",
											"    \"message\",",
											"    \"error\"",
											"  ]",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "origin",
										"value": "http://localhost:4200"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/auth/identity-providers?platform={{createPlatform}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"identity-providers"
									],
									"query": [
										{
											"key": "platform",
											"value": "{{createPlatform}}"
										},
										{
											"key": "program",
											"value": "MyCooler",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "500_Social Media Schema Validation_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is '500 Internal Server Error'\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"StatusCode is equal to '500' and apiCode is equal to '52'\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(500);\r",
											"    pm.expect(jsonData.apiCode).to.eql(52);\r",
											"});\r",
											"\r",
											"pm.test(\"Status name is 'Error' a validate variable type message\",() => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.message).to.be.a(\"string\")\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Json error\",() => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.error.code).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error.message).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.error.name).to.be.a(\"string\");   \r",
											"});\r",
											"\r",
											"pm.test(\"existing_user is a boolean and messageCode is a '40001'\",()=> {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.existing_user).to.be.false\r",
											"    pm.expect(jsonData.messageCode).to.eql(40001);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"statusCode\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"apiCode\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"code\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"message\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"code\",\r",
											"        \"message\",\r",
											"        \"name\"\r",
											"      ]\r",
											"    },\r",
											"    \"existing_user\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"messageCode\": {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"status\",\r",
											"    \"statusCode\",\r",
											"    \"apiCode\",\r",
											"    \"message\",\r",
											"    \"error\",\r",
											"    \"existing_user\",\r",
											"    \"messageCode\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "eyJraWQiOiJ5VUNzXC90cmFmUXJqdFJjRUE1eks4R0dtU2FiT0lGWWVVbWFqb1dKUG5xMD0iLCJhbGciOiJSUzI1NiJ9.eyJjdXN0b206Y291bnRyeSI6IlVTQSIsInN1YiI6IjcyMjI0NmZjLTUyNWYtNDJiOS04MmNlLWI0Nzg1NWE0MWFhMiIsImN1c3RvbTphZHZlcnRpc2VtZW50IjoidHJ1ZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJiaXJ0aGRhdGUiOiIxOTg3LTA2LTE5IiwiY3VzdG9tOmxhc3RMb2dpbiI6IjIwMjItMTAtMjUiLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9GNlRLanh1SVMiLCJwaG9uZV9udW1iZXJfdmVyaWZpZWQiOnRydWUsImNvZ25pdG86dXNlcm5hbWUiOiJqemFwYXRhMTI5X2dtYWlsLmNvbSIsIm9yaWdpbl9qdGkiOiIxZGVkNGRhNC1mYjgyLTRjOTAtYTcwZS1lNGVlMzNmOGZhYzUiLCJjdXN0b206dGVybXNBbmRDb25kaXRpb25zIjoiW3tcIk15Q29vbGVyXCI6dHJ1ZX1dIiwiYXVkIjoiNDFwczJua2U5bDY0cjRwaWZmYzBxMG0ycG0iLCJldmVudF9pZCI6IjY3YjEyMjNlLWIwN2EtNDBmZi1hOGM5LTFlYTkwN2VkYzljMSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjY2NzE3NzcwLCJuYW1lIjoiSnVhbiBQYWJsbyIsImN1c3RvbTpvcmlnaW4iOiJHbG9iYWxTU08iLCJwaG9uZV9udW1iZXIiOiIrNTI5OTk5Njk3MDM4IiwiZXhwIjoxNjY2NzE4MzcwLCJpYXQiOjE2NjY3MTc3NzAsImZhbWlseV9uYW1lIjoiWmFwYXRhIiwianRpIjoiOTU1YTBiYTktZTk4YS00MzU4LThiMTQtYTFkYmY2Y2UzOThiIiwiZW1haWwiOiJqemFwYXRhMTI5QGdtYWlsLmNvbSJ9.lgLkUhPvWs7x5M0Q7UyJHjF_G_flx3dL54xMeLOb0U6v433w7KAFt0GbUR1fTufKlor-_A2gXXkvsJZXT9LbTziemV-JpClObEheOvNz98Wc-Tx6eYO2pOG74ALybxAAsUkHdzPSY9WGjhG6jr2cr1Dd_vR7nHLkm1s3aCcub-p4YH1BAmKwqj98gNHOEv4XVOouimwaZoUO5sqoY5V3dLCCUDVChDObRrHoPXUjuYMd2LJ-nxzR6bFJBtE160Q6oN8TL1KLrDKzkOcMwPAba5ZLPMj1FovBVQmmxDAXWoOgRdpdR4NTbExBzvOTrHpHA4LkzIohCLItaWgWkS1vcg"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/auth/social-media/schema/validation?platform={{createPlatform}}&program={{program}}&social_media=Google",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"social-media",
										"schema",
										"validation"
									],
									"query": [
										{
											"key": "platform",
											"value": "{{createPlatform}}"
										},
										{
											"key": "program",
											"value": "{{program}}"
										},
										{
											"key": "social_media",
											"value": "Google"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Social Media Validation_Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"existing_user is a boolean and messageCode is a '40001'\",()=> {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.existing_user).to.be.false\r",
											"    pm.expect(jsonData.messageCode).to.eql(40001);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"error\");\r",
											"  pm.expect(pm.response.text()).to.include(\"existing_user\");\r",
											"  pm.expect(pm.response.text()).to.include(\"messageCode\");\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"statusCode\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"apicode\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"existing_user\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"messageCode\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"statusCode\",\r",
											"    \"status\",\r",
											"    \"message\",\r",
											"    \"apicode\",\r",
											"    \"existing_user\",\r",
											"    \"messageCode\",\r",
											"    \"error\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": ""
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/auth/social-media/validation?platform={{createPlatform}}&program={{program}}&social_media=Google",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"social-media",
										"validation"
									],
									"query": [
										{
											"key": "platform",
											"value": "{{createPlatform}}"
										},
										{
											"key": "program",
											"value": "{{program}}"
										},
										{
											"key": "social_media",
											"value": "Google"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Log Out_Non-existing user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Error'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Client not found' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Client not found\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"statusCode\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"apiCode\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"messageCode\": {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"status\",\r",
											"    \"statusCode\",\r",
											"    \"apiCode\",\r",
											"    \"message\",\r",
											"    \"messageCode\"\r",
											"  ]\r",
											"};"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{accessToken}}"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"platform\": \"{{createPlatform}}\",\n    \"program\": \"{{program}}\",\n    \"origin\": \"web\",\n    \"agent\": \"PostmanRuntime/8.28.8\",\n    \"refresh_token\": \"eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.s0r5BCPjuyEtnAqntijkzdb03Qkn5PlLrFXhMx1AlxJywEc69KQvFNNVEqHEtbORfUfTrthSxn-3u7SxlmH-SW_fvGnRrUvlTQJ3hSJ0QYYkKZ4gr6OlvlI3kLZwBWdEGHIn5b7eLekI-U9Eq3GsO638OsjuDuecZaJRdc339NN_9SvzDbDwZIYEuXInNLDL88zkCWJ2L7mLctrDf52qXwyAtfnsioIPoFBvDqVZCVGo5bAogcTnyFBx0AJ8UAGPpHGS-pGr0Fy16t9IKFVNN-P1f5b3g0cMjXCsNAybxeW6e7UAKB7C629qN_mm4_nxjgaiFhJ94Hs2hg5rZvmZ3A.pKPmmGdl8g2haG7X.zv1bBEM8xcR8m_X-6RIrumq9UbLUS2f5AUrXIJKcOgHmOwAZoL5lFfGysbMA0EDkXRh5-YYRJ8OfcJihbso5mTF3PB3Rgbd1dX21pjc4mnX2Z5HhkfMylgOQqxU9WsU6Rexv95lwDHYqLAoVpYYBZLP5gYD-ELmIpLAzqEuv-7Ddnv92TVqnHnMPmO-sNG6OvBjO-2rg_6tz03IdLJTUP30AGeah1Id4_ZWPmyw96wnocCyDfNjSBdpdkNnLDiM16r407Atb4LnAtTqR93005Yyiwg-aNniwX0Vw4uV511-Z2LNEJA0OQCFO9z5H6toh1r9hrPxuSsG8iABcgCcYvc7LNTEMTGg848RP5kEFdZEVtf5TmNAqnB1zoxYc5G-XxaJ9URBb4D8nRIsOyxTXEx7JzfHv_J3q3J8NWt5-r6_ibxwpyquzQN2PZYVFpzk7Pp8FDvqFEy2TJNiwWw3Z6teh1mbEV0FwycfohaNnSsAJEZX0C8YyEZf51Z3_oNRAaYUuJpWwwMXZEDjIEQ-VEKNQ_Isph-hjoK4Tf5FIsYcFArCybN6FrP3eu94xTdCLWlWFE_AWeET7n8-ybxh6k5u114_appEUMRW6h_zYL4TIwC7ppUa55FpEQgmxYQ7LjvfkgtdYIcGBBZ4_Bx3NP-Qo6ksp_NhxEMeZ0XM0v9Tlp_OqHZYvfUftpADJoPo7R0LG3AQ91lzrHf5FDNKUBwldex8DKNTdkgf6lm769f-nvRd1lUyxq1j67YILG3-jAp6Z0QfwWiwA6IKk6IqkJ0kcMosSkT2b3z_G1FxWohHwgEBvRomChMIbxv8gC6tQiKKqjdsWsLDmbC3ERdhjkQYRZ5KUio8IRTHMy3ztIzxrqs012kGZ6cL71V1jRnwHP1Ae4d7Z0cJammE3IRosrzLEHoaV13WLfQoIQLeKV7z2mGu7xqXoacpSGbZqpIt_hdzloyYE2uP1ITJIOl6rurfuOMdlLi61OK0HkG38nl3QiIYU_l42QDazcxaMeFrPhDkupeyu-Zon6dNpEyY8jHeZ_8jR9RUvVHMLREWF_iao5rctxWHtma2bT65D-h6I5zffbG5z9sikBXcJIBvQXGVGl9Iu6wYKGwkXFPBHPMO89U2oSYzy7l-F6sOMOlpyB3OFBs18kwX-lB28p4acvXS273SE669bg7qSixzs5CMBUrQMMNzAj6go-_QhspcT66fq9J-gTFKZvFys_m5kosuwwDcRDF7PHWe9ZidxwkxqKqHrnZq1lNMhEmPfR-lZ425XJG3pCutT8QwNuAQCPF6hM74Suw.mZLismD5cemP1FahYDzm7w\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/logout",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Log Out _Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"error is a array and messageCode is a '40001'\",()=> {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.be.a(\"array\")\r",
											"    pm.expect(jsonData.messageCode).to.eql(40001);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"  pm.expect(pm.response.text()).to.include(\"error\");\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"statusCode\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"apicode\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"statusCode\",\r",
											"    \"apicode\",\r",
											"    \"status\",\r",
											"    \"message\",\r",
											"    \"error\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{accessToken}}"
									},
									{
										"key": "key",
										"value": "{{key}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"platform\": \"{{createPlatform}}\",\n    \"program\": \"{{program}}\",\n    \"origin\": \"w\",\n    \"agent\": \"PostmanRuntime/8.28.8\",\n    \"refresh_token\": \"y16t9IKFVNN-P1f5b3g0cMjXCsNAybxeW6e7UAKB7C629qN_mm4_nxjgaiFhJ94Hs2hg5rZvmZ3A.pKPmmGdl8g2haG7X.zv1bBEM8xcR8m_X-6RIrumq9UbLUS2f5AUrXIJKcOgHmOwAZoL5lFfGysbMA0EDkXRh5-YYRJ8OfcJihbso5mTF3PB3Rgbd1dX21pjc4mnX2Z5HhkfMylgOQqxU9WsU6Rexv95lwDHYqLAoVpYYBZLP5gYD-ELmIpLAzqEuv-7Ddnv92TVqnHnMPmO-sNG6OvBjO-2rg_6tz03IdLJTUP30AGeah1Id4_ZWPmyw96wnocCyDfNjSBdpdkNnLDiM16r407Atb4LnAtTqR93005Yyiwg-aNniwX0Vw4uV511-Z2LNEJA0OQCFO9z5H6toh1r9hrPxuSsG8iABcgCcYvc7LNTEMTGg848RP5kEFdZEVtf5TmNAqnB1zoxYc5G-XxaJ9URBb4D8nRIsOyxTXEx7JzfHv_J3q3J8NWt5-r6_ibxwpyquzQN2PZYVFpzk7Pp8FDvqFEy2TJNiwWw3Z6teh1mbEV0FwycfohaNnSsAJEZX0C8YyEZf51Z3_oNRAaYUuJpWwwMXZEDjIEQ-VEKNQ_Isph-hjoK4Tf5FIsYcFArCybN6FrP3eu94xTdCLWlWFE_AWeET7n8-ybxh6k5u114_appEUMRW6h_zYL4TIwC7ppUa55FpEQgmxYQ7LjvfkgtdYIcGBBZ4_Bx3NP-Qo6ksp_NhxEMeZ0XM0v9Tlp_OqHZYvfUftpADJoPo7R0LG3AQ91lzrHf5FDNKUBwldex8DKNTdkgf6lm769f-nvRd1lUyxq1j67YILG3-jAp6Z0QfwWiwA6IKk6IqkJ0kcMosSkT2b3z_G1FxWohHwgEBvRomChMIbxv8gC6tQiKKqjdsWsLDmbC3ERdhjkQYRZ5KUio8IRTHMy3ztIzxrqs012kGZ6cL71V1jRnwHP1Ae4d7Z0cJammE3IRosrzLEHoaV13WLfQoIQLeKV7z2mGu7xqXoacpSGbZqpIt_hdzloyYE2uP1ITJIOl6rurfuOMdlLi61OK0HkG38nl3QiIYU_l42QDazcxaMeFrPhDkupeyu-Zon6dNpEyY8jHeZ_8jR9RUvVHMLREWF_iao5rctxWHtma2bT65D-h6I5zffbG5z9sikBXcJIBvQXGVGl9Iu6wYKGwkXFPBHPMO89U2oSYzy7l-F6sOMOlpyB3OFBs18kwX-lB28p4acvXS273SE669bg7qSixzs5CMBUrQMMNzAj6go-_QhspcT66fq9J-gTFKZvFys_m5kosuwwDcRDF7PHWe9ZidxwkxqKqHrnZq1lNMhEmPfR-lZ425XJG3pCutT8QwNuAQCPF6hM74Suw.mZLismD5cemP1FahYDzm7w\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/auth/logout",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Earn Activities",
			"item": [
				{
					"name": "Referral Code",
					"item": [
						{
							"name": "200_Skin Refer Code successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// BEESRPG-T863 (1.0)\r",
											"// BEESRPG-T864 (1.0)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Successful operation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"web\",\n    \"platform\": \"{{platform}}\",\n    \"program\": \"{{program}}\",\n    \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\",\n    \"user\":\"yohisgil@gmail.com\",\n    \"referrer_code\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/code/referral",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"code",
										"referral"
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Skin Refer Code user does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// BEESRPG-T866 (1.0)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Successful operation\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"status\");\r",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"web\",\n    \"platform\": \"{{platform}}\",\n    \"program\": \"{{program}}\",\n    \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\",\n    \"user\":\"yohisgil@gmail.com\",\n    \"referrer_code\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/code/referral",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"code",
										"referral"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Refer your own code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'You can't refer your own code'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"You can't refer your own code\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Error' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"web\",\n    \"platform\": \"{{platform}}\",\n    \"program\": \"{{program}}\",\n    \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\",\n    \"user\":\"yohisgil@gmail.com\",\n    \"referrer_code\": \"JOHANNAG-1212B1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/code/referral",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"code",
										"referral"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Refer Code already used",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// BEESRPG-T865 (1.0)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'The client already referred a code before'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"The client already referred a code before\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Error' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"web\",\n    \"platform\": \"{{platform}}\",\n    \"program\": \"{{program}}\",\n    \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\",\n    \"user\":\"yohisgil@gmail.com\",\n    \"referrer_code\": \"USERA-C29BB9\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/code/referral",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"code",
										"referral"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Refer Code required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T867 (1.0)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Error' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"web\"\n\n  \n  \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/code/referral",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"code",
										"referral"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Refer Code no exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// BEESRPG-T868 (1.0)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Referral code not found'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Referral code not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Error' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"status\": { \"type\": \"string\" }, \r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"web\",\n    \"platform\": \"{{platform}}\",\n    \"program\": \"{{program}}\",\n    \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\",\n    \"user\":\"testtapitrc@gmail.com\",\n    \"referrer_code\": \"JOHANNA\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/code/referral",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"code",
										"referral"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Refer Code Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// BEESRPG-T869 (1.0)\r",
											"\r",
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"web\",\n    \"platform\": \"{{platform}}\",\n    \"program\": \"{{program}}\",\n    \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\",\n    \"user\":\"yohisgil@gmail.com\",\n    \"referrer_code\": \"JOHANNAA-F77F1E\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/code/referral",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"code",
										"referral"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trivias",
					"item": [
						{
							"name": "200_trivia successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1911\r",
											"\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response - status is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response - statusCode is equal to 200\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response - message is equal to 'Query with data'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Query with data\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response - data is not empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '100'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(100);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"    pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"    pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"apiCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/trivia?program={{program}}&platform={{platform}}&type=trivia,triviabatch,survey&user=test.automation.0100@testabi.com",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"trivia"
									],
									"query": [
										{
											"key": "program",
											"value": "{{program}}"
										},
										{
											"key": "platform",
											"value": "{{platform}}"
										},
										{
											"key": "type",
											"value": "trivia,triviabatch,survey"
										},
										{
											"key": "user",
											"value": "test.automation.0100@testabi.com"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_trivia successful user without trivias avalaible",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1912\r",
											"\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response - status is equal to 'Success'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response - statusCode is equal to 200\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response - message is equal to 'Query without data'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Query without data\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response - data is empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).is.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '101'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(101);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"    pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"    pm.expect(pm.response.text()).to.include(\"data\");\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"apiCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/trivia?program={{program}}&platform={{platform}}&type=trivia,triviabatch,survey&user=mmanrique@serempre.com",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"trivia"
									],
									"query": [
										{
											"key": "program",
											"value": "{{program}}"
										},
										{
											"key": "platform",
											"value": "{{platform}}"
										},
										{
											"key": "type",
											"value": "trivia,triviabatch,survey"
										},
										{
											"key": "user",
											"value": "mmanrique@serempre.com"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_trivia User not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-1913\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad Request'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'User does not exist'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"User does not exist\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response - data is empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).is.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"status\");\r",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
											"    pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"apiCode\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/trivia?program={{platform}}&platform={{program}}&type=survey&user=y@gmail.com",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"trivia"
									],
									"query": [
										{
											"key": "program",
											"value": "{{platform}}"
										},
										{
											"key": "platform",
											"value": "{{program}}"
										},
										{
											"key": "type",
											"value": "survey"
										},
										{
											"key": "user",
											"value": "y@gmail.com"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_trivia requerid params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1914\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"statusCode attribute is equal to '400'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error attribute is equal to 'Instance requires property'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.error[0]).to.contains(\"instance requires property\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"message.status\": { \"type\": \"object\" },\r",
											"        \"message.message\": { \"type\": \"object\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/trivia?program={{program}}&type=survey&user=yohisgil@gmail.com",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"trivia"
									],
									"query": [
										{
											"key": "program",
											"value": "{{program}}"
										},
										{
											"key": "platform",
											"value": "{{platform}}",
											"disabled": true
										},
										{
											"key": "type",
											"value": "survey"
										},
										{
											"key": "user",
											"value": "yohisgil@gmail.com"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401_trivia successful Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1915\r",
											"\r",
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "cualquiercosa",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/trivia?program={{program}}&platform={{platform}}&type=survey&user=yohisgil@gmail.com",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"trivia"
									],
									"query": [
										{
											"key": "program",
											"value": "{{program}}"
										},
										{
											"key": "platform",
											"value": "{{platform}}"
										},
										{
											"key": "type",
											"value": "survey"
										},
										{
											"key": "user",
											"value": "yohisgil@gmail.com"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Promocodes",
					"item": [
						{
							"name": "400_promocodes no available cap",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'code is already claimed'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.message).to.eql(\"no available cap\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Error' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"message.status\": { \"type\": \"object\" }, \r",
											"        \"message.message\": { \"type\": \"object\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform\": \"{{platform}}\",\r\n    \"program\": \"{{program}}\",\r\n    \"origin\": \"web\",\r\n    \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\",\r\n    \"code\": \"P000CXEBV946ALHJ\", \r\n    \"user\": \"yohisgil@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/promocodes",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"promocodes"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_code is already claimed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T852\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'code is already claimed'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"code is already claimed\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Error' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"message.status\": { \"type\": \"object\" }, \r",
											"        \"message.message\": { \"type\": \"object\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform\": \"{{platform}}\",\r\n    \"program\": \"{{program}}\",\r\n    \"origin\": \"web\",\r\n    \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\",\r\n    \"code\": \"P00060J6342DRZG9\",\r\n    \"user\": \"yohisgil@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/promocodes",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"promocodes"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_code not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T853\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'There is no one active policy'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"There is no one active policy\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Error' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Error\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"message.status\": { \"type\": \"object\" }, \r",
											"        \"message.message\": { \"type\": \"object\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform\": \"{{platform}}\",\r\n    \"program\": \"{{program}}\",\r\n    \"origin\": \"web\",\r\n    \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\",\r\n    \"code\": \"Pruebalunes123\",\r\n    \"user\": \"yohisgil@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/promocodes",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"promocodes"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_code required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Invalid schema'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.message).to.eql(\"Invalid schema\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"message.status\": { \"type\": \"object\" }, \r",
											"        \"message.message\": { \"type\": \"object\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"Pruebalunes123\",\r\n    \"user\": \"yohisgil@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/promocodes",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"promocodes"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "401_promocodes Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "validar",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform\": \"{{platform}}\",\r\n    \"program\": \"{{program}}\",\r\n    \"origin\": \"web\",\r\n    \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\",\r\n    \"code\": \"P00060J634\",\r\n    \"user\": \"yohisgil@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/promocodes",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"promocodes"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Promocode user does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// BEESRPG-T855\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'User not found'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"User not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"data attribute is empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).is.empty\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Bad Request' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad Request\");\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"message.status\": { \"type\": \"object\" }, \r",
											"        \"message.message\": { \"type\": \"object\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform\": \"{{platform}}\",\r\n    \"program\": \"{{program}}\",\r\n    \"origin\": \"web\",\r\n    \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\",\r\n    \"code\": \"P00060J6342DRZG9\",\r\n    \"user\": \"test-noexist@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/promocodes",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"promocodes"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ScanReceipts",
					"item": [
						{
							"name": "200_Scan Receipt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1872",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Status code name Created\", () => {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"Created\");",
											"    pm.expect(jsonData.message).to.eql(\"Successful operation\");",
											"});",
											"",
											"pm.test(\"apicode attribute is equal to '105'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.apiCode).to.eql(105);",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"status\");",
											"    pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"    pm.expect(pm.response.text()).to.include(\"message\");",
											"    pm.expect(pm.response.text()).to.include(\"data\");",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"status\": { \"type\": \"string\" },",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"message\": { \"type\": \"string\" },",
											"        \"data\": { \"type\": \"array\" },",
											"        \"apiCode\": { \"type\": \"number\" }",
											"",
											"    },",
											"    \"required\": [\"status\", \"statusCode\",\"message\", \"data\", \"apiCode\"]",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": \"pruebasmycooler01@gmail.com\",\n    \"platform\": \"{{platform}}\",\n    \"program\":\"{{program}}\",\n    \"origin\":\"web\",\n    \"agent\":\"mozilla\",\n    \"date\": \"2021-10-19\",\n    \"images\":[\n        {\n            \"base64\": \"\",\n            \"extension\": \"jpg\"\n        }\n        \n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/scan/receipts",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"scan",
										"receipts"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Scan Receipt Client does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1873\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'User not found'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.message).to.eql(\"User not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '41'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apiCode).to.eql(41);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Error' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"statusCode\": { \"type\": \"number\" }, \r",
											"        \"message.status\": { \"type\": \"object\" }, \r",
											"        \"message.message\": { \"type\": \"object\" },\r",
											"        \"apiCode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"apiCode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": \"juan129169@gmail.com\",\n    \"platform\": \"{{platform}}\",\n    \"program\":\"{{program}}\",\n    \"origin\":\"web\",\n    \"agent\":\"mozilla\",\n    \"date\": \"2021-08-26\",\n    \"images\":[\n        {\n            \"base64\": \"\",\n            \"extension\": \"png\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/scan/receipts",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"scan",
										"receipts"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Base 64 empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BESSRPG-T1874\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message is equal to 'instance.images[0].base64 does not meet minimum length of 1'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(\"instance.images[0].base64 does not meet minimum length of 1\").to.eql(jsonData.message[0]);\r",
											"});\r",
											"\r",
											"pm.test(\"apicode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.apicode).to.eql(40);\r",
											"});\r",
											"\r",
											"pm.test(\"statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"array\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"statusCode\", \"status\", \"message\", \"apicode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": \"yohisgil@gmail.com\",\n    \"platform\": \"{{platform}}\",\n    \"program\":\"{{program}}\",\n    \"origin\":\"web\",\n    \"agent\":\"mozilla\",\n    \"date\": \"2021-08-26\",\n    \"images\":[\n        {\n            \"base64\": \"\",\n            \"extension\": \"png\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/scan/receipts",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"scan",
										"receipts"
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Scan receipt Required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1875\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message attribute is equal to 'Instance requeres property'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect('instance requires property \"program\"').to.equal(jsonData.message[0]);\r",
											"});\r",
											"\r",
											"pm.test(\"apiCode attribute is equal to '40'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(40).to.eql(jsonData.apicode);\r",
											"});\r",
											"\r",
											"pm.test(\"Status attribute is equal to 'Error' and statusCode is equal to 400\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.statusCode).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"statusCode\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"array\" },\r",
											"        \"apicode\": { \"type\": \"number\" },\r",
											"    },\r",
											"    \"required\": [\"status\", \"statusCode\", \"message\", \"apicode\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": \"mycoolertest@email.ghostinspector.com\",\n    \"platform\": \"{{platform}}\",\n    \"agent\": \"mycoolertest@email.ghostinspector.com\",\n    \"date\": \"2022-04-23\",\n    \"origin\":\"web\",\n    \"images\": [\n        {\n            \"base64\": \"\",\n            \"extension\": \"png\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/scan/receipts",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"scan",
										"receipts"
									]
								}
							},
							"response": []
						},
						{
							"name": "401_Scan Receipt Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1876\r",
											"\r",
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has all properties\", function () {\r",
											"  pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"const schema = { \r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"\r",
											"    },\r",
											"    \"required\": [\"message\"]\r",
											"};\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": \"jzapata129@gmail.com\",\n    \"platform\": \"{{platform}}\",\n    \"program\":\"{{program}}\",\n    \"origin\":\"web\",\n    \"agent\":\"mozilla\",\n    \"date\": \"2021-08-26\",\n    \"images\":[\n        {\n            \"base64\": \"\",\n            \"extension\": \"png\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/earn/actions/scan/receipts",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"actions",
										"scan",
										"receipts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Onboarding Badge",
					"item": [
						{
							"name": "200_Badge save badge status",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/earn/badge/status?platform=Rewards_USA&program=MyCooler&user=areli.globant@globant.com&campaign_id=145",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"badge",
										"status"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "user",
											"value": "areli.globant@globant.com"
										},
										{
											"key": "campaign_id",
											"value": "145"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Badge succesful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name OK\", () => {",
											"  pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"Success\");",
											"    pm.expect(jsonData.message).to.eql(\"Badge Campaign Founded\");",
											"});",
											"",
											"pm.test(\"apicode attribute is equal to '100'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(100);",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"status\");",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"status\": { \"type\": \"string\" }, ",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"apicode\": { \"type\": \"number\" }, ",
											"        \"message\": { \"type\": \"string\" }",
											"    },",
											"    \"required\": [\"status\", \"statusCode\",\"apicode\", \"message\"]",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/earn/badge/challenge?platform=Rewards_USA&program=MyCooler&user=erick.prueba@maildrop.cc&campaign_id=145",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"badge",
										"challenge"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "user",
											"value": "erick.prueba@maildrop.cc"
										},
										{
											"key": "campaign_id",
											"value": "145"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "203_Badge no content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name OK\", () => {",
											"  pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Status attribute is equal to 'Success'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"Success\");",
											"    pm.expect(jsonData.message).to.eql(\"Badge Campaign Founded\");",
											"});",
											"",
											"pm.test(\"apicode attribute is equal to '100'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.apicode).to.eql(100);",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"status\");",
											"  pm.expect(pm.response.text()).to.include(\"statusCode\");",
											"  pm.expect(pm.response.text()).to.include(\"apicode\");",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"status\": { \"type\": \"string\" }, ",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"apicode\": { \"type\": \"number\" }, ",
											"        \"message\": { \"type\": \"string\" }",
											"    },",
											"    \"required\": [\"status\", \"statusCode\",\"apicode\", \"message\"]",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/earn/badge/challenge?platform=Rewards_USA&program=MyCooler&user=areli.rodriguez-ext@ab-inbev.com&campaign_id=145",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"badge",
										"challenge"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "user",
											"value": "areli.rodriguez-ext@ab-inbev.com"
										},
										{
											"key": "campaign_id",
											"value": "145"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Badge isnt a badge campaign",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/earn/badge/challenge?platform=Rewards_USA&program=MyCooler&user=erick.prueba@maildrop.cc&campaign_id=145",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"badge",
										"challenge"
									],
									"query": [
										{
											"key": "platform",
											"value": "Rewards_USA"
										},
										{
											"key": "program",
											"value": "MyCooler"
										},
										{
											"key": "user",
											"value": "erick.prueba@maildrop.cc"
										},
										{
											"key": "campaign_id",
											"value": "145"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Badge by brand",
					"item": [
						{
							"name": "200_Badge_By Brand_Restriction Scan Ticket successful Alabama",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"region = pm.variables.get(\"region\")",
											"pm.variables.set(\"testEmail\", \"pruebasmycooler05@gmail.com\")",
											"email = pm.variables.get(\"testEmail\")",
											"",
											"//Login",
											"const loginRequest = {",
											"    url: 'https://uzp4m061bh.execute-api.us-east-1.amazonaws.com/preprod/user/login',",
											"    header: {",
											"        'x-sso-region': region,",
											"        'x-sso-lang': 'en',",
											"        'x-sso-comname': 'MyCooler',",
											"        'authorization': 'APIKEY a4803841-1993-4806-94a0-08885d2fd3e4',",
											"        'Content-Type': 'application/json'",
											"    },",
											"    method: 'POST',",
											"    body: JSON.stringify({",
											"        \"email\": email,",
											"        \"password\": \"Tv04jdrm\"",
											"    })",
											"};",
											"",
											"pm.sendRequest(loginRequest, (error, response) => {",
											"  if (error) {",
											"    console.log(error);",
											"  }",
											"",
											"  pm.test('response should be okay to process', () => {",
											"    pm.expect(error).to.equal(null);",
											"    pm.expect(response).to.have.property('code', 200);",
											"    pm.expect(response).to.have.property('status', 'OK');",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1098",
											"",
											"pm.test(\"Status is 200 and code name 'OK'\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response - status is: Success\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(\"Success\")",
											"});",
											"",
											"pm.test(\"Response - message is: Badge Campaign Founded\", function () {",
											"    pm.expect(pm.response.json().message).to.eql(\"Badge Campaign Founded\")",
											"});",
											"",
											"pm.test(\"Response - apicode is: 100\", function () {",
											"    pm.expect(pm.response.json().apiCode).to.eql(100)",
											"});",
											"",
											"pm.test(\"Response - does not include Scan Ticket mission\", function () {",
											"    pm.expect(pm.response.text().toLowerCase()).not.includes(\"scan\")",
											"    pm.expect(pm.response.text().toLowerCase()).not.includes(\"tickets\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"status\": { \"type\": \"string\" },",
											"        \"message\": { \"type\": \"string\" },",
											"        \"apiCode\": { \"type\": \"number\" },",
											"        \"data\": { \"type\": \"array\" },",
											"    },",
											"    \"required\": [\"statusCode\", \"status\", \"message\", \"apiCode\", \"data\"]",
											"};",
											"pm.test('Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/earn/badge/challenge/user?platform={{platform}}&program={{program}}&user={{testEmail}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"badge",
										"challenge",
										"user"
									],
									"query": [
										{
											"key": "platform",
											"value": "{{platform}}"
										},
										{
											"key": "program",
											"value": "{{program}}"
										},
										{
											"key": "user",
											"value": "{{testEmail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Badge_By Brand_Restriction Scan Ticket successful New Jersey",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"region = pm.variables.get(\"region\")",
											"pm.variables.set(\"testEmail\", \"lauranet30@hotmail.com\")",
											"email = pm.variables.get(\"testEmail\")",
											"",
											"//Login",
											"const loginRequest = {",
											"    url: 'https://uzp4m061bh.execute-api.us-east-1.amazonaws.com/preprod/user/login',",
											"    header: {",
											"        'x-sso-region': region,",
											"        'x-sso-lang': 'en',",
											"        'x-sso-comname': 'MyCooler',",
											"        'authorization': 'APIKEY a4803841-1993-4806-94a0-08885d2fd3e4',",
											"        'Content-Type': 'application/json'",
											"    },",
											"    method: 'POST',",
											"    body: JSON.stringify({",
											"        \"email\": email,",
											"        \"password\": \"A13579aa\"",
											"    })",
											"};",
											"",
											"pm.sendRequest(loginRequest, (error, response) => {",
											"  if (error) {",
											"    console.log(error);",
											"  }",
											"",
											"  pm.test('response should be okay to process', () => {",
											"    pm.expect(error).to.equal(null);",
											"    pm.expect(response).to.have.property('code', 200);",
											"    pm.expect(response).to.have.property('status', 'OK');",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1099",
											"",
											"pm.test(\"Status is 200 and code name 'OK'\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response - status is: Success\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(\"Success\")",
											"});",
											"",
											"pm.test(\"Response - message is: Badge Campaign Founded\", function () {",
											"    pm.expect(pm.response.json().message).to.eql(\"Badge Campaign Founded\")",
											"});",
											"",
											"pm.test(\"Response - apicode is: 100\", function () {",
											"    pm.expect(pm.response.json().apiCode).to.eql(100)",
											"});",
											"",
											"pm.test(\"Response - does not include Scan Ticket mission\", function () {",
											"    pm.expect(pm.response.text().toLowerCase()).not.includes(\"scan\")",
											"    pm.expect(pm.response.text().toLowerCase()).not.includes(\"tickets\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"status\": { \"type\": \"string\" },",
											"        \"message\": { \"type\": \"string\" },",
											"        \"apiCode\": { \"type\": \"number\" },",
											"        \"data\": { \"type\": \"array\" },",
											"    },",
											"    \"required\": [\"statusCode\", \"status\", \"message\", \"apiCode\", \"data\"]",
											"};",
											"pm.test('Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/earn/badge/challenge/user?platform={{platform}}&program={{program}}&user={{testEmail}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"badge",
										"challenge",
										"user"
									],
									"query": [
										{
											"key": "platform",
											"value": "{{platform}}"
										},
										{
											"key": "program",
											"value": "{{program}}"
										},
										{
											"key": "user",
											"value": "{{testEmail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Badge_By Brand_Restriction Scan Ticket successful Utah",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"region = pm.variables.get(\"region\")",
											"pm.variables.set(\"testEmail\", \"pruebasmycooler08@gmail.com\")",
											"email = pm.variables.get(\"testEmail\")",
											"",
											"//Login",
											"const loginRequest = {",
											"    url: 'https://uzp4m061bh.execute-api.us-east-1.amazonaws.com/preprod/user/login',",
											"    header: {",
											"        'x-sso-region': region,",
											"        'x-sso-lang': 'en',",
											"        'x-sso-comname': 'MyCooler',",
											"        'authorization': 'APIKEY a4803841-1993-4806-94a0-08885d2fd3e4',",
											"        'Content-Type': 'application/json'",
											"    },",
											"    method: 'POST',",
											"    body: JSON.stringify({",
											"        \"email\": email,",
											"        \"password\": \"Tv06jdrm\"",
											"    })",
											"};",
											"",
											"pm.sendRequest(loginRequest, (error, response) => {",
											"  if (error) {",
											"    console.log(error);",
											"  }",
											"",
											"  pm.test('response should be okay to process', () => {",
											"    pm.expect(error).to.equal(null);",
											"    pm.expect(response).to.have.property('code', 200);",
											"    pm.expect(response).to.have.property('status', 'OK');",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1100",
											"",
											"pm.test(\"Status is 200 and code name 'OK'\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response - status is: Success\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(\"Success\")",
											"});",
											"",
											"pm.test(\"Response - message is: Badge Campaign Founded\", function () {",
											"    pm.expect(pm.response.json().message).to.eql(\"Badge Campaign Founded\")",
											"});",
											"",
											"pm.test(\"Response - apicode is: 100\", function () {",
											"    pm.expect(pm.response.json().apiCode).to.eql(100)",
											"});",
											"",
											"pm.test(\"Response - does not include Scan Ticket mission\", function () {",
											"    pm.expect(pm.response.text().toLowerCase()).not.includes(\"scan\")",
											"    pm.expect(pm.response.text().toLowerCase()).not.includes(\"tickets\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"status\": { \"type\": \"string\" },",
											"        \"message\": { \"type\": \"string\" },",
											"        \"apiCode\": { \"type\": \"number\" },",
											"        \"data\": { \"type\": \"array\" },",
											"    },",
											"    \"required\": [\"statusCode\", \"status\", \"message\", \"apiCode\", \"data\"]",
											"};",
											"pm.test('Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/earn/badge/challenge/user?platform={{platform}}&program={{program}}&user={{testEmail}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"badge",
										"challenge",
										"user"
									],
									"query": [
										{
											"key": "platform",
											"value": "{{platform}}"
										},
										{
											"key": "program",
											"value": "{{program}}"
										},
										{
											"key": "user",
											"value": "{{testEmail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Badge_By Brand_Restriction Scan Ticket successful Hawai",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"region = pm.variables.get(\"region\")",
											"pm.variables.set(\"testEmail\", \"pruebasmycooler07@gmail.com\")",
											"email = pm.variables.get(\"testEmail\")",
											"",
											"//Login",
											"const loginRequest = {",
											"    url: 'https://uzp4m061bh.execute-api.us-east-1.amazonaws.com/preprod/user/login',",
											"    header: {",
											"        'x-sso-region': region,",
											"        'x-sso-lang': 'en',",
											"        'x-sso-comname': 'MyCooler',",
											"        'authorization': 'APIKEY a4803841-1993-4806-94a0-08885d2fd3e4',",
											"        'Content-Type': 'application/json'",
											"    },",
											"    method: 'POST',",
											"    body: JSON.stringify({",
											"        \"email\": email,",
											"        \"password\": \"Tv06jdrm\"",
											"    })",
											"};",
											"",
											"pm.sendRequest(loginRequest, (error, response) => {",
											"  if (error) {",
											"    console.log(error);",
											"  }",
											"",
											"  pm.test('response should be okay to process', () => {",
											"    pm.expect(error).to.equal(null);",
											"    pm.expect(response).to.have.property('code', 200);",
											"    pm.expect(response).to.have.property('status', 'OK');",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1101",
											"",
											"pm.test(\"Status is 200 and code name 'OK'\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response - status is: Success\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(\"Success\")",
											"});",
											"",
											"pm.test(\"Response - message is: Badge Campaign Founded\", function () {",
											"    pm.expect(pm.response.json().message).to.eql(\"Badge Campaign Founded\")",
											"});",
											"",
											"pm.test(\"Response - apicode is: 100\", function () {",
											"    pm.expect(pm.response.json().apiCode).to.eql(100)",
											"});",
											"",
											"pm.test(\"Response - does not include Scan Ticket mission\", function () {",
											"    pm.expect(pm.response.text().toLowerCase()).not.includes(\"scan\")",
											"    pm.expect(pm.response.text().toLowerCase()).not.includes(\"tickets\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"status\": { \"type\": \"string\" },",
											"        \"message\": { \"type\": \"string\" },",
											"        \"apiCode\": { \"type\": \"number\" },",
											"        \"data\": { \"type\": \"array\" },",
											"    },",
											"    \"required\": [\"statusCode\", \"status\", \"message\", \"apiCode\", \"data\"]",
											"};",
											"pm.test('Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/earn/badge/challenge/user?platform={{platform}}&program={{program}}&user={{testEmail}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"badge",
										"challenge",
										"user"
									],
									"query": [
										{
											"key": "platform",
											"value": "{{platform}}"
										},
										{
											"key": "program",
											"value": "{{program}}"
										},
										{
											"key": "user",
											"value": "{{testEmail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Badge_By Brand_Restriction states Successful California",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"region = pm.variables.get(\"region\")",
											"pm.variables.set(\"testEmail\", \"pruebasmycooler04@gmail.com\")",
											"email = pm.variables.get(\"testEmail\")",
											"",
											"//Login",
											"const loginRequest = {",
											"    url: 'https://uzp4m061bh.execute-api.us-east-1.amazonaws.com/preprod/user/login',",
											"    header: {",
											"        'x-sso-region': region,",
											"        'x-sso-lang': 'en',",
											"        'x-sso-comname': 'MyCooler',",
											"        'authorization': 'APIKEY a4803841-1993-4806-94a0-08885d2fd3e4',",
											"        'Content-Type': 'application/json'",
											"    },",
											"    method: 'POST',",
											"    body: JSON.stringify({",
											"        \"email\": email,",
											"        \"password\": \"Tv04jdrm\"",
											"    })",
											"};",
											"",
											"pm.sendRequest(loginRequest, (error, response) => {",
											"  if (error) {",
											"    console.log(error);",
											"  }",
											"",
											"  pm.test('response should be okay to process', () => {",
											"    pm.expect(error).to.equal(null);",
											"    pm.expect(response).to.have.property('code', 200);",
											"    pm.expect(response).to.have.property('status', 'OK');",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T415",
											"",
											"pm.test(\"Status is 200 and code name 'OK'\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response - status is: Success\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(\"Success\")",
											"});",
											"",
											"pm.test(\"Response - message is: Badge Campaign Founded\", function () {",
											"    pm.expect(pm.response.json().message).to.eql(\"Badge Campaign Founded\")",
											"});",
											"",
											"pm.test(\"Response - apicode is: 100\", function () {",
											"    pm.expect(pm.response.json().apiCode).to.eql(100)",
											"});",
											"",
											"pm.test(\"Response does not have missions\", function () {",
											"    pm.expect(pm.response.text().toLowerCase()).not.includes(\"missions\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"status\": { \"type\": \"string\" },",
											"        \"message\": { \"type\": \"string\" },",
											"        \"apiCode\": { \"type\": \"number\" },",
											"        \"data\": { \"type\": \"array\" },",
											"    },",
											"    \"required\": [\"statusCode\", \"status\", \"message\", \"apiCode\", \"data\"]",
											"};",
											"pm.test('Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/earn/badge/challenge/user?platform={{platform}}&program={{program}}&user={{testEmail}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"badge",
										"challenge",
										"user"
									],
									"query": [
										{
											"key": "platform",
											"value": "{{platform}}"
										},
										{
											"key": "program",
											"value": "{{program}}"
										},
										{
											"key": "user",
											"value": "{{testEmail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200_Badge_By Brand_Restriction states Successful Texas",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"region = pm.variables.get(\"region\")",
											"pm.variables.set(\"testEmail\", \"pruebasmycooler01@gmail.com\")",
											"email = pm.variables.get(\"testEmail\")",
											"",
											"//Login",
											"const loginRequest = {",
											"    url: 'https://uzp4m061bh.execute-api.us-east-1.amazonaws.com/preprod/user/login',",
											"    header: {",
											"        'x-sso-region': region,",
											"        'x-sso-lang': 'en',",
											"        'x-sso-comname': 'MyCooler',",
											"        'authorization': 'APIKEY a4803841-1993-4806-94a0-08885d2fd3e4',",
											"        'Content-Type': 'application/json'",
											"    },",
											"    method: 'POST',",
											"    body: JSON.stringify({",
											"        \"email\": email,",
											"        \"password\": \"Tv6jdr27\"",
											"    })",
											"};",
											"",
											"pm.sendRequest(loginRequest, (error, response) => {",
											"  if (error) {",
											"    console.log(error);",
											"  }",
											"",
											"  pm.test('response should be okay to process', () => {",
											"    pm.expect(error).to.equal(null);",
											"    pm.expect(response).to.have.property('code', 200);",
											"    pm.expect(response).to.have.property('status', 'OK');",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T416",
											"",
											"pm.test(\"Status is 200 and code name 'OK'\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response - status is: Success\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(\"Success\")",
											"});",
											"",
											"pm.test(\"Response - message is: Badge Campaign Founded\", function () {",
											"    pm.expect(pm.response.json().message).to.eql(\"Badge Campaign Founded\")",
											"});",
											"",
											"pm.test(\"Response - apicode is: 100\", function () {",
											"    pm.expect(pm.response.json().apiCode).to.eql(100)",
											"});",
											"",
											"pm.test(\"Response does not have missions\", function () {",
											"    pm.expect(pm.response.text().toLowerCase()).not.includes(\"missions\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"status\": { \"type\": \"string\" },",
											"        \"message\": { \"type\": \"string\" },",
											"        \"apiCode\": { \"type\": \"number\" },",
											"        \"data\": { \"type\": \"array\" },",
											"    },",
											"    \"required\": [\"statusCode\", \"status\", \"message\", \"apiCode\", \"data\"]",
											"};",
											"pm.test('Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/earn/badge/challenge/user?platform={{platform}}&program={{program}}&user={{testEmail}}",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"badge",
										"challenge",
										"user"
									],
									"query": [
										{
											"key": "platform",
											"value": "{{platform}}"
										},
										{
											"key": "program",
											"value": "{{program}}"
										},
										{
											"key": "user",
											"value": "{{testEmail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Badge by brand - invalid schema",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1339",
											"",
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Response - status is: Bad request\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(\"Bad request\")",
											"});",
											"",
											"pm.test(\"Response - message is: Invalid schema\", function () {",
											"    pm.expect(pm.response.json().message).to.eql(\"Invalid schema\")",
											"});",
											"",
											"pm.test(\"Response - apicode is: 40\", function () {",
											"    pm.expect(pm.response.json().apicode).to.eql(40)",
											"});",
											"",
											"pm.test(\"Response - apicode is: 40\", function () {",
											"    pm.expect(pm.response.json().error[0]).to.eql(\"instance requires property \\\"platform\\\"\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"status\": { \"type\": \"string\" },",
											"        \"message\": { \"type\": \"string\" },",
											"        \"apicode\": { \"type\": \"number\" },",
											"        \"error\": { \"type\": \"array\" },",
											"    },",
											"    \"required\": [\"statusCode\", \"status\", \"message\", \"apicode\", \"error\"]",
											"};",
											"pm.test('Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/earn/badge/challenge/user?program={{program}}&user=pruebasmycooler03@gmail.com",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"badge",
										"challenge",
										"user"
									],
									"query": [
										{
											"key": "platform",
											"value": "{{platform}}",
											"disabled": true
										},
										{
											"key": "program",
											"value": "{{program}}"
										},
										{
											"key": "user",
											"value": "pruebasmycooler03@gmail.com"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Badge by brand - Unauthorized",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1340",
											"",
											"pm.test(\"Status is 401 and code name 'Unauthorized'\", function () {",
											"    pm.response.to.have.status(401);",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});",
											"",
											"pm.test(\"Message in response is 'Unauthorized'\", function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\")",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response has all properties\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"message\");",
											"});",
											"",
											"const schema = { ",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" },",
											"",
											"    },",
											"    \"required\": [\"message\"]",
											"};",
											"pm.test('Schema is valid', function() {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/earn/badge/challenge/user?platform={{platform}}&program={{program}}&user=pruebasmycooler03@gmail.com",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"badge",
										"challenge",
										"user"
									],
									"query": [
										{
											"key": "platform",
											"value": "{{platform}}"
										},
										{
											"key": "program",
											"value": "{{program}}"
										},
										{
											"key": "user",
											"value": "pruebasmycooler03@gmail.com"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400_Badge by brand - invalid user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//BEESRPG-T1341",
											"",
											"pm.test(\"Status is 400 and code name 'Bad Request'\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Response - status is: Bad request\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(\"Bad request\")",
											"});",
											"",
											"pm.test(\"Response - status code is: 400\", function () {",
											"    pm.expect(pm.response.json().statusCode).to.eql(400)",
											"});",
											"",
											"pm.test(\"Response - message is: The client was not found\", function () {",
											"    pm.expect(pm.response.json().message).to.eql(\"The client was not found\")",
											"});",
											"",
											"pm.test(\"Response - apicode is: 40\", function () {",
											"    pm.expect(pm.response.json().apiCode).to.eql(40)",
											"});",
											"",
											"pm.test(\"Response must have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"status\": { \"type\": \"string\" },",
											"        \"message\": { \"type\": \"string\" },",
											"        \"apiCode\": { \"type\": \"number\" },",
											"    },",
											"    \"required\": [\"statusCode\", \"status\", \"message\", \"apiCode\"]",
											"};",
											"pm.test('Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "key",
										"value": "{{key}}",
										"type": "text"
									},
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{urlApiAbi}}/earn/badge/challenge/user?platform={{platform}}&program={{program}}&user=invalid.user@gmail.com",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"earn",
										"badge",
										"challenge",
										"user"
									],
									"query": [
										{
											"key": "platform",
											"value": "{{platform}}"
										},
										{
											"key": "program",
											"value": "{{program}}"
										},
										{
											"key": "user",
											"value": "invalid.user@gmail.com"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "NAZ",
			"item": [
				{
					"name": "Bud Light Squares",
					"item": [
						{
							"name": "check-for-user",
							"item": [
								{
									"name": "UserEmailValidatioClientNoFound400",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n\"email\" : \"qa23@gmail.com\"\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/bls/check-for-user",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"bls",
												"check-for-user"
											]
										}
									},
									"response": []
								},
								{
									"name": "DonSendParameter in BoddyUserEmailNotValidationStatus400",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/bls/check-for-user",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"bls",
												"check-for-user"
											]
										}
									},
									"response": []
								},
								{
									"name": "AdicionalParameterValidation400",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n\"email\" : \"qa2@gmail.com\",\r\n\"Email\" : \"qa2@gmail.com\",\r\n\"behaviur\" : \"qa2@gmail.com\"\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/bls/check-for-user",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"bls",
												"check-for-user"
											]
										}
									},
									"response": []
								},
								{
									"name": "FormatEmailNotValidation400",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n\"email\" : \"qa2@*@gmail.com\"\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/bls/check-for-user",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"bls",
												"check-for-user"
											]
										}
									},
									"response": []
								},
								{
									"name": "UserEmailValidation204",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n\"email\" : \"qa2@gmail.com\"\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/bls/check-for-user",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"bls",
												"check-for-user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Authentication Toke 403 StatusCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "value",
													"value": "BudLightSquares2022 ",
													"type": "string"
												},
												{
													"key": "key",
													"value": "key",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											},
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/bls/check-for-user",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"bls",
												"check-for-user"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "award-behavior",
							"item": [
								{
									"name": "EmailNotUserExist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n\"email\" :\"teamrelease@gmail.com\"\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/bls/award-behavior",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"bls",
												"award-behavior"
											]
										}
									},
									"response": []
								},
								{
									"name": "EmailUserExist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"\r",
													"    \r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
													"});\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n\"email\" : \"michael.shperberg@gmail.com\"\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/bls/award-behavior",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"bls",
												"award-behavior"
											]
										}
									},
									"response": []
								},
								{
									"name": "applies earned points to accounts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"\r",
													"    \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "abi-global-launchpad",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												},
												{
													"key": "key",
													"value": "key",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/bls/award-behavior",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"bls",
												"award-behavior"
											]
										}
									},
									"response": []
								},
								{
									"name": "EmailNotUserExist PameterMissing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"   \r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n\"email\" :\"dark.gift0750@gmail.com\"\r\n\r\n\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/bls/award-behavior",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"bls",
												"award-behavior"
											]
										}
									},
									"response": []
								},
								{
									"name": "204NegativeCaseEmailNotUserExist PameterMissing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"   \r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n\"email\" :\"dark.gift0750@fastmail.com\",\r\n\"behavior\": \"nfl_squares_win_square\"\r\n\r\n\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/bls/award-behavior",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"bls",
												"award-behavior"
											]
										}
									},
									"response": []
								},
								{
									"name": "400StatuscodeAlreadyawarder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"   \r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n\"email\" :\"qa2@gmail.com\",\r\n\"behavior\": \"nfl_squares_10_plays\"\r\n\r\n\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/bls/award-behavior",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"bls",
												"award-behavior"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pre-requisite behavior not acheived_400Statuscodenfl_squares_60_plays",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"   \r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n\"email\" :\"qa2@gmail.com\",\r\n\"behavior\": \"nfl_squares_60_plays\"\r\n\r\n\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/bls/award-behavior",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"bls",
												"award-behavior"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pre-requisite behavior not acheived_400Status nfl_squares_50_plays",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"   \r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n\"email\" :\"qa2@gmail.com\",\r\n\"behavior\": \"nfl_squares_50_plays\"\r\n\r\n\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/bls/award-behavior",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"bls",
												"award-behavior"
											]
										}
									},
									"response": []
								},
								{
									"name": "Event object failed validation-- nfl_squares_49_plays Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"   \r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n\"email\" :\"qa2@gmail.com\",\r\n\"behavior\": \"nfl__squares_49_plays\"\r\n\r\n\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/bls/award-behavior",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"bls",
												"award-behavior"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "**For more information about this api read here**\n\n[Bud Light Squares 2022 Integration](https://abi-consumerdigitalproducts.atlassian.net/wiki/spaces/NAZ/pages/90570758/Bud+Light+Squares+2022+Integration)"
				},
				{
					"name": "Games",
					"item": [
						{
							"name": "spin-wheel",
							"item": [
								{
									"name": "Pass",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Pass\", function () {\r",
													" pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let email = (pm.variables.replaceIn(\"{{$randomEmail}}\").toLowerCase());\r",
													"pm.variables.set(\"email\", email);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"origin-url\": \"https://mycooler.com/spin-the-wheel\",\r\n  \"tcpp-accepted\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/games/spin-the-wheel/spin-wheel",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"games",
												"spin-the-wheel",
												"spin-wheel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid body parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"robert.smith@test.com\",\r\n  \"origin-url\": \"https://mycooler.com/spin-the-wheel\",\r\n  \"tcpp-accepted\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/games/spin-the-wheel/spin-wheel",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"games",
												"spin-the-wheel",
												"spin-wheel"
											]
										}
									},
									"response": []
								},
								{
									"name": "A current game config could not be found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let email = (pm.variables.replaceIn(\"{{$randomEmail}}\").toLowerCase());\r",
													"pm.variables.set(\"email\", email);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"origin-url\": \"https://mycooler.com/spin-the-wheel\",\r\n  \"tcpp-accepted\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/games/spin-the-wheel/spin-wheel",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"games",
												"spin-the-wheel",
												"spin-wheel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Player has reached play limit per period",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"robert.smith@test.com\",\r\n  \"origin-url\": \"https://mycooler.com/spin-the-wheel\",\r\n  \"tcpp-accepted\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/games/spin-the-wheel/spin-wheel",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"games",
												"spin-the-wheel",
												"spin-wheel"
											]
										}
									},
									"response": []
								},
								{
									"name": "User has un unclaimed prize",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"robert.smith@test.com\",\r\n  \"origin-url\": \"https://mycooler.com/spin-the-wheel\",\r\n  \"tcpp-accepted\": \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/games/spin-the-wheel/spin-wheel",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"games",
												"spin-the-wheel",
												"spin-wheel"
											]
										}
									},
									"response": []
								},
								{
									"name": "This player has already won and claimed a prize for this game",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"robert.smith@test.com\",\r\n  \"origin-url\": \"https://mycooler.com/spin-the-wheel\",\r\n  \"tcpp-accepted\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/games/spin-the-wheel/spin-wheel",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"games",
												"spin-the-wheel",
												"spin-wheel"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "record-play",
							"item": [
								{
									"name": "Registered user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"{\r",
													"    let userEmail = (pm.variables.replaceIn(\"{{$randomEmail}}\").toLowerCase())\r",
													"    pm.variables.set(\"smsClient\", userEmail)\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											},
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\":  \"{{smsClient}}\",\r\n  \"origin-url\": \"https://us.stella.com/history-quiz\",\r\n  \"tcpp-accepted\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/games/brands-quiz/record-play",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"games",
												"brands-quiz",
												"record-play"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid body param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"{\r",
													"    let userEmail = (pm.variables.replaceIn(\"{{$randomEmail}}\").toLowerCase())\r",
													"    pm.variables.set(\"smsClient\", userEmail)\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											},
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"{{smsClient}}\",\r\n  \"origin-url\": \"https://us.stella.com/history-quiz\",\r\n  \"tcpp-accepted\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/games/brands-quiz/record-play",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"games",
												"brands-quiz",
												"record-play"
											]
										}
									},
									"response": []
								},
								{
									"name": "Playear  already  won and claimed a prize",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"prize already awarded and claimed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											},
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"michael.shperberg@gmail.com\",\r\n  \"origin-url\": \"https://us.stella.com/history-quiz\",\r\n  \"tcpp-accepted\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/games/brands-quiz/record-play",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"games",
												"brands-quiz",
												"record-play"
											]
										}
									},
									"response": []
								},
								{
									"name": "User has unclaimed prize",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"{\r",
													"    let userEmail = (pm.variables.replaceIn(\"{{$randomEmail}}\").toLowerCase())\r",
													"    pm.variables.set(\"smsClient\", userEmail)\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											},
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\":  \"{{smsClient}}\",\r\n  \"origin-url\": \"https://us.stella.com/history-quiz\",\r\n  \"tcpp-accepted\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/games/brands-quiz/record-play",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"games",
												"brands-quiz",
												"record-play"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "setup-game",
							"item": [
								{
									"name": "Brands-quiz game: No content. Status code: 204",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "MyCoolerGames",
												"type": "text"
											},
											{
												"key": "token",
												"value": "6U8yay2cDmd0H07OcHKUiI9qHVAo3MJY",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"game-type\": \"brands-quiz\" \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://us-qa-api.abi-rewards.de/custom/games/setup-game",
											"protocol": "https",
											"host": [
												"us-qa-api",
												"abi-rewards",
												"de"
											],
											"path": [
												"custom",
												"games",
												"setup-game"
											]
										}
									},
									"response": []
								},
								{
									"name": "Spin-the-wheel game: { slices: [listOfWheelTiles] }. Status code: 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Pass\", function () {\r",
													" pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"game-type\": \"spin-the-wheel\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/games/setup-game",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"games",
												"setup-game"
											]
										}
									},
									"response": []
								},
								{
									"name": "Body parameters invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Pass\", function () {\r",
													" pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"game-type\": \"spin-wheel\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/games/setup-game",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"games",
												"setup-game"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "award-prizes",
							"item": [
								{
									"name": "Status 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Pass\", function () {\r",
													" pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											},
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\":  \"michael.shperberg@gmail.com\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/games/award-prizes",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"games",
												"award-prizes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Status 200  no unclaimed wins",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Pass\", function () {\r",
													" pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"no unclaimed wins\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											},
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"dark.gift0750@fastmail.com\"\r\n\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/games/award-prizes",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"games",
												"award-prizes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid body parametres",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											},
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"michael.shperberggmail.com\"\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/games/award-prizes",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"games",
												"award-prizes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Email not associate with MYC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"email is not myc user\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "token",
												"value": "{{tokenNAZ}}",
												"type": "text"
											},
											{
												"key": "key",
												"value": "{{keyNAZ}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"michael.shp@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/games/award-prizes",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"games",
												"award-prizes"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Brand Hub",
					"item": [
						{
							"name": "Michelob",
							"item": [
								{
									"name": "Michelob Invalid param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brands=michelob_ultras&kinds=merch",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brands",
													"value": "michelob_ultras"
												},
												{
													"key": "kinds",
													"value": "merch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Michelob merch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/mycooler/hub-content?brand=michelob_ultra&kinds=merch",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"mycooler",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "michelob_ultra"
												},
												{
													"key": "kinds",
													"value": "merch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MIchelob survey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=michelob_ultra&kinds=survey",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "michelob_ultra"
												},
												{
													"key": "kinds",
													"value": "survey"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MIchelob sweeps",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=michelob_ultra&kinds=sweeps",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "michelob_ultra"
												},
												{
													"key": "kinds",
													"value": "sweeps"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MIchelob quiz",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=michelob_ultra&kinds=quiz",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "michelob_ultra"
												},
												{
													"key": "kinds",
													"value": "quiz"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Michelod_offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=michelob_ultra&kinds=offer",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "michelob_ultra"
												},
												{
													"key": "kinds",
													"value": "quiz",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "survey",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "sweeps",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "merch",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "offer"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200_MIchlob _all_kinds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=michelob_ultra&kinds=quiz&kinds=survey&kinds=sweeps&kinds=merch&kinds=offer",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "michelob_ultra"
												},
												{
													"key": "kinds",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey"
												},
												{
													"key": "kinds",
													"value": "sweeps"
												},
												{
													"key": "kinds",
													"value": "merch"
												},
												{
													"key": "kinds",
													"value": "offer"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MIchlob_no_brand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?kinds=merch",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "michelob_ultra",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "merch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MIchlob_not_listed_brand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=leffe&kinds=merch",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "leffe"
												},
												{
													"key": "kinds",
													"value": "merch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Michlob_No_kinds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=michelob_ultra",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "michelob_ultra"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Michlob _more_than_5_kinds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=michelob_ultra&kinds=quiz&kinds=survey&kinds=sweeps&kinds=merch&kinds=bla",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "michelob_ultra"
												},
												{
													"key": "kinds",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey"
												},
												{
													"key": "kinds",
													"value": "sweeps"
												},
												{
													"key": "kinds",
													"value": "merch"
												},
												{
													"key": "kinds",
													"value": "bla"
												},
												{
													"key": "Origin",
													"value": "http://localhost:3000",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Michelob_header _missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=michelob_ultra&kinds=quiz&kinds=survey&kinds=sweeps&kinds=merch&kinds=offer",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "michelob_ultra"
												},
												{
													"key": "kinds",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey"
												},
												{
													"key": "kinds",
													"value": "sweeps"
												},
												{
													"key": "kinds",
													"value": "merch"
												},
												{
													"key": "kinds",
													"value": "offer"
												},
												{
													"key": "",
													"value": "http://localhost:3000",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Budweiser",
							"item": [
								{
									"name": "200_Bud_all_kids",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=budweiser&kinds=quiz&kinds=survey&kinds=sweeps&kinds=merch&kinds=offer",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "budweiser"
												},
												{
													"key": "kinds",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey"
												},
												{
													"key": "kinds",
													"value": "sweeps"
												},
												{
													"key": "kinds",
													"value": "merch"
												},
												{
													"key": "kinds",
													"value": "offer"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Bud Invalid param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=budweiser&=quiz",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "budweiser"
												},
												{
													"key": "",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "sweeps",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "merch",
													"disabled": true
												},
												{
													"key": "Origin",
													"value": "http://localhost:3000",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Bud merch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?kinds=merch&brand=budweiser",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "kinds",
													"value": "quiz",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "survey",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "sweeps",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "merch"
												},
												{
													"key": "brand",
													"value": "budweiser"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Bud survey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=budweiser&kinds=survey",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "budweiser"
												},
												{
													"key": "kinds",
													"value": "quiz",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "survey"
												},
												{
													"key": "kinds",
													"value": "sweeps",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "merch",
													"disabled": true
												},
												{
													"key": "Origin",
													"value": "http://localhost:3000",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Bud sweeps",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=budweiser&kinds=sweeps",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "budweiser"
												},
												{
													"key": "kinds",
													"value": "quiz",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "survey",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "sweeps"
												},
												{
													"key": "kinds",
													"value": "merch",
													"disabled": true
												},
												{
													"key": "Origin",
													"value": "http://localhost:3000",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Bud quiz",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=budweiser&kinds=quiz",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "budweiser"
												},
												{
													"key": "kinds",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "sweeps",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "merch",
													"disabled": true
												},
												{
													"key": "Origin",
													"value": "http://localhost:3000",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Bud_offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=budweiser&kinds=offer",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "Origin",
													"value": "http://localhost:3000",
													"disabled": true
												},
												{
													"key": "brand",
													"value": "budweiser"
												},
												{
													"key": "kinds",
													"value": "offer"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Bud_no_brand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?kinds=quiz&kinds=survey&kinds=sweeps&kinds=merch",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "budweiser",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey"
												},
												{
													"key": "kinds",
													"value": "sweeps"
												},
												{
													"key": "kinds",
													"value": "merch"
												},
												{
													"key": "Origin",
													"value": "http://localhost:3000",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Bud_brand_no_listed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=budsa&kinds=quiz&kinds=survey&kinds=sweeps&kinds=merch&kinds=offer",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "budsa"
												},
												{
													"key": "kinds",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey"
												},
												{
													"key": "kinds",
													"value": "sweeps"
												},
												{
													"key": "kinds",
													"value": "merch"
												},
												{
													"key": "kinds",
													"value": "offer"
												},
												{
													"key": "Origin",
													"value": "http://localhost:3000",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Bud_no_kinds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=budsa",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "budsa"
												},
												{
													"key": "kinds",
													"value": "quiz",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "survey",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "sweeps",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "merch",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "offer",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Bud_more_then_5_kinds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=budweiser&kinds=quiz&kinds=survey&kinds=sweeps&kinds=merch&kinds=googgles&=",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "budweiser"
												},
												{
													"key": "kinds",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey"
												},
												{
													"key": "kinds",
													"value": "sweeps"
												},
												{
													"key": "kinds",
													"value": "merch"
												},
												{
													"key": "kinds",
													"value": "googgles"
												},
												{
													"key": "",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Bud_kinds _no_listed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=budweiser&kinds=quiz&kinds=survey&kinds=sweeps&kinds=merch&=",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "budweiser"
												},
												{
													"key": "kinds",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey"
												},
												{
													"key": "kinds",
													"value": "sweeps"
												},
												{
													"key": "kinds",
													"value": "merch"
												},
												{
													"key": "",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bush",
							"item": [
								{
									"name": "200_Busch_all_kinds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=budweiser&kinds=quiz&kinds=survey&kinds=sweeps&kinds=merch&kinds=offer",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "budweiser"
												},
												{
													"key": "kinds",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey"
												},
												{
													"key": "kinds",
													"value": "sweeps"
												},
												{
													"key": "kinds",
													"value": "merch"
												},
												{
													"key": "kinds",
													"value": "offer"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Busch Invalid param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?=quiz&brand=bush",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "sweeps",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "merch",
													"disabled": true
												},
												{
													"key": "Origin",
													"value": "http://localhost:3000",
													"disabled": true
												},
												{
													"key": "brand",
													"value": "bush"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Busch merch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "http://localhost:3000",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?kinds=merch&brand=busch",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "kinds",
													"value": "quiz",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "merch"
												},
												{
													"key": "kinds",
													"value": "sweeps",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "offer",
													"disabled": true
												},
												{
													"key": "brand",
													"value": "busch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Busch survey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?kinds=survey&brand=busch",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "kinds",
													"value": "quiz",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "survey"
												},
												{
													"key": "kinds",
													"value": "sweeps",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "merch",
													"disabled": true
												},
												{
													"key": "brand",
													"value": "busch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Busch sweeps",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?kinds=sweeps&brand=busch",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "kinds",
													"value": "quiz",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "survey",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "sweeps"
												},
												{
													"key": "kinds",
													"value": "merch",
													"disabled": true
												},
												{
													"key": "brand",
													"value": "busch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Busch quiz",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?kinds=quiz&brand=busch",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "kinds",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "sweeps",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "merch",
													"disabled": true
												},
												{
													"key": "brand",
													"value": "busch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Busch_offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?kinds=offer&brand=busch",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "kinds",
													"value": "quiz",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "survey",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "sweeps",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "merch",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "offer"
												},
												{
													"key": "brand",
													"value": "busch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Busch_no_brand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?kinds=merch",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "Bush",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "merch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Busch_brand_not _listed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?kinds=quiz&kinds=survey&kinds=sweeps&kinds=merch&kinds=offer&Brand=gfhfjkj",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "kinds",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey"
												},
												{
													"key": "kinds",
													"value": "sweeps"
												},
												{
													"key": "kinds",
													"value": "merch"
												},
												{
													"key": "kinds",
													"value": "offer"
												},
												{
													"key": "Brand",
													"value": "gfhfjkj"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Busch _no_kinds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=bush",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "kinds",
													"value": "offer",
													"disabled": true
												},
												{
													"key": "brand",
													"value": "bush"
												},
												{
													"key": "",
													"value": "merch",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Busch_more_than_5_kinds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=Bush&kinds=quiz&kinds=survey&kinds=sweeps&kinds=merch&kinds=offer&kinds=notoffer",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "Bush"
												},
												{
													"key": "kinds",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey"
												},
												{
													"key": "kinds",
													"value": "sweeps"
												},
												{
													"key": "kinds",
													"value": "merch"
												},
												{
													"key": "kinds",
													"value": "offer"
												},
												{
													"key": "kinds",
													"value": "notoffer"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Busch_kinds-is_notlisted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand =busch&kinds=merch&kinds=quiz&kinds=offer&kinds=survay&kinds=sweeps",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand ",
													"value": "busch"
												},
												{
													"key": "kinds",
													"value": "merch"
												},
												{
													"key": "kinds",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "offer"
												},
												{
													"key": "kinds",
													"value": "survay"
												},
												{
													"key": "kinds",
													"value": "sweeps"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Budlight",
							"item": [
								{
									"name": "200_Budlight_all_kindspass",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=Budlight&kinds=quiz&kinds=survey&kinds=sweeps&kinds=merch&kinds=offer",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "Budlight"
												},
												{
													"key": "kinds",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey"
												},
												{
													"key": "kinds",
													"value": "sweeps"
												},
												{
													"key": "kinds",
													"value": "merch"
												},
												{
													"key": "kinds",
													"value": "offer"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Budlight Invalid param.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?=quiz&brand=bud_light",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "sweeps",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "merch",
													"disabled": true
												},
												{
													"key": "brand",
													"value": "bud_light"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Budlight merch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?kinds=merch&brand=bud_light",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "kinds",
													"value": "quiz",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "survey",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "sweeps",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "merch"
												},
												{
													"key": "brand",
													"value": "bud_light"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Budlight survey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?kinds=survey&brand=bud_light",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "kinds",
													"value": "quiz",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "survey"
												},
												{
													"key": "kinds",
													"value": "sweeps",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "merch",
													"disabled": true
												},
												{
													"key": "brand",
													"value": "bud_light"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Budlight sweeps",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?kinds=sweeps&brand=bud_light",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "kinds",
													"value": "quiz",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "survey",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "sweeps"
												},
												{
													"key": "kinds",
													"value": "merch",
													"disabled": true
												},
												{
													"key": "brand",
													"value": "bud_light"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Budlight quiz",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name OK\", () => {\r",
													"  pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response must have a body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"kind\": { \"type\": \"string\" }, \r",
													"        \"title\": { \"type\": \"string\" }, \r",
													"        \"points\": { \"type\": \"null\" },\r",
													"        \"imageUrl\": { \"type\": \"array\" },\r",
													"        \"link\": { \"type\": \"array\" },\r",
													"    },\r",
													"    \r",
													"};\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  pm.response.to.have.jsonSchema(schema);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?kinds=quiz&brand=bud_light",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "kinds",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "sweeps",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "merch",
													"disabled": true
												},
												{
													"key": "brand",
													"value": "bud_light"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Budlight offer",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=bud_light&kinds=offer",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "bud_light"
												},
												{
													"key": "kinds",
													"value": "offer"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Budlight_no_brand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=&kinds=quiz",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": ""
												},
												{
													"key": "kinds",
													"value": "quiz"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Budlight_brand_not_listed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=Leffe&kinds=quiz&kinds=survey&kinds=sweeps&kinds=merch&kinds=offer",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "Leffe"
												},
												{
													"key": "kinds",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey"
												},
												{
													"key": "kinds",
													"value": "sweeps"
												},
												{
													"key": "kinds",
													"value": "merch"
												},
												{
													"key": "kinds",
													"value": "offer"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Budlight_no-kinds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=bud_light_seltzer",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "kinds",
													"value": "quiz",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "survey",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "sweeps",
													"disabled": true
												},
												{
													"key": "kinds",
													"value": "merch",
													"disabled": true
												},
												{
													"key": "brand",
													"value": "bud_light_seltzer"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Budlight_more_then_5_kinds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=bud_light_seltzer&kinds=quiz&kinds=survey&kinds=sweeps&kinds=merch&kinds=offer&kinds=shmoffer",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "bud_light_seltzer"
												},
												{
													"key": "kinds",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey"
												},
												{
													"key": "kinds",
													"value": "sweeps"
												},
												{
													"key": "kinds",
													"value": "merch"
												},
												{
													"key": "kinds",
													"value": "offer"
												},
												{
													"key": "kinds",
													"value": "shmoffer"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Budlight_kinds_not_listed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Event object failed validation\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Origin",
												"value": "{{urlApiAbi}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{urlApiAbi}}/custom/integrations/brands/hub-content?brand=bud_light_seltzer&kinds=quiz&kinds=survey&kinds=sweeps&kinds=kent&kinds=offer",
											"host": [
												"{{urlApiAbi}}"
											],
											"path": [
												"custom",
												"integrations",
												"brands",
												"hub-content"
											],
											"query": [
												{
													"key": "brand",
													"value": "bud_light_seltzer"
												},
												{
													"key": "kinds",
													"value": "quiz"
												},
												{
													"key": "kinds",
													"value": "survey"
												},
												{
													"key": "kinds",
													"value": "sweeps"
												},
												{
													"key": "kinds",
													"value": "kent"
												},
												{
													"key": "kinds",
													"value": "offer"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "FAQ",
					"item": [
						{
							"name": "200 Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Origin",
										"value": "http://localhost:3000",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{urlApiAbi}}/custom/integrations/mycooler/get-faq",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"custom",
										"integrations",
										"mycooler",
										"get-faq"
									]
								}
							},
							"response": []
						},
						{
							"name": "Incorrect Origin key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name BAD Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{urlApiAbi}}/custom/integrations/mycooler/get-faq?Origines=http://localhost:3000",
									"host": [
										"{{urlApiAbi}}"
									],
									"path": [
										"custom",
										"integrations",
										"mycooler",
										"get-faq"
									],
									"query": [
										{
											"key": "Origines",
											"value": "http://localhost:3000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Register Client",
					"item": [
						{
							"name": "Register client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name No Content\", () => {\r",
											"  pm.response.to.have.status(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"1\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "myc-dev",
										"type": "text"
									},
									{
										"key": "token",
										"value": "wj59urfgd7xy",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"advertisement\": true,\r\n  \"birthdate\": \"1999-12-31\",\r\n  \"email\": \"michodil.shperber@gmail.com\",\r\n  \"firstName\": \"Michael\",\r\n  \"lastName\": \"Shperberg\",\r\n  \"password\": \"Qwer1234\",\r\n  \"phoneNumber\": \"+16472157894\",\r\n  \"zipcode\": \"63118\",\r\n  \"tcAccepted\": true,\r\n  \"signupCampaign\": \"2023_Q1_MYCTestCampaign_Brand\",\r\n  \"originUrl\": \"https://test.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://us-qa-api.abi-rewards.de/custom/mycooler/register-client",
									"protocol": "https",
									"host": [
										"us-qa-api",
										"abi-rewards",
										"de"
									],
									"path": [
										"custom",
										"mycooler",
										"register-client"
									]
								}
							},
							"response": []
						},
						{
							"name": "Body pararameters invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "myc-dev",
										"type": "text"
									},
									{
										"key": "token",
										"value": "wj59urfgd7xy",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"advertisement\": true,\r\n  \"birthdate\": \"1999-12-31\",\r\n  \"email\": \"quick.flame9738fastmail.com\",\r\n  \"firstNames\": \"quick.flame9738@fastmail.com\",\r\n  \"lastName\": \"quick.flame9738@fastmail.com\",\r\n  \"password\": \"Qwer1234\",\r\n  \"phoneNumber\": \"+12223334444\",\r\n  \"zipcode\": \"63118\",\r\n  \"tcAccepted\": true,\r\n  \"signupCampaign\": \"2023_Q1_MYCTestCampaign_Brand\",\r\n  \"originUrl\": \"https://test.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://us-qa-api.abi-rewards.de/custom/mycooler/register-client",
									"protocol": "https",
									"host": [
										"us-qa-api",
										"abi-rewards",
										"de"
									],
									"path": [
										"custom",
										"mycooler",
										"register-client"
									]
								}
							},
							"response": []
						},
						{
							"name": "Email already registered",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body message \", function () {\r",
											"    pm.expect(pm.response.text()).to.include( \"There is already a client with this platform and program\" );\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "myc-dev",
										"type": "text"
									},
									{
										"key": "token",
										"value": "wj59urfgd7xy",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"advertisement\": true,\r\n  \"birthdate\": \"1999-12-31\",\r\n  \"email\": \"quicks.flame9738@fastmail.com\",\r\n  \"firstName\": \"quick.flame9738@fastmail.com\",\r\n  \"lastName\": \"quick.flame9738@fastmail.com\",\r\n  \"password\": \"Qwer1234\",\r\n  \"phoneNumber\": \"+12223334444\",\r\n  \"zipcode\": \"63118\",\r\n  \"tcAccepted\": true,\r\n  \"signupCampaign\": \"2023_Q1_MYCTestCampaign_Brand\",\r\n  \"originUrl\": \"https://test.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://us-qa-api.abi-rewards.de/custom/mycooler/register-client",
									"protocol": "https",
									"host": [
										"us-qa-api",
										"abi-rewards",
										"de"
									],
									"path": [
										"custom",
										"mycooler",
										"register-client"
									]
								}
							},
							"response": []
						},
						{
							"name": "Phone number already registred",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"This phone number has been already used by another user before\");\r",
											"});\r",
											"\r",
											"pm.test(\"Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "myc-dev",
										"type": "text"
									},
									{
										"key": "token",
										"value": "wj59urfgd7xy",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"advertisement\": true,\r\n  \"birthdate\": \"1999-12-31\",\r\n  \"email\": \"asdf1@asdf.com\",\r\n  \"firstName\": \"quick.flame9738@fastmail.com\",\r\n  \"lastName\": \"quick.flame9738@fastmail.com\",\r\n  \"password\": \"Qwer1234\",\r\n  \"phoneNumber\": \"+12223334444\",\r\n  \"zipcode\": \"63118\",\r\n  \"tcAccepted\": true,\r\n  \"signupCampaign\": \"2023_Q1_MYCTestCampaign_Brand\",\r\n  \"originUrl\": \"https://test.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://us-qa-api.abi-rewards.de/custom/mycooler/register-client",
									"protocol": "https",
									"host": [
										"us-qa-api",
										"abi-rewards",
										"de"
									],
									"path": [
										"custom",
										"mycooler",
										"register-client"
									]
								}
							},
							"response": []
						},
						{
							"name": "MIssing auth key or invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Unauthorized\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "",
										"type": "text"
									},
									{
										"key": "token",
										"value": "wj59urfgd7xy",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"advertisement\": true,\r\n  \"birthdate\": \"1999-12-31\",\r\n  \"email\": \"quick.flame9738fastmail.com\",\r\n  \"firstNames\": \"quick.flame9738@fastmail.com\",\r\n  \"lastName\": \"quick.flame9738@fastmail.com\",\r\n  \"password\": \"Qwer1234\",\r\n  \"phoneNumber\": \"+12223334444\",\r\n  \"zipcode\": \"63118\",\r\n  \"tcAccepted\": true,\r\n  \"signupCampaign\": \"2023_Q1_MYCTestCampaign_Brand\",\r\n  \"originUrl\": \"https://test.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://us-qa-api.abi-rewards.de/custom/mycooler/register-client",
									"protocol": "https",
									"host": [
										"us-qa-api",
										"abi-rewards",
										"de"
									],
									"path": [
										"custom",
										"mycooler",
										"register-client"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Submit otp for verification",
					"item": [
						{
							"name": "Otp code verification ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name No Content\", () => {\r",
											"  pm.response.to.have.status(\"No Content\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"1\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "myc-dev",
										"type": "text"
									},
									{
										"key": "token",
										"value": "wj59urfgd7xy",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"michael.shperberg@gmail.com\",\r\n  \"otpCode\": \"526295\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://us-qa-api.abi-rewards.de/custom/mycooler/submit-otp",
									"protocol": "https",
									"host": [
										"us-qa-api",
										"abi-rewards",
										"de"
									],
									"path": [
										"custom",
										"mycooler",
										"submit-otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Body parameters invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Event object failed validation\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "myc-dev",
										"type": "text"
									},
									{
										"key": "token",
										"value": "wj59urfgd7xy",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"asdfasdf.com\",\r\n  \"otpCodes\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://us-qa-api.abi-rewards.de/custom/mycooler/submit-otp",
									"protocol": "https",
									"host": [
										"us-qa-api",
										"abi-rewards",
										"de"
									],
									"path": [
										"custom",
										"mycooler",
										"submit-otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "User not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Client not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "myc-dev",
										"type": "text"
									},
									{
										"key": "token",
										"value": "wj59urfgd7xy",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"mcyf5@asdf.com\",\r\n  \"otpCode\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://us-qa-api.abi-rewards.de/custom/mycooler/submit-otp",
									"protocol": "https",
									"host": [
										"us-qa-api",
										"abi-rewards",
										"de"
									],
									"path": [
										"custom",
										"mycooler",
										"submit-otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Code is invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include( \"Invalid verification code provided, please try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "myc-dev",
										"type": "text"
									},
									{
										"key": "token",
										"value": "wj59urfgd7xy",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\":\"michael.shperberg@gmail.com\",\r\n  \"otpCode\": \"145456\"\r\n}"
								},
								"url": {
									"raw": "https://us-qa-api.abi-rewards.de/custom/mycooler/submit-otp",
									"protocol": "https",
									"host": [
										"us-qa-api",
										"abi-rewards",
										"de"
									],
									"path": [
										"custom",
										"mycooler",
										"submit-otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "User is already confirmed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Bad Request\", () => {\r",
											"  pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include( \"User cannot be confirmed. Current status is CONFIRMED\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "myc-dev",
										"type": "text"
									},
									{
										"key": "token",
										"value": "wj59urfgd7xy",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"michael.shperberg@gmail.com\",\r\n  \"otpCode\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://us-qa-api.abi-rewards.de/custom/mycooler/submit-otp",
									"protocol": "https",
									"host": [
										"us-qa-api",
										"abi-rewards",
										"de"
									],
									"path": [
										"custom",
										"mycooler",
										"submit-otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing auth key or invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name Unauthorized\", () => {\r",
											"  pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include( \"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "myc-dev",
										"type": "text"
									},
									{
										"key": "token",
										"value": "wj59urfgd7xy",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"asdf@asdf.com\",\r\n  \"otpCodes\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://us-qa-api.abi-rewards.de/custom/mycooler/submit-otp",
									"protocol": "https",
									"host": [
										"us-qa-api",
										"abi-rewards",
										"de"
									],
									"path": [
										"custom",
										"mycooler",
										"submit-otp"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete activation_metadata records when deleting user",
					"item": [
						{
							"name": "New Request",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "key",
										"value": "abi-global-launchpad",
										"type": "text"
									},
									{
										"key": "token",
										"value": "0be0f552db16cf5637e22bca5cabbd85",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"user\": \"zjkr5564@fastmail.com\",\r\n  \"platform\": \"Rewards_USA\",\r\n  \"program\": \"MyCooler\"\r\n}"
								},
								"url": {
									"raw": "https://us-qa-api.abi-rewards.de/client",
									"protocol": "https",
									"host": [
										"us-qa-api",
										"abi-rewards",
										"de"
									],
									"path": [
										"client"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "SSO Campaing",
			"item": [
				{
					"name": "200_Create Client from SSO Camapaign true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//BEESRPG-T2646\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name Created\", () => {\r",
									"  pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Client created\");\r",
									"});\r",
									"\r",
									"pm.test(\"apicode attribute is equal to '105'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.apiCode).to.eql(105);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must have a body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has all properties\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"status\");\r",
									"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
									"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
									"  pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"statusCode\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"apiCode\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"status\",\r",
									"    \"statusCode\",\r",
									"    \"apiCode\",\r",
									"    \"message\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"var user = pm.variables.get(\"ssoCampaignClient\")\r",
									"var url = pm.environment.get(\"urlApiAbi\")\r",
									"var token = pm.environment.get(\"token\")\r",
									"var key = pm.environment.get(\"key\")\r",
									"var platform = pm.environment.get(\"createPlatform\")\r",
									"var program = pm.environment.get(\"program\")\r",
									"\r",
									"\r",
									"//Get points balance \r",
									"\r",
									"const getPointsBalanceRequest = {\r",
									"  method: 'GET',\r",
									"  url : `${url}/client/historical?user=${user}&platform=${platform}&program=${program}`,\r",
									"  header: {\r",
									"    \r",
									"  }\r",
									"};\r",
									"\r",
									"\r",
									"    setTimeout(function () {\r",
									"    \r",
									"            pm.sendRequest(getPointsBalanceRequest, (error, response) => {\r",
									"            let registration_campaign = response.json().registration_campaign\r",
									"                \r",
									"                try {\r",
									"                pm.expect(registration_campaign).to.eql(true);\r",
									"                pm.test(\"Pass- registration_campaign is true\", () => true); \r",
									"                } catch (error) {\r",
									"                pm.test(\"FAIL- registration_campaign is false\", () => { throw new Error(error.message) });\r",
									"                }\r",
									"                \r",
									"            });\r",
									"        \r",
									"    },4000);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userEmail = (pm.variables.replaceIn(\"{{$randomEmail}}\").toLowerCase())",
									"    pm.variables.set(\"ssoCampaignClient\", userEmail)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{ssoCampaignClient}}\",\n    \"fullName\": \"Test Automation\",\n    \"birthdate\": \"1995-01-01\",\n    \"termsAndConditions\": {\n        \"platform\": \"{{platform}}\",\n        \"subplatform\": \"{{program}}\"\n    },\n    \"advertisement\": true,\n    \"origin\": \"web\",\n    \"country\": \"{{country}}\",\n    \"zipcode\": \"13684\",  \n    \"platform\": \"{{platform}}\",\n    \"program\": \"{{program}}\",\n    \"migration_tier\": \"NA\",\n    \"migration_points\": 0,\n    \"origin_platform_type\": \"{{platform}}\",\n    \"rewards_platform_id\": \"{{platform}}\",\n    \"rewards_program_id\": \"{{program}}\",\n    \"signup_campaign\": \"sso_campaign\",\n    \"type_signup_campaign\": \"external\",\n    \"registration_device_id\": \"501006464537369204515159537367804093171\",\n    \"registration_device_model\": \"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537\",\n    \"registration_device_platform\": \"Win32\",\n    \"registration_device_os\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari\",\n    \"is_active\": true,\n    \"origin_product_OwnerId\": \"Rewards_USA\",\n    \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0\",\n    \"origin_url\": \"http://localhost:4200\",\n    \"locale\": \"{{locale}}\",\n    \"gender\":\"male\",\n    \"campaign_create_sso\":true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlApiAbi}}/client",
							"host": [
								"{{urlApiAbi}}"
							],
							"path": [
								"client"
							]
						}
					},
					"response": []
				},
				{
					"name": "200_Create Client from SSO Camapaign false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//BEESRPG-T2640\r",
									"//BEESRPG-T2643\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name Created\", () => {\r",
									"  pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status attribute is equal to 'Success'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Client created\");\r",
									"});\r",
									"\r",
									"pm.test(\"apicode attribute is equal to '105'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.apiCode).to.eql(105);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must have a body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has all properties\", function () {\r",
									"  pm.expect(pm.response.text()).to.include(\"status\");\r",
									"  pm.expect(pm.response.text()).to.include(\"statusCode\");\r",
									"  pm.expect(pm.response.text()).to.include(\"apiCode\");\r",
									"  pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"statusCode\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"apiCode\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"status\",\r",
									"    \"statusCode\",\r",
									"    \"apiCode\",\r",
									"    \"message\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"var user = pm.variables.get(\"ssoCampaignClient\")\r",
									"var url = pm.environment.get(\"urlApiAbi\")\r",
									"var token = pm.environment.get(\"token\")\r",
									"var key = pm.environment.get(\"key\")\r",
									"var platform = pm.environment.get(\"createPlatform\")\r",
									"var program = pm.environment.get(\"program\")\r",
									"\r",
									"\r",
									"//Get points balance \r",
									"\r",
									"const getPointsBalanceRequest = {\r",
									"  method: 'GET',\r",
									"  url : `${url}/client/historical?user=${user}&platform=${platform}&program=${program}`,\r",
									"  header: {\r",
									"    \r",
									"  }\r",
									"};\r",
									"\r",
									"\r",
									"    setTimeout(function () {\r",
									"    \r",
									"            pm.sendRequest(getPointsBalanceRequest, (error, response) => {\r",
									"            let registration_campaign = response.json().registration_campaign\r",
									"                \r",
									"                try {\r",
									"                pm.expect(registration_campaign).to.eql(true);\r",
									"                pm.test(\"Pass- registration_campaign is true\", () => true); \r",
									"                } catch (error) {\r",
									"                pm.test(\"FAIL- registration_campaign is false\", () => { throw new Error(error.message) });\r",
									"                }\r",
									"                \r",
									"            });\r",
									"        \r",
									"    },4000);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userEmail = (pm.variables.replaceIn(\"{{$randomEmail}}\").toLowerCase())",
									"    pm.variables.set(\"ssoCampaignClient\", userEmail)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{ssoCampaignClient}}\",\n    \"fullName\": \"Test Automation\",\n    \"birthdate\": \"1995-01-01\",\n    \"termsAndConditions\": {\n        \"platform\": \"{{platform}}\",\n        \"subplatform\": \"{{program}}\"\n    },\n    \"advertisement\": true,\n    \"origin\": \"web\",\n    \"country\": \"{{country}}\",\n    \"zipcode\": \"13684\",  \n    \"platform\": \"{{platform}}\",\n    \"program\": \"{{program}}\",\n    \"migration_tier\": \"NA\",\n    \"migration_points\": 0,\n    \"origin_platform_type\": \"{{platform}}\",\n    \"rewards_platform_id\": \"{{platform}}\",\n    \"rewards_program_id\": \"{{program}}\",\n    \"signup_campaign\": \"sso_campaign\",\n    \"type_signup_campaign\": \"external\",\n    \"registration_device_id\": \"501006464537369204515159537367804093171\",\n    \"registration_device_model\": \"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537\",\n    \"registration_device_platform\": \"Win32\",\n    \"registration_device_os\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari\",\n    \"is_active\": true,\n    \"origin_product_OwnerId\": \"Rewards_USA\",\n    \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0\",\n    \"origin_url\": \"http://localhost:4200\",\n    \"locale\": \"{{locale}}\",\n    \"gender\":\"male\",\n    \"campaign_create_sso\":false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlApiAbi}}/client",
							"host": [
								"{{urlApiAbi}}"
							],
							"path": [
								"client"
							]
						}
					},
					"response": []
				},
				{
					"name": "200_Update Password_ SSO Campaign false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//BEESRPG-T2641\r",
									"//BEESRPG-T2642\r",
									"//BEESRPG-T2644\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name OK\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is equal to 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Successful operation\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response must have a body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const schema = { \r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"status\": { \"type\": \"string\" }, \r",
									"        \"statusCode\": { \"type\": \"number\" }, \r",
									"        \"apiCode\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userEmail = (pm.variables.replaceIn(\"{{$randomEmail}}\").toLowerCase())",
									"    pm.variables.set(\"ssoCampaignClient\", userEmail)",
									"",
									"var createUser = {",
									"    url: pm.environment.get(\"urlApiAbi\") + '/client',",
									"    headers: {",
									"        'token': pm.environment.get(\"token\"),",
									"        'key': pm.environment.get(\"key\"),",
									"        'Content-Type': 'application/json'",
									"    },",
									"    method: 'POST',",
									"    body: JSON.stringify({",
									"        \"email\": userEmail,",
									"        \"firstName\": \"Test\",",
									"        \"lastName\": \"Automation\",",
									"        \"phoneNumber\": \"+1900\" + pm.variables.replaceIn(\"{{$randomInt}}{{$randomInt}}\"),",
									"        \"birthdate\": \"2000-01-01\",",
									"        \"termsAndConditions\": {",
									"            \"platform\": pm.environment.get(\"platform\"),",
									"            \"subplatform\": pm.environment.get(\"program\")",
									"        },",
									"        \"advertisement\": true,",
									"        \"origin\": \"web\",",
									"        \"country\": pm.environment.get(\"country\"),",
									"        \"zipcode\": \"27507\",",
									"        \"platform\": pm.environment.get(\"platform\"),",
									"        \"migration_tier\": \"NA\",",
									"        \"migration_points\": 0,",
									"        \"origin_platform_type\": pm.environment.get(\"platform\"),",
									"        \"rewards_platform_id\": pm.environment.get(\"platform\"),",
									"        \"rewards_program_id\": pm.environment.get(\"program\"),",
									"        \"registration_device_id\": \"501006464537369204515159537367804093171\",",
									"        \"registration_device_model\": \"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0\",",
									"        \"registration_device_platform\": \"Win32\",",
									"        \"registration_device_os\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)\",",
									"        \"is_active\": true,",
									"        \"origin_product_OwnerId\": pm.environment.get(\"platform\"),",
									"        \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.15\",",
									"        \"origin_url\": \"http://localhost:4200\",",
									"        \"program\": pm.environment.get(\"program\"),",
									"        \"locale\": pm.environment.get(\"locale\"),",
									"        \"create_sso\": true,",
									"        \"password\": \"Automation2022\",",
									"        \"gender\": \"Male\",",
									"        \"signup_campaign\": \"Budlight\",",
									"        \"brand\": \"Budlight\",",
									"        \"campaign_create_sso\": false",
									"    })",
									"};",
									"",
									"pm.sendRequest(createUser)",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": \"{{ssoCampaignClient}}\",\n  \"platform\": \"{{platform}}\",\n  \"program\": \"{{program}}\",\n  \"origin\": \"web\",\n  \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\",\n  \"redirect\": \"https://dev.d3dgy67whut41c.amplifyapp.com/\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlApiAbi}}/auth/update/password",
							"host": [
								"{{urlApiAbi}}"
							],
							"path": [
								"auth",
								"update",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "200_Update Password_ SSO Campaign true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//BEESRPG-T2640\r",
									"//BEESRPG-T2647\r",
									"//BEESRPG-T2648\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name OK\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is equal to 200\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Successful operation\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response must have a body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const schema = { \r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"status\": { \"type\": \"string\" }, \r",
									"        \"statusCode\": { \"type\": \"number\" }, \r",
									"        \"apiCode\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"required\": [\"status\", \"statusCode\", \"message\"]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userEmail = (pm.variables.replaceIn(\"{{$randomEmail}}\").toLowerCase())",
									"    pm.variables.set(\"ssoCampaignClient\", userEmail)",
									"",
									"var createUser = {",
									"    url: pm.environment.get(\"urlApiAbi\") + '/client',",
									"    headers: {",
									"        'token': pm.environment.get(\"token\"),",
									"        'key': pm.environment.get(\"key\"),",
									"        'Content-Type': 'application/json'",
									"    },",
									"    method: 'POST',",
									"    body: JSON.stringify({",
									"        \"email\": userEmail,",
									"        \"firstName\": \"Test\",",
									"        \"lastName\": \"Automation\",",
									"        \"phoneNumber\": \"+1900\" + pm.variables.replaceIn(\"{{$randomInt}}{{$randomInt}}\"),",
									"        \"birthdate\": \"2000-01-01\",",
									"        \"termsAndConditions\": {",
									"            \"platform\": pm.environment.get(\"platform\"),",
									"            \"subplatform\": pm.environment.get(\"program\")",
									"        },",
									"        \"advertisement\": true,",
									"        \"origin\": \"web\",",
									"        \"country\": pm.environment.get(\"country\"),",
									"        \"zipcode\": \"27507\",",
									"        \"platform\": pm.environment.get(\"platform\"),",
									"        \"migration_tier\": \"NA\",",
									"        \"migration_points\": 0,",
									"        \"origin_platform_type\": pm.environment.get(\"platform\"),",
									"        \"rewards_platform_id\": pm.environment.get(\"platform\"),",
									"        \"rewards_program_id\": pm.environment.get(\"program\"),",
									"        \"registration_device_id\": \"501006464537369204515159537367804093171\",",
									"        \"registration_device_model\": \"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0\",",
									"        \"registration_device_platform\": \"Win32\",",
									"        \"registration_device_os\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)\",",
									"        \"is_active\": true,",
									"        \"origin_product_OwnerId\": pm.environment.get(\"platform\"),",
									"        \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.15\",",
									"        \"origin_url\": \"http://localhost:4200\",",
									"        \"program\": pm.environment.get(\"program\"),",
									"        \"locale\": pm.environment.get(\"locale\"),",
									"        \"create_sso\": true,",
									"        \"password\": \"Automation2022\",",
									"        \"gender\": \"Male\",",
									"        \"signup_campaign\": \"Budlight\",",
									"        \"brand\": \"Budlight\",",
									"        \"campaign_create_sso\": true",
									"    })",
									"};",
									"",
									"pm.sendRequest(createUser)",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": \"{{ssoCampaignClient}}\",\n  \"platform\": \"{{platform}}\",\n  \"program\": \"{{program}}\",\n  \"origin\": \"web\",\n  \"agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 OPR/78.0.4093.171\",\n  \"redirect\": \"https://dev.d3dgy67whut41c.amplifyapp.com/\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{urlApiAbi}}/auth/update/password",
							"host": [
								"{{urlApiAbi}}"
							],
							"path": [
								"auth",
								"update",
								"password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Refractor USA-Custom function",
			"item": [
				{
					"name": "Hub-content",
					"item": [
						{
							"name": "Hub-content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"kind\": { \"type\": \"string\" }, \r",
											"        \"title\": { \"type\": \"string\" }, \r",
											"        \"points\": { \"type\": \"null\" },\r",
											"        \"imageUrl\": { \"type\": \"array\" },\r",
											"        \"link\": { \"type\": \"array\" },\r",
											"    },\r",
											"    \r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Origin",
										"value": "http://localhost:3000",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://us-qa-api.abi-rewards.de/custom/mycooler/hub-content?brand=budweiser&kinds=quiz&kinds=survey&kinds=sweeps&kinds=merch&kinds=offer",
									"protocol": "https",
									"host": [
										"us-qa-api",
										"abi-rewards",
										"de"
									],
									"path": [
										"custom",
										"mycooler",
										"hub-content"
									],
									"query": [
										{
											"key": "brand",
											"value": "budweiser"
										},
										{
											"key": "kinds",
											"value": "quiz"
										},
										{
											"key": "kinds",
											"value": "survey"
										},
										{
											"key": "kinds",
											"value": "sweeps"
										},
										{
											"key": "kinds",
											"value": "merch"
										},
										{
											"key": "kinds",
											"value": "offer"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "FAQ",
					"item": [
						{
							"name": "FAQ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name OK\", () => {\r",
											"  pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"kind\": { \"type\": \"string\" }, \r",
											"        \"title\": { \"type\": \"string\" }, \r",
											"        \"points\": { \"type\": \"null\" },\r",
											"        \"imageUrl\": { \"type\": \"array\" },\r",
											"        \"link\": { \"type\": \"array\" },\r",
											"    },\r",
											"    \r",
											"};\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "origin",
										"value": "https://app.mycooler.com",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://us-qa-api.abi-rewards.de/custom/mycooler/faq",
									"protocol": "https",
									"host": [
										"us-qa-api",
										"abi-rewards",
										"de"
									],
									"path": [
										"custom",
										"mycooler",
										"faq"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check -for-user",
					"item": [
						{
							"name": "Check for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Unauthorized\", () => {\r",
											"  pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"pm.test(\"Status attribute is equal to Unauthorized'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{keyNAZ}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "token",
										"value": "{{tokenNAZ}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"email\":\"michael.shperberg@gmail.com\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://us-qa-api.abi-rewards.de/custom/integrations/bls/check-for-user",
									"protocol": "https",
									"host": [
										"us-qa-api",
										"abi-rewards",
										"de"
									],
									"path": [
										"custom",
										"integrations",
										"bls",
										"check-for-user"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Award-behavior",
					"item": [
						{
							"name": "Award -behavior",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Unauthorized\", () => {\r",
											"  pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"pm.test(\"Status attribute is equal to Unauthorized'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    pm.expect(jsonData.message).to.eql(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "key",
										"value": "{{keyNAZ}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "token",
										"value": "{{tokenNAZ}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n\r\n\"email\" : \"michael.shperberg@gmail.com\",\r\n\r\n\"behavior\": \"nfl_squares_50_plays\"\r\n\r\n\r\n\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://us-qa-api.abi-rewards.de/custom/integrations/bls/award-behavior",
									"protocol": "https",
									"host": [
										"us-qa-api",
										"abi-rewards",
										"de"
									],
									"path": [
										"custom",
										"integrations",
										"bls",
										"award-behavior"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "anniversaryToday",
			"value": ""
		},
		{
			"key": "allProperties",
			"value": ""
		},
		{
			"key": "birthdayToday",
			"value": ""
		},
		{
			"key": "date",
			"value": ""
		},
		{
			"key": "anniversary",
			"value": ""
		},
		{
			"key": "birthday",
			"value": ""
		},
		{
			"key": "runs",
			"value": ""
		}
	]
}